
LinearActuator_STM32H745_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007ea0  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  08008138  08008138  00018138  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080081a4  080081a4  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  080081a4  080081a4  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  080081a4  080081a4  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080081a4  080081a4  000181a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080081a8  080081a8  000181a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  24000000  080081ac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001ec  24000010  080081bc  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  240001fc  080081bc  000201fc  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017e78  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000241f  00000000  00000000  00037eb6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001470  00000000  00000000  0003a2d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001378  00000000  00000000  0003b748  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003b70e  00000000  00000000  0003cac0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015ce2  00000000  00000000  000781ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00198778  00000000  00000000  0008deb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00226628  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000059b8  00000000  00000000  00226678  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000010 	.word	0x24000010
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08008120 	.word	0x08008120

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000014 	.word	0x24000014
 80002d4:	08008120 	.word	0x08008120

080002d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80002d8:	b480      	push	{r7}
 80002da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80002dc:	4b3f      	ldr	r3, [pc, #252]	; (80003dc <SystemInit+0x104>)
 80002de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80002e2:	4a3e      	ldr	r2, [pc, #248]	; (80003dc <SystemInit+0x104>)
 80002e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80002e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80002ec:	4b3b      	ldr	r3, [pc, #236]	; (80003dc <SystemInit+0x104>)
 80002ee:	691b      	ldr	r3, [r3, #16]
 80002f0:	4a3a      	ldr	r2, [pc, #232]	; (80003dc <SystemInit+0x104>)
 80002f2:	f043 0310 	orr.w	r3, r3, #16
 80002f6:	6113      	str	r3, [r2, #16]

#ifdef CORE_CM7
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80002f8:	4b39      	ldr	r3, [pc, #228]	; (80003e0 <SystemInit+0x108>)
 80002fa:	681b      	ldr	r3, [r3, #0]
 80002fc:	f003 030f 	and.w	r3, r3, #15
 8000300:	2b06      	cmp	r3, #6
 8000302:	d807      	bhi.n	8000314 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000304:	4b36      	ldr	r3, [pc, #216]	; (80003e0 <SystemInit+0x108>)
 8000306:	681b      	ldr	r3, [r3, #0]
 8000308:	f023 030f 	bic.w	r3, r3, #15
 800030c:	4a34      	ldr	r2, [pc, #208]	; (80003e0 <SystemInit+0x108>)
 800030e:	f043 0307 	orr.w	r3, r3, #7
 8000312:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000314:	4b33      	ldr	r3, [pc, #204]	; (80003e4 <SystemInit+0x10c>)
 8000316:	681b      	ldr	r3, [r3, #0]
 8000318:	4a32      	ldr	r2, [pc, #200]	; (80003e4 <SystemInit+0x10c>)
 800031a:	f043 0301 	orr.w	r3, r3, #1
 800031e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000320:	4b30      	ldr	r3, [pc, #192]	; (80003e4 <SystemInit+0x10c>)
 8000322:	2200      	movs	r2, #0
 8000324:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, RC48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000326:	4b2f      	ldr	r3, [pc, #188]	; (80003e4 <SystemInit+0x10c>)
 8000328:	681a      	ldr	r2, [r3, #0]
 800032a:	492e      	ldr	r1, [pc, #184]	; (80003e4 <SystemInit+0x10c>)
 800032c:	4b2e      	ldr	r3, [pc, #184]	; (80003e8 <SystemInit+0x110>)
 800032e:	4013      	ands	r3, r2
 8000330:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000332:	4b2b      	ldr	r3, [pc, #172]	; (80003e0 <SystemInit+0x108>)
 8000334:	681b      	ldr	r3, [r3, #0]
 8000336:	f003 0308 	and.w	r3, r3, #8
 800033a:	2b00      	cmp	r3, #0
 800033c:	d007      	beq.n	800034e <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800033e:	4b28      	ldr	r3, [pc, #160]	; (80003e0 <SystemInit+0x108>)
 8000340:	681b      	ldr	r3, [r3, #0]
 8000342:	f023 030f 	bic.w	r3, r3, #15
 8000346:	4a26      	ldr	r2, [pc, #152]	; (80003e0 <SystemInit+0x108>)
 8000348:	f043 0307 	orr.w	r3, r3, #7
 800034c:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800034e:	4b25      	ldr	r3, [pc, #148]	; (80003e4 <SystemInit+0x10c>)
 8000350:	2200      	movs	r2, #0
 8000352:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000354:	4b23      	ldr	r3, [pc, #140]	; (80003e4 <SystemInit+0x10c>)
 8000356:	2200      	movs	r2, #0
 8000358:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800035a:	4b22      	ldr	r3, [pc, #136]	; (80003e4 <SystemInit+0x10c>)
 800035c:	2200      	movs	r2, #0
 800035e:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000360:	4b20      	ldr	r3, [pc, #128]	; (80003e4 <SystemInit+0x10c>)
 8000362:	4a22      	ldr	r2, [pc, #136]	; (80003ec <SystemInit+0x114>)
 8000364:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000366:	4b1f      	ldr	r3, [pc, #124]	; (80003e4 <SystemInit+0x10c>)
 8000368:	4a21      	ldr	r2, [pc, #132]	; (80003f0 <SystemInit+0x118>)
 800036a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800036c:	4b1d      	ldr	r3, [pc, #116]	; (80003e4 <SystemInit+0x10c>)
 800036e:	4a21      	ldr	r2, [pc, #132]	; (80003f4 <SystemInit+0x11c>)
 8000370:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000372:	4b1c      	ldr	r3, [pc, #112]	; (80003e4 <SystemInit+0x10c>)
 8000374:	2200      	movs	r2, #0
 8000376:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000378:	4b1a      	ldr	r3, [pc, #104]	; (80003e4 <SystemInit+0x10c>)
 800037a:	4a1e      	ldr	r2, [pc, #120]	; (80003f4 <SystemInit+0x11c>)
 800037c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800037e:	4b19      	ldr	r3, [pc, #100]	; (80003e4 <SystemInit+0x10c>)
 8000380:	2200      	movs	r2, #0
 8000382:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000384:	4b17      	ldr	r3, [pc, #92]	; (80003e4 <SystemInit+0x10c>)
 8000386:	4a1b      	ldr	r2, [pc, #108]	; (80003f4 <SystemInit+0x11c>)
 8000388:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800038a:	4b16      	ldr	r3, [pc, #88]	; (80003e4 <SystemInit+0x10c>)
 800038c:	2200      	movs	r2, #0
 800038e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000390:	4b14      	ldr	r3, [pc, #80]	; (80003e4 <SystemInit+0x10c>)
 8000392:	681b      	ldr	r3, [r3, #0]
 8000394:	4a13      	ldr	r2, [pc, #76]	; (80003e4 <SystemInit+0x10c>)
 8000396:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800039a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800039c:	4b11      	ldr	r3, [pc, #68]	; (80003e4 <SystemInit+0x10c>)
 800039e:	2200      	movs	r2, #0
 80003a0:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 80003a2:	4b15      	ldr	r3, [pc, #84]	; (80003f8 <SystemInit+0x120>)
 80003a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80003a6:	4a14      	ldr	r2, [pc, #80]	; (80003f8 <SystemInit+0x120>)
 80003a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80003ac:	6253      	str	r3, [r2, #36]	; 0x24


  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80003ae:	4b13      	ldr	r3, [pc, #76]	; (80003fc <SystemInit+0x124>)
 80003b0:	681a      	ldr	r2, [r3, #0]
 80003b2:	4b13      	ldr	r3, [pc, #76]	; (8000400 <SystemInit+0x128>)
 80003b4:	4013      	ands	r3, r2
 80003b6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80003ba:	d202      	bcs.n	80003c2 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80003bc:	4b11      	ldr	r3, [pc, #68]	; (8000404 <SystemInit+0x12c>)
 80003be:	2201      	movs	r2, #1
 80003c0:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80003c2:	4b11      	ldr	r3, [pc, #68]	; (8000408 <SystemInit+0x130>)
 80003c4:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80003c8:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 80003ca:	4b04      	ldr	r3, [pc, #16]	; (80003dc <SystemInit+0x104>)
 80003cc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80003d0:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 80003d2:	bf00      	nop
 80003d4:	46bd      	mov	sp, r7
 80003d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003da:	4770      	bx	lr
 80003dc:	e000ed00 	.word	0xe000ed00
 80003e0:	52002000 	.word	0x52002000
 80003e4:	58024400 	.word	0x58024400
 80003e8:	eaf6ed7f 	.word	0xeaf6ed7f
 80003ec:	02020200 	.word	0x02020200
 80003f0:	01ff0000 	.word	0x01ff0000
 80003f4:	01010280 	.word	0x01010280
 80003f8:	580000c0 	.word	0x580000c0
 80003fc:	5c001000 	.word	0x5c001000
 8000400:	ffff0000 	.word	0xffff0000
 8000404:	51008108 	.word	0x51008108
 8000408:	52004000 	.word	0x52004000

0800040c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800040c:	b580      	push	{r7, lr}
 800040e:	b084      	sub	sp, #16
 8000410:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  uint8_t set_p = 50;
 8000412:	2332      	movs	r3, #50	; 0x32
 8000414:	73fb      	strb	r3, [r7, #15]
/* USER CODE BEGIN Boot_Mode_Sequence_1 */
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000416:	f000 fd35 	bl	8000e84 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800041a:	f000 f8df 	bl	80005dc <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800041e:	f000 fae3 	bl	80009e8 <MX_GPIO_Init>
  MX_FDCAN1_Init();
 8000422:	f000 f9d9 	bl	80007d8 <MX_FDCAN1_Init>
  MX_TIM2_Init();
 8000426:	f000 fa87 	bl	8000938 <MX_TIM2_Init>
  MX_ADC1_Init();
 800042a:	f000 f95d 	bl	80006e8 <MX_ADC1_Init>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	/* Start the Transmission process */

    if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, TxData) != HAL_OK)
 800042e:	4a5f      	ldr	r2, [pc, #380]	; (80005ac <main+0x1a0>)
 8000430:	495f      	ldr	r1, [pc, #380]	; (80005b0 <main+0x1a4>)
 8000432:	4860      	ldr	r0, [pc, #384]	; (80005b4 <main+0x1a8>)
 8000434:	f002 fe4f 	bl	80030d6 <HAL_FDCAN_AddMessageToTxFifoQ>
 8000438:	4603      	mov	r3, r0
 800043a:	2b00      	cmp	r3, #0
 800043c:	d001      	beq.n	8000442 <main+0x36>
    {
      /* Transmission request Error */
      Error_Handler();
 800043e:	f000 fb6b 	bl	8000b18 <Error_Handler>
    {
      //Here code that sends position to CAN
    }
	/* Start the Reception process */
	/* Retrieve Rx messages from RX FIFO0 */
	if (HAL_FDCAN_GetRxMessage(&hfdcan1, FDCAN_RX_FIFO0, &RxHeader, RxData) == HAL_OK)
 8000442:	4b5d      	ldr	r3, [pc, #372]	; (80005b8 <main+0x1ac>)
 8000444:	4a5d      	ldr	r2, [pc, #372]	; (80005bc <main+0x1b0>)
 8000446:	2140      	movs	r1, #64	; 0x40
 8000448:	485a      	ldr	r0, [pc, #360]	; (80005b4 <main+0x1a8>)
 800044a:	f002 fe9f 	bl	800318c <HAL_FDCAN_GetRxMessage>
 800044e:	4603      	mov	r3, r0
 8000450:	2b00      	cmp	r3, #0
 8000452:	d10e      	bne.n	8000472 <main+0x66>
	{
		//if ((RxHeader.Identifier == 0x255) && (RxHeader.IdType == FDCAN_STANDARD_ID) && (RxHeader.DataLength == FDCAN_DLC_BYTES_8))
		if(RxHeader.Identifier == 0x255)
 8000454:	4b59      	ldr	r3, [pc, #356]	; (80005bc <main+0x1b0>)
 8000456:	681b      	ldr	r3, [r3, #0]
 8000458:	f240 2255 	movw	r2, #597	; 0x255
 800045c:	4293      	cmp	r3, r2
 800045e:	d10a      	bne.n	8000476 <main+0x6a>
		{
			HAL_GPIO_TogglePin(LD3_GPIO_Port,LD3_Pin);
 8000460:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000464:	4856      	ldr	r0, [pc, #344]	; (80005c0 <main+0x1b4>)
 8000466:	f003 ff5a 	bl	800431e <HAL_GPIO_TogglePin>
			RxHeader.DataLength = FDCAN_DLC_BYTES_0;
 800046a:	4b54      	ldr	r3, [pc, #336]	; (80005bc <main+0x1b0>)
 800046c:	2200      	movs	r2, #0
 800046e:	60da      	str	r2, [r3, #12]
 8000470:	e001      	b.n	8000476 <main+0x6a>
		}
	}
	else
	{
		/* Reception Error */
		Error_Handler();
 8000472:	f000 fb51 	bl	8000b18 <Error_Handler>
	}

	uint8_t aux = set_p;
 8000476:	7bfb      	ldrb	r3, [r7, #15]
 8000478:	72fb      	strb	r3, [r7, #11]
	set_p = RxData[0];
 800047a:	4b4f      	ldr	r3, [pc, #316]	; (80005b8 <main+0x1ac>)
 800047c:	781b      	ldrb	r3, [r3, #0]
 800047e:	73fb      	strb	r3, [r7, #15]
	if (set_p != aux)
 8000480:	7bfa      	ldrb	r2, [r7, #15]
 8000482:	7afb      	ldrb	r3, [r7, #11]
 8000484:	429a      	cmp	r2, r3
 8000486:	d003      	beq.n	8000490 <main+0x84>
	{
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000488:	2102      	movs	r1, #2
 800048a:	484e      	ldr	r0, [pc, #312]	; (80005c4 <main+0x1b8>)
 800048c:	f003 ff47 	bl	800431e <HAL_GPIO_TogglePin>
	}

	HAL_ADC_Start(&hadc1);
 8000490:	484d      	ldr	r0, [pc, #308]	; (80005c8 <main+0x1bc>)
 8000492:	f001 f98d 	bl	80017b0 <HAL_ADC_Start>
    HAL_ADC_PollForConversion(&hadc1, 100);
 8000496:	2164      	movs	r1, #100	; 0x64
 8000498:	484b      	ldr	r0, [pc, #300]	; (80005c8 <main+0x1bc>)
 800049a:	f001 fa87 	bl	80019ac <HAL_ADC_PollForConversion>
    uint8_t ADC_Val = HAL_ADC_GetValue(&hadc1);
 800049e:	484a      	ldr	r0, [pc, #296]	; (80005c8 <main+0x1bc>)
 80004a0:	f001 fb78 	bl	8001b94 <HAL_ADC_GetValue>
 80004a4:	4603      	mov	r3, r0
 80004a6:	72bb      	strb	r3, [r7, #10]

    pos = (ADC_Val * 100 / 255);
 80004a8:	7abb      	ldrb	r3, [r7, #10]
 80004aa:	2264      	movs	r2, #100	; 0x64
 80004ac:	fb02 f303 	mul.w	r3, r2, r3
 80004b0:	4a46      	ldr	r2, [pc, #280]	; (80005cc <main+0x1c0>)
 80004b2:	fb82 1203 	smull	r1, r2, r2, r3
 80004b6:	441a      	add	r2, r3
 80004b8:	11d2      	asrs	r2, r2, #7
 80004ba:	17db      	asrs	r3, r3, #31
 80004bc:	1ad3      	subs	r3, r2, r3
 80004be:	813b      	strh	r3, [r7, #8]
    new_pos = pos - set_p;
 80004c0:	893a      	ldrh	r2, [r7, #8]
 80004c2:	7bfb      	ldrb	r3, [r7, #15]
 80004c4:	b29b      	uxth	r3, r3
 80004c6:	1ad3      	subs	r3, r2, r3
 80004c8:	b29b      	uxth	r3, r3
 80004ca:	80fb      	strh	r3, [r7, #6]

    if(new_pos > 5)
 80004cc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80004d0:	2b05      	cmp	r3, #5
 80004d2:	dd1c      	ble.n	800050e <main+0x102>
    {
	  //Backward
	  pwm = (htim2.Instance -> ARR * (float)(0.2));
 80004d4:	4b3e      	ldr	r3, [pc, #248]	; (80005d0 <main+0x1c4>)
 80004d6:	681b      	ldr	r3, [r3, #0]
 80004d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80004da:	ee07 3a90 	vmov	s15, r3
 80004de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80004e2:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 80005d4 <main+0x1c8>
 80004e6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80004ea:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80004ee:	ee17 3a90 	vmov	r3, s15
 80004f2:	81bb      	strh	r3, [r7, #12]
	  HAL_GPIO_WritePin(GPIOB, IN1_Pin, GPIO_PIN_RESET);
 80004f4:	2200      	movs	r2, #0
 80004f6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80004fa:	4831      	ldr	r0, [pc, #196]	; (80005c0 <main+0x1b4>)
 80004fc:	f003 fef6 	bl	80042ec <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, IN2_Pin, GPIO_PIN_SET);
 8000500:	2201      	movs	r2, #1
 8000502:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000506:	482e      	ldr	r0, [pc, #184]	; (80005c0 <main+0x1b4>)
 8000508:	f003 fef0 	bl	80042ec <HAL_GPIO_WritePin>
 800050c:	e03d      	b.n	800058a <main+0x17e>

    }
    else if(new_pos <- 5)
 800050e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000512:	f113 0f05 	cmn.w	r3, #5
 8000516:	da1c      	bge.n	8000552 <main+0x146>
    {
	  //Forward
	  pwm = (htim2.Instance -> ARR * (float)(0.2));
 8000518:	4b2d      	ldr	r3, [pc, #180]	; (80005d0 <main+0x1c4>)
 800051a:	681b      	ldr	r3, [r3, #0]
 800051c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800051e:	ee07 3a90 	vmov	s15, r3
 8000522:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000526:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 80005d4 <main+0x1c8>
 800052a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800052e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000532:	ee17 3a90 	vmov	r3, s15
 8000536:	81bb      	strh	r3, [r7, #12]
	  HAL_GPIO_WritePin(GPIOB, IN2_Pin, GPIO_PIN_RESET);
 8000538:	2200      	movs	r2, #0
 800053a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800053e:	4820      	ldr	r0, [pc, #128]	; (80005c0 <main+0x1b4>)
 8000540:	f003 fed4 	bl	80042ec <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, IN1_Pin, GPIO_PIN_SET);
 8000544:	2201      	movs	r2, #1
 8000546:	f44f 7180 	mov.w	r1, #256	; 0x100
 800054a:	481d      	ldr	r0, [pc, #116]	; (80005c0 <main+0x1b4>)
 800054c:	f003 fece 	bl	80042ec <HAL_GPIO_WritePin>
 8000550:	e01b      	b.n	800058a <main+0x17e>

    }
    else
    {
	  //Stay
	  pwm = (htim2.Instance -> ARR * (float)(0));
 8000552:	4b1f      	ldr	r3, [pc, #124]	; (80005d0 <main+0x1c4>)
 8000554:	681b      	ldr	r3, [r3, #0]
 8000556:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000558:	ee07 3a90 	vmov	s15, r3
 800055c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000560:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 80005d8 <main+0x1cc>
 8000564:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000568:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800056c:	ee17 3a90 	vmov	r3, s15
 8000570:	81bb      	strh	r3, [r7, #12]
	  HAL_GPIO_WritePin(GPIOB, IN1_Pin, GPIO_PIN_RESET);
 8000572:	2200      	movs	r2, #0
 8000574:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000578:	4811      	ldr	r0, [pc, #68]	; (80005c0 <main+0x1b4>)
 800057a:	f003 feb7 	bl	80042ec <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, IN2_Pin, GPIO_PIN_RESET);
 800057e:	2200      	movs	r2, #0
 8000580:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000584:	480e      	ldr	r0, [pc, #56]	; (80005c0 <main+0x1b4>)
 8000586:	f003 feb1 	bl	80042ec <HAL_GPIO_WritePin>
    }
    htim2.Instance->CCR1 = pwm;
 800058a:	4b11      	ldr	r3, [pc, #68]	; (80005d0 <main+0x1c4>)
 800058c:	681b      	ldr	r3, [r3, #0]
 800058e:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000592:	635a      	str	r2, [r3, #52]	; 0x34
    HAL_ADC_Stop(&hadc1);
 8000594:	480c      	ldr	r0, [pc, #48]	; (80005c8 <main+0x1bc>)
 8000596:	f001 f9d5 	bl	8001944 <HAL_ADC_Stop>

    TxData[0]=ADC_Val;
 800059a:	4a04      	ldr	r2, [pc, #16]	; (80005ac <main+0x1a0>)
 800059c:	7abb      	ldrb	r3, [r7, #10]
 800059e:	7013      	strb	r3, [r2, #0]

	HAL_Delay(2000);
 80005a0:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80005a4:	f000 fd00 	bl	8000fa8 <HAL_Delay>
  {
 80005a8:	e741      	b.n	800042e <main+0x22>
 80005aa:	bf00      	nop
 80005ac:	240001d0 	.word	0x240001d0
 80005b0:	240001ac 	.word	0x240001ac
 80005b4:	24000090 	.word	0x24000090
 80005b8:	240001a4 	.word	0x240001a4
 80005bc:	2400017c 	.word	0x2400017c
 80005c0:	58020400 	.word	0x58020400
 80005c4:	58021000 	.word	0x58021000
 80005c8:	2400002c 	.word	0x2400002c
 80005cc:	80808081 	.word	0x80808081
 80005d0:	24000130 	.word	0x24000130
 80005d4:	3e4ccccd 	.word	0x3e4ccccd
 80005d8:	00000000 	.word	0x00000000

080005dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b09c      	sub	sp, #112	; 0x70
 80005e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80005e6:	224c      	movs	r2, #76	; 0x4c
 80005e8:	2100      	movs	r1, #0
 80005ea:	4618      	mov	r0, r3
 80005ec:	f007 fd90 	bl	8008110 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005f0:	1d3b      	adds	r3, r7, #4
 80005f2:	2220      	movs	r2, #32
 80005f4:	2100      	movs	r1, #0
 80005f6:	4618      	mov	r0, r3
 80005f8:	f007 fd8a 	bl	8008110 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80005fc:	2004      	movs	r0, #4
 80005fe:	f003 fea9 	bl	8004354 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000602:	2300      	movs	r3, #0
 8000604:	603b      	str	r3, [r7, #0]
 8000606:	4b35      	ldr	r3, [pc, #212]	; (80006dc <SystemClock_Config+0x100>)
 8000608:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800060a:	4a34      	ldr	r2, [pc, #208]	; (80006dc <SystemClock_Config+0x100>)
 800060c:	f023 0301 	bic.w	r3, r3, #1
 8000610:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000612:	4b32      	ldr	r3, [pc, #200]	; (80006dc <SystemClock_Config+0x100>)
 8000614:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000616:	f003 0301 	and.w	r3, r3, #1
 800061a:	603b      	str	r3, [r7, #0]
 800061c:	4b30      	ldr	r3, [pc, #192]	; (80006e0 <SystemClock_Config+0x104>)
 800061e:	699b      	ldr	r3, [r3, #24]
 8000620:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000624:	4a2e      	ldr	r2, [pc, #184]	; (80006e0 <SystemClock_Config+0x104>)
 8000626:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800062a:	6193      	str	r3, [r2, #24]
 800062c:	4b2c      	ldr	r3, [pc, #176]	; (80006e0 <SystemClock_Config+0x104>)
 800062e:	699b      	ldr	r3, [r3, #24]
 8000630:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000634:	603b      	str	r3, [r7, #0]
 8000636:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000638:	bf00      	nop
 800063a:	4b29      	ldr	r3, [pc, #164]	; (80006e0 <SystemClock_Config+0x104>)
 800063c:	699b      	ldr	r3, [r3, #24]
 800063e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000642:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000646:	d1f8      	bne.n	800063a <SystemClock_Config+0x5e>
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8000648:	4b26      	ldr	r3, [pc, #152]	; (80006e4 <SystemClock_Config+0x108>)
 800064a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800064c:	f023 0303 	bic.w	r3, r3, #3
 8000650:	4a24      	ldr	r2, [pc, #144]	; (80006e4 <SystemClock_Config+0x108>)
 8000652:	f043 0302 	orr.w	r3, r3, #2
 8000656:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000658:	2301      	movs	r3, #1
 800065a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800065c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000660:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000662:	2302      	movs	r3, #2
 8000664:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000666:	2302      	movs	r3, #2
 8000668:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 800066a:	2301      	movs	r3, #1
 800066c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 20;
 800066e:	2314      	movs	r3, #20
 8000670:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000672:	2302      	movs	r3, #2
 8000674:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000676:	2304      	movs	r3, #4
 8000678:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800067a:	2302      	movs	r3, #2
 800067c:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800067e:	230c      	movs	r3, #12
 8000680:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOMEDIUM;
 8000682:	2302      	movs	r3, #2
 8000684:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000686:	2300      	movs	r3, #0
 8000688:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800068a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800068e:	4618      	mov	r0, r3
 8000690:	f003 feba 	bl	8004408 <HAL_RCC_OscConfig>
 8000694:	4603      	mov	r3, r0
 8000696:	2b00      	cmp	r3, #0
 8000698:	d001      	beq.n	800069e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800069a:	f000 fa3d 	bl	8000b18 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800069e:	233f      	movs	r3, #63	; 0x3f
 80006a0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006a2:	2303      	movs	r3, #3
 80006a4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80006a6:	2300      	movs	r3, #0
 80006a8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80006aa:	2300      	movs	r3, #0
 80006ac:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80006ae:	2300      	movs	r3, #0
 80006b0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 80006b2:	2300      	movs	r3, #0
 80006b4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 80006b6:	2300      	movs	r3, #0
 80006b8:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80006ba:	2300      	movs	r3, #0
 80006bc:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80006be:	1d3b      	adds	r3, r7, #4
 80006c0:	2101      	movs	r1, #1
 80006c2:	4618      	mov	r0, r3
 80006c4:	f004 faae 	bl	8004c24 <HAL_RCC_ClockConfig>
 80006c8:	4603      	mov	r3, r0
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d001      	beq.n	80006d2 <SystemClock_Config+0xf6>
  {
    Error_Handler();
 80006ce:	f000 fa23 	bl	8000b18 <Error_Handler>
  }
}
 80006d2:	bf00      	nop
 80006d4:	3770      	adds	r7, #112	; 0x70
 80006d6:	46bd      	mov	sp, r7
 80006d8:	bd80      	pop	{r7, pc}
 80006da:	bf00      	nop
 80006dc:	58000400 	.word	0x58000400
 80006e0:	58024800 	.word	0x58024800
 80006e4:	58024400 	.word	0x58024400

080006e8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b08a      	sub	sp, #40	; 0x28
 80006ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80006ee:	f107 031c 	add.w	r3, r7, #28
 80006f2:	2200      	movs	r2, #0
 80006f4:	601a      	str	r2, [r3, #0]
 80006f6:	605a      	str	r2, [r3, #4]
 80006f8:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80006fa:	463b      	mov	r3, r7
 80006fc:	2200      	movs	r2, #0
 80006fe:	601a      	str	r2, [r3, #0]
 8000700:	605a      	str	r2, [r3, #4]
 8000702:	609a      	str	r2, [r3, #8]
 8000704:	60da      	str	r2, [r3, #12]
 8000706:	611a      	str	r2, [r3, #16]
 8000708:	615a      	str	r2, [r3, #20]
 800070a:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 800070c:	4b2f      	ldr	r3, [pc, #188]	; (80007cc <MX_ADC1_Init+0xe4>)
 800070e:	4a30      	ldr	r2, [pc, #192]	; (80007d0 <MX_ADC1_Init+0xe8>)
 8000710:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000712:	4b2e      	ldr	r3, [pc, #184]	; (80007cc <MX_ADC1_Init+0xe4>)
 8000714:	2200      	movs	r2, #0
 8000716:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_8B;
 8000718:	4b2c      	ldr	r3, [pc, #176]	; (80007cc <MX_ADC1_Init+0xe4>)
 800071a:	2210      	movs	r2, #16
 800071c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800071e:	4b2b      	ldr	r3, [pc, #172]	; (80007cc <MX_ADC1_Init+0xe4>)
 8000720:	2200      	movs	r2, #0
 8000722:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000724:	4b29      	ldr	r3, [pc, #164]	; (80007cc <MX_ADC1_Init+0xe4>)
 8000726:	2204      	movs	r2, #4
 8000728:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800072a:	4b28      	ldr	r3, [pc, #160]	; (80007cc <MX_ADC1_Init+0xe4>)
 800072c:	2200      	movs	r2, #0
 800072e:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000730:	4b26      	ldr	r3, [pc, #152]	; (80007cc <MX_ADC1_Init+0xe4>)
 8000732:	2200      	movs	r2, #0
 8000734:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 8000736:	4b25      	ldr	r3, [pc, #148]	; (80007cc <MX_ADC1_Init+0xe4>)
 8000738:	2201      	movs	r2, #1
 800073a:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800073c:	4b23      	ldr	r3, [pc, #140]	; (80007cc <MX_ADC1_Init+0xe4>)
 800073e:	2200      	movs	r2, #0
 8000740:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000742:	4b22      	ldr	r3, [pc, #136]	; (80007cc <MX_ADC1_Init+0xe4>)
 8000744:	2200      	movs	r2, #0
 8000746:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000748:	4b20      	ldr	r3, [pc, #128]	; (80007cc <MX_ADC1_Init+0xe4>)
 800074a:	2200      	movs	r2, #0
 800074c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 800074e:	4b1f      	ldr	r3, [pc, #124]	; (80007cc <MX_ADC1_Init+0xe4>)
 8000750:	2200      	movs	r2, #0
 8000752:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000754:	4b1d      	ldr	r3, [pc, #116]	; (80007cc <MX_ADC1_Init+0xe4>)
 8000756:	2200      	movs	r2, #0
 8000758:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800075a:	4b1c      	ldr	r3, [pc, #112]	; (80007cc <MX_ADC1_Init+0xe4>)
 800075c:	2200      	movs	r2, #0
 800075e:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000760:	4b1a      	ldr	r3, [pc, #104]	; (80007cc <MX_ADC1_Init+0xe4>)
 8000762:	2200      	movs	r2, #0
 8000764:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000768:	4818      	ldr	r0, [pc, #96]	; (80007cc <MX_ADC1_Init+0xe4>)
 800076a:	f000 fe7f 	bl	800146c <HAL_ADC_Init>
 800076e:	4603      	mov	r3, r0
 8000770:	2b00      	cmp	r3, #0
 8000772:	d001      	beq.n	8000778 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000774:	f000 f9d0 	bl	8000b18 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000778:	2300      	movs	r3, #0
 800077a:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800077c:	f107 031c 	add.w	r3, r7, #28
 8000780:	4619      	mov	r1, r3
 8000782:	4812      	ldr	r0, [pc, #72]	; (80007cc <MX_ADC1_Init+0xe4>)
 8000784:	f002 f83a 	bl	80027fc <HAL_ADCEx_MultiModeConfigChannel>
 8000788:	4603      	mov	r3, r0
 800078a:	2b00      	cmp	r3, #0
 800078c:	d001      	beq.n	8000792 <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 800078e:	f000 f9c3 	bl	8000b18 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8000792:	4b10      	ldr	r3, [pc, #64]	; (80007d4 <MX_ADC1_Init+0xec>)
 8000794:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000796:	2306      	movs	r3, #6
 8000798:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800079a:	2300      	movs	r3, #0
 800079c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800079e:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80007a2:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80007a4:	2304      	movs	r3, #4
 80007a6:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80007a8:	2300      	movs	r3, #0
 80007aa:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 80007ac:	2300      	movs	r3, #0
 80007ae:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007b0:	463b      	mov	r3, r7
 80007b2:	4619      	mov	r1, r3
 80007b4:	4805      	ldr	r0, [pc, #20]	; (80007cc <MX_ADC1_Init+0xe4>)
 80007b6:	f001 f9fb 	bl	8001bb0 <HAL_ADC_ConfigChannel>
 80007ba:	4603      	mov	r3, r0
 80007bc:	2b00      	cmp	r3, #0
 80007be:	d001      	beq.n	80007c4 <MX_ADC1_Init+0xdc>
  {
    Error_Handler();
 80007c0:	f000 f9aa 	bl	8000b18 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80007c4:	bf00      	nop
 80007c6:	3728      	adds	r7, #40	; 0x28
 80007c8:	46bd      	mov	sp, r7
 80007ca:	bd80      	pop	{r7, pc}
 80007cc:	2400002c 	.word	0x2400002c
 80007d0:	40022000 	.word	0x40022000
 80007d4:	3ef08000 	.word	0x3ef08000

080007d8 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_Init 0 */
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */
  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 80007dc:	4b52      	ldr	r3, [pc, #328]	; (8000928 <MX_FDCAN1_Init+0x150>)
 80007de:	4a53      	ldr	r2, [pc, #332]	; (800092c <MX_FDCAN1_Init+0x154>)
 80007e0:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 80007e2:	4b51      	ldr	r3, [pc, #324]	; (8000928 <MX_FDCAN1_Init+0x150>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 80007e8:	4b4f      	ldr	r3, [pc, #316]	; (8000928 <MX_FDCAN1_Init+0x150>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 80007ee:	4b4e      	ldr	r3, [pc, #312]	; (8000928 <MX_FDCAN1_Init+0x150>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 80007f4:	4b4c      	ldr	r3, [pc, #304]	; (8000928 <MX_FDCAN1_Init+0x150>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = ENABLE;
 80007fa:	4b4b      	ldr	r3, [pc, #300]	; (8000928 <MX_FDCAN1_Init+0x150>)
 80007fc:	2201      	movs	r2, #1
 80007fe:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 0x1;
 8000800:	4b49      	ldr	r3, [pc, #292]	; (8000928 <MX_FDCAN1_Init+0x150>)
 8000802:	2201      	movs	r2, #1
 8000804:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 0x8;
 8000806:	4b48      	ldr	r3, [pc, #288]	; (8000928 <MX_FDCAN1_Init+0x150>)
 8000808:	2208      	movs	r2, #8
 800080a:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 0x1F;
 800080c:	4b46      	ldr	r3, [pc, #280]	; (8000928 <MX_FDCAN1_Init+0x150>)
 800080e:	221f      	movs	r2, #31
 8000810:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 0x8;
 8000812:	4b45      	ldr	r3, [pc, #276]	; (8000928 <MX_FDCAN1_Init+0x150>)
 8000814:	2208      	movs	r2, #8
 8000816:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8000818:	4b43      	ldr	r3, [pc, #268]	; (8000928 <MX_FDCAN1_Init+0x150>)
 800081a:	2201      	movs	r2, #1
 800081c:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 800081e:	4b42      	ldr	r3, [pc, #264]	; (8000928 <MX_FDCAN1_Init+0x150>)
 8000820:	2201      	movs	r2, #1
 8000822:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8000824:	4b40      	ldr	r3, [pc, #256]	; (8000928 <MX_FDCAN1_Init+0x150>)
 8000826:	2201      	movs	r2, #1
 8000828:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 800082a:	4b3f      	ldr	r3, [pc, #252]	; (8000928 <MX_FDCAN1_Init+0x150>)
 800082c:	2201      	movs	r2, #1
 800082e:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 8000830:	4b3d      	ldr	r3, [pc, #244]	; (8000928 <MX_FDCAN1_Init+0x150>)
 8000832:	2200      	movs	r2, #0
 8000834:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.StdFiltersNbr = 1;
 8000836:	4b3c      	ldr	r3, [pc, #240]	; (8000928 <MX_FDCAN1_Init+0x150>)
 8000838:	2201      	movs	r2, #1
 800083a:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 800083c:	4b3a      	ldr	r3, [pc, #232]	; (8000928 <MX_FDCAN1_Init+0x150>)
 800083e:	2200      	movs	r2, #0
 8000840:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 1;
 8000842:	4b39      	ldr	r3, [pc, #228]	; (8000928 <MX_FDCAN1_Init+0x150>)
 8000844:	2201      	movs	r2, #1
 8000846:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8000848:	4b37      	ldr	r3, [pc, #220]	; (8000928 <MX_FDCAN1_Init+0x150>)
 800084a:	2204      	movs	r2, #4
 800084c:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 800084e:	4b36      	ldr	r3, [pc, #216]	; (8000928 <MX_FDCAN1_Init+0x150>)
 8000850:	2200      	movs	r2, #0
 8000852:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8000854:	4b34      	ldr	r3, [pc, #208]	; (8000928 <MX_FDCAN1_Init+0x150>)
 8000856:	2204      	movs	r2, #4
 8000858:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 800085a:	4b33      	ldr	r3, [pc, #204]	; (8000928 <MX_FDCAN1_Init+0x150>)
 800085c:	2200      	movs	r2, #0
 800085e:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8000860:	4b31      	ldr	r3, [pc, #196]	; (8000928 <MX_FDCAN1_Init+0x150>)
 8000862:	2204      	movs	r2, #4
 8000864:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 8000866:	4b30      	ldr	r3, [pc, #192]	; (8000928 <MX_FDCAN1_Init+0x150>)
 8000868:	2200      	movs	r2, #0
 800086a:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 800086c:	4b2e      	ldr	r3, [pc, #184]	; (8000928 <MX_FDCAN1_Init+0x150>)
 800086e:	2200      	movs	r2, #0
 8000870:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 1;
 8000872:	4b2d      	ldr	r3, [pc, #180]	; (8000928 <MX_FDCAN1_Init+0x150>)
 8000874:	2201      	movs	r2, #1
 8000876:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000878:	4b2b      	ldr	r3, [pc, #172]	; (8000928 <MX_FDCAN1_Init+0x150>)
 800087a:	2200      	movs	r2, #0
 800087c:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 800087e:	4b2a      	ldr	r3, [pc, #168]	; (8000928 <MX_FDCAN1_Init+0x150>)
 8000880:	2204      	movs	r2, #4
 8000882:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000884:	4828      	ldr	r0, [pc, #160]	; (8000928 <MX_FDCAN1_Init+0x150>)
 8000886:	f002 f9a7 	bl	8002bd8 <HAL_FDCAN_Init>
 800088a:	4603      	mov	r3, r0
 800088c:	2b00      	cmp	r3, #0
 800088e:	d001      	beq.n	8000894 <MX_FDCAN1_Init+0xbc>
  {
    Error_Handler();
 8000890:	f000 f942 	bl	8000b18 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */
/* Configure Rx filter */
  sFilterConfig.IdType = FDCAN_STANDARD_ID;
 8000894:	4b26      	ldr	r3, [pc, #152]	; (8000930 <MX_FDCAN1_Init+0x158>)
 8000896:	2200      	movs	r2, #0
 8000898:	601a      	str	r2, [r3, #0]
  sFilterConfig.FilterIndex = 0;
 800089a:	4b25      	ldr	r3, [pc, #148]	; (8000930 <MX_FDCAN1_Init+0x158>)
 800089c:	2200      	movs	r2, #0
 800089e:	605a      	str	r2, [r3, #4]
  sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 80008a0:	4b23      	ldr	r3, [pc, #140]	; (8000930 <MX_FDCAN1_Init+0x158>)
 80008a2:	2202      	movs	r2, #2
 80008a4:	609a      	str	r2, [r3, #8]
  sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 80008a6:	4b22      	ldr	r3, [pc, #136]	; (8000930 <MX_FDCAN1_Init+0x158>)
 80008a8:	2201      	movs	r2, #1
 80008aa:	60da      	str	r2, [r3, #12]
  sFilterConfig.FilterID1 = 0x321;
 80008ac:	4b20      	ldr	r3, [pc, #128]	; (8000930 <MX_FDCAN1_Init+0x158>)
 80008ae:	f240 3221 	movw	r2, #801	; 0x321
 80008b2:	611a      	str	r2, [r3, #16]
  sFilterConfig.FilterID2 = 0x7FF;
 80008b4:	4b1e      	ldr	r3, [pc, #120]	; (8000930 <MX_FDCAN1_Init+0x158>)
 80008b6:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80008ba:	615a      	str	r2, [r3, #20]
  if (HAL_FDCAN_ConfigFilter(&hfdcan1, &sFilterConfig) != HAL_OK)
 80008bc:	491c      	ldr	r1, [pc, #112]	; (8000930 <MX_FDCAN1_Init+0x158>)
 80008be:	481a      	ldr	r0, [pc, #104]	; (8000928 <MX_FDCAN1_Init+0x150>)
 80008c0:	f002 fb68 	bl	8002f94 <HAL_FDCAN_ConfigFilter>
 80008c4:	4603      	mov	r3, r0
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d001      	beq.n	80008ce <MX_FDCAN1_Init+0xf6>
  {
    /* Filter configuration Error */
    Error_Handler();
 80008ca:	f000 f925 	bl	8000b18 <Error_Handler>
  }

  /* Start the FDCAN module */
  if (HAL_FDCAN_Start(&hfdcan1) != HAL_OK)
 80008ce:	4816      	ldr	r0, [pc, #88]	; (8000928 <MX_FDCAN1_Init+0x150>)
 80008d0:	f002 fbd6 	bl	8003080 <HAL_FDCAN_Start>
 80008d4:	4603      	mov	r3, r0
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d00b      	beq.n	80008f2 <MX_FDCAN1_Init+0x11a>
    /* Start Error */

  if (HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK)
 80008da:	2200      	movs	r2, #0
 80008dc:	2101      	movs	r1, #1
 80008de:	4812      	ldr	r0, [pc, #72]	; (8000928 <MX_FDCAN1_Init+0x150>)
 80008e0:	f002 fdc2 	bl	8003468 <HAL_FDCAN_ActivateNotification>
 80008e4:	4603      	mov	r3, r0
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d003      	beq.n	80008f2 <MX_FDCAN1_Init+0x11a>
    /* Notification Error */

  /* Prepare Tx Header */
  TxHeader.Identifier = 0x321;
 80008ea:	4b12      	ldr	r3, [pc, #72]	; (8000934 <MX_FDCAN1_Init+0x15c>)
 80008ec:	f240 3221 	movw	r2, #801	; 0x321
 80008f0:	601a      	str	r2, [r3, #0]
  TxHeader.IdType = FDCAN_STANDARD_ID;
 80008f2:	4b10      	ldr	r3, [pc, #64]	; (8000934 <MX_FDCAN1_Init+0x15c>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	605a      	str	r2, [r3, #4]
  TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 80008f8:	4b0e      	ldr	r3, [pc, #56]	; (8000934 <MX_FDCAN1_Init+0x15c>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	609a      	str	r2, [r3, #8]
  TxHeader.DataLength = FDCAN_DLC_BYTES_8;
 80008fe:	4b0d      	ldr	r3, [pc, #52]	; (8000934 <MX_FDCAN1_Init+0x15c>)
 8000900:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000904:	60da      	str	r2, [r3, #12]
  TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8000906:	4b0b      	ldr	r3, [pc, #44]	; (8000934 <MX_FDCAN1_Init+0x15c>)
 8000908:	2200      	movs	r2, #0
 800090a:	611a      	str	r2, [r3, #16]
  TxHeader.BitRateSwitch = FDCAN_BRS_OFF;
 800090c:	4b09      	ldr	r3, [pc, #36]	; (8000934 <MX_FDCAN1_Init+0x15c>)
 800090e:	2200      	movs	r2, #0
 8000910:	615a      	str	r2, [r3, #20]
  TxHeader.FDFormat = FDCAN_CLASSIC_CAN;
 8000912:	4b08      	ldr	r3, [pc, #32]	; (8000934 <MX_FDCAN1_Init+0x15c>)
 8000914:	2200      	movs	r2, #0
 8000916:	619a      	str	r2, [r3, #24]
  TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 8000918:	4b06      	ldr	r3, [pc, #24]	; (8000934 <MX_FDCAN1_Init+0x15c>)
 800091a:	2200      	movs	r2, #0
 800091c:	61da      	str	r2, [r3, #28]
  TxHeader.MessageMarker = 0;
 800091e:	4b05      	ldr	r3, [pc, #20]	; (8000934 <MX_FDCAN1_Init+0x15c>)
 8000920:	2200      	movs	r2, #0
 8000922:	621a      	str	r2, [r3, #32]
  /* USER CODE END FDCAN1_Init 2 */

}
 8000924:	bf00      	nop
 8000926:	bd80      	pop	{r7, pc}
 8000928:	24000090 	.word	0x24000090
 800092c:	4000a000 	.word	0x4000a000
 8000930:	240001d8 	.word	0x240001d8
 8000934:	240001ac 	.word	0x240001ac

08000938 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b08a      	sub	sp, #40	; 0x28
 800093c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800093e:	f107 031c 	add.w	r3, r7, #28
 8000942:	2200      	movs	r2, #0
 8000944:	601a      	str	r2, [r3, #0]
 8000946:	605a      	str	r2, [r3, #4]
 8000948:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800094a:	463b      	mov	r3, r7
 800094c:	2200      	movs	r2, #0
 800094e:	601a      	str	r2, [r3, #0]
 8000950:	605a      	str	r2, [r3, #4]
 8000952:	609a      	str	r2, [r3, #8]
 8000954:	60da      	str	r2, [r3, #12]
 8000956:	611a      	str	r2, [r3, #16]
 8000958:	615a      	str	r2, [r3, #20]
 800095a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800095c:	4b21      	ldr	r3, [pc, #132]	; (80009e4 <MX_TIM2_Init+0xac>)
 800095e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000962:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000964:	4b1f      	ldr	r3, [pc, #124]	; (80009e4 <MX_TIM2_Init+0xac>)
 8000966:	2200      	movs	r2, #0
 8000968:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800096a:	4b1e      	ldr	r3, [pc, #120]	; (80009e4 <MX_TIM2_Init+0xac>)
 800096c:	2200      	movs	r2, #0
 800096e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 255;
 8000970:	4b1c      	ldr	r3, [pc, #112]	; (80009e4 <MX_TIM2_Init+0xac>)
 8000972:	22ff      	movs	r2, #255	; 0xff
 8000974:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000976:	4b1b      	ldr	r3, [pc, #108]	; (80009e4 <MX_TIM2_Init+0xac>)
 8000978:	2200      	movs	r2, #0
 800097a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800097c:	4b19      	ldr	r3, [pc, #100]	; (80009e4 <MX_TIM2_Init+0xac>)
 800097e:	2200      	movs	r2, #0
 8000980:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000982:	4818      	ldr	r0, [pc, #96]	; (80009e4 <MX_TIM2_Init+0xac>)
 8000984:	f006 fe3a 	bl	80075fc <HAL_TIM_PWM_Init>
 8000988:	4603      	mov	r3, r0
 800098a:	2b00      	cmp	r3, #0
 800098c:	d001      	beq.n	8000992 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 800098e:	f000 f8c3 	bl	8000b18 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000992:	2300      	movs	r3, #0
 8000994:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000996:	2300      	movs	r3, #0
 8000998:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800099a:	f107 031c 	add.w	r3, r7, #28
 800099e:	4619      	mov	r1, r3
 80009a0:	4810      	ldr	r0, [pc, #64]	; (80009e4 <MX_TIM2_Init+0xac>)
 80009a2:	f007 fafb 	bl	8007f9c <HAL_TIMEx_MasterConfigSynchronization>
 80009a6:	4603      	mov	r3, r0
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d001      	beq.n	80009b0 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 80009ac:	f000 f8b4 	bl	8000b18 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80009b0:	2360      	movs	r3, #96	; 0x60
 80009b2:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80009b4:	2300      	movs	r3, #0
 80009b6:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80009b8:	2300      	movs	r3, #0
 80009ba:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80009bc:	2300      	movs	r3, #0
 80009be:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80009c0:	463b      	mov	r3, r7
 80009c2:	2200      	movs	r2, #0
 80009c4:	4619      	mov	r1, r3
 80009c6:	4807      	ldr	r0, [pc, #28]	; (80009e4 <MX_TIM2_Init+0xac>)
 80009c8:	f006 fe70 	bl	80076ac <HAL_TIM_PWM_ConfigChannel>
 80009cc:	4603      	mov	r3, r0
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d001      	beq.n	80009d6 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 80009d2:	f000 f8a1 	bl	8000b18 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80009d6:	4803      	ldr	r0, [pc, #12]	; (80009e4 <MX_TIM2_Init+0xac>)
 80009d8:	f000 f9be 	bl	8000d58 <HAL_TIM_MspPostInit>

}
 80009dc:	bf00      	nop
 80009de:	3728      	adds	r7, #40	; 0x28
 80009e0:	46bd      	mov	sp, r7
 80009e2:	bd80      	pop	{r7, pc}
 80009e4:	24000130 	.word	0x24000130

080009e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b08c      	sub	sp, #48	; 0x30
 80009ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009ee:	f107 031c 	add.w	r3, r7, #28
 80009f2:	2200      	movs	r2, #0
 80009f4:	601a      	str	r2, [r3, #0]
 80009f6:	605a      	str	r2, [r3, #4]
 80009f8:	609a      	str	r2, [r3, #8]
 80009fa:	60da      	str	r2, [r3, #12]
 80009fc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009fe:	4b43      	ldr	r3, [pc, #268]	; (8000b0c <MX_GPIO_Init+0x124>)
 8000a00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a04:	4a41      	ldr	r2, [pc, #260]	; (8000b0c <MX_GPIO_Init+0x124>)
 8000a06:	f043 0304 	orr.w	r3, r3, #4
 8000a0a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a0e:	4b3f      	ldr	r3, [pc, #252]	; (8000b0c <MX_GPIO_Init+0x124>)
 8000a10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a14:	f003 0304 	and.w	r3, r3, #4
 8000a18:	61bb      	str	r3, [r7, #24]
 8000a1a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a1c:	4b3b      	ldr	r3, [pc, #236]	; (8000b0c <MX_GPIO_Init+0x124>)
 8000a1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a22:	4a3a      	ldr	r2, [pc, #232]	; (8000b0c <MX_GPIO_Init+0x124>)
 8000a24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a28:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a2c:	4b37      	ldr	r3, [pc, #220]	; (8000b0c <MX_GPIO_Init+0x124>)
 8000a2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a36:	617b      	str	r3, [r7, #20]
 8000a38:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a3a:	4b34      	ldr	r3, [pc, #208]	; (8000b0c <MX_GPIO_Init+0x124>)
 8000a3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a40:	4a32      	ldr	r2, [pc, #200]	; (8000b0c <MX_GPIO_Init+0x124>)
 8000a42:	f043 0301 	orr.w	r3, r3, #1
 8000a46:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a4a:	4b30      	ldr	r3, [pc, #192]	; (8000b0c <MX_GPIO_Init+0x124>)
 8000a4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a50:	f003 0301 	and.w	r3, r3, #1
 8000a54:	613b      	str	r3, [r7, #16]
 8000a56:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a58:	4b2c      	ldr	r3, [pc, #176]	; (8000b0c <MX_GPIO_Init+0x124>)
 8000a5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a5e:	4a2b      	ldr	r2, [pc, #172]	; (8000b0c <MX_GPIO_Init+0x124>)
 8000a60:	f043 0302 	orr.w	r3, r3, #2
 8000a64:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a68:	4b28      	ldr	r3, [pc, #160]	; (8000b0c <MX_GPIO_Init+0x124>)
 8000a6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a6e:	f003 0302 	and.w	r3, r3, #2
 8000a72:	60fb      	str	r3, [r7, #12]
 8000a74:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a76:	4b25      	ldr	r3, [pc, #148]	; (8000b0c <MX_GPIO_Init+0x124>)
 8000a78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a7c:	4a23      	ldr	r2, [pc, #140]	; (8000b0c <MX_GPIO_Init+0x124>)
 8000a7e:	f043 0308 	orr.w	r3, r3, #8
 8000a82:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a86:	4b21      	ldr	r3, [pc, #132]	; (8000b0c <MX_GPIO_Init+0x124>)
 8000a88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a8c:	f003 0308 	and.w	r3, r3, #8
 8000a90:	60bb      	str	r3, [r7, #8]
 8000a92:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000a94:	4b1d      	ldr	r3, [pc, #116]	; (8000b0c <MX_GPIO_Init+0x124>)
 8000a96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a9a:	4a1c      	ldr	r2, [pc, #112]	; (8000b0c <MX_GPIO_Init+0x124>)
 8000a9c:	f043 0310 	orr.w	r3, r3, #16
 8000aa0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000aa4:	4b19      	ldr	r3, [pc, #100]	; (8000b0c <MX_GPIO_Init+0x124>)
 8000aa6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000aaa:	f003 0310 	and.w	r3, r3, #16
 8000aae:	607b      	str	r3, [r7, #4]
 8000ab0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|IN1_Pin|IN2_Pin, GPIO_PIN_RESET);
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	f44f 4186 	mov.w	r1, #17152	; 0x4300
 8000ab8:	4815      	ldr	r0, [pc, #84]	; (8000b10 <MX_GPIO_Init+0x128>)
 8000aba:	f003 fc17 	bl	80042ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000abe:	2200      	movs	r2, #0
 8000ac0:	2102      	movs	r1, #2
 8000ac2:	4814      	ldr	r0, [pc, #80]	; (8000b14 <MX_GPIO_Init+0x12c>)
 8000ac4:	f003 fc12 	bl	80042ec <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LD3_Pin IN1_Pin IN2_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|IN1_Pin|IN2_Pin;
 8000ac8:	f44f 4386 	mov.w	r3, #17152	; 0x4300
 8000acc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ace:	2301      	movs	r3, #1
 8000ad0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ada:	f107 031c 	add.w	r3, r7, #28
 8000ade:	4619      	mov	r1, r3
 8000ae0:	480b      	ldr	r0, [pc, #44]	; (8000b10 <MX_GPIO_Init+0x128>)
 8000ae2:	f003 fa53 	bl	8003f8c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000ae6:	2302      	movs	r3, #2
 8000ae8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aea:	2301      	movs	r3, #1
 8000aec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aee:	2300      	movs	r3, #0
 8000af0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000af2:	2300      	movs	r3, #0
 8000af4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000af6:	f107 031c 	add.w	r3, r7, #28
 8000afa:	4619      	mov	r1, r3
 8000afc:	4805      	ldr	r0, [pc, #20]	; (8000b14 <MX_GPIO_Init+0x12c>)
 8000afe:	f003 fa45 	bl	8003f8c <HAL_GPIO_Init>

}
 8000b02:	bf00      	nop
 8000b04:	3730      	adds	r7, #48	; 0x30
 8000b06:	46bd      	mov	sp, r7
 8000b08:	bd80      	pop	{r7, pc}
 8000b0a:	bf00      	nop
 8000b0c:	58024400 	.word	0x58024400
 8000b10:	58020400 	.word	0x58020400
 8000b14:	58021000 	.word	0x58021000

08000b18 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* USER CODE END Error_Handler_Debug */
}
 8000b1c:	bf00      	nop
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b24:	4770      	bx	lr
	...

08000b28 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	b083      	sub	sp, #12
 8000b2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b2e:	4b0a      	ldr	r3, [pc, #40]	; (8000b58 <HAL_MspInit+0x30>)
 8000b30:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000b34:	4a08      	ldr	r2, [pc, #32]	; (8000b58 <HAL_MspInit+0x30>)
 8000b36:	f043 0302 	orr.w	r3, r3, #2
 8000b3a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000b3e:	4b06      	ldr	r3, [pc, #24]	; (8000b58 <HAL_MspInit+0x30>)
 8000b40:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000b44:	f003 0302 	and.w	r3, r3, #2
 8000b48:	607b      	str	r3, [r7, #4]
 8000b4a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b4c:	bf00      	nop
 8000b4e:	370c      	adds	r7, #12
 8000b50:	46bd      	mov	sp, r7
 8000b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b56:	4770      	bx	lr
 8000b58:	58024400 	.word	0x58024400

08000b5c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b0b8      	sub	sp, #224	; 0xe0
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b64:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000b68:	2200      	movs	r2, #0
 8000b6a:	601a      	str	r2, [r3, #0]
 8000b6c:	605a      	str	r2, [r3, #4]
 8000b6e:	609a      	str	r2, [r3, #8]
 8000b70:	60da      	str	r2, [r3, #12]
 8000b72:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b74:	f107 0310 	add.w	r3, r7, #16
 8000b78:	22bc      	movs	r2, #188	; 0xbc
 8000b7a:	2100      	movs	r1, #0
 8000b7c:	4618      	mov	r0, r3
 8000b7e:	f007 fac7 	bl	8008110 <memset>
  if(hadc->Instance==ADC1)
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	4a2a      	ldr	r2, [pc, #168]	; (8000c30 <HAL_ADC_MspInit+0xd4>)
 8000b88:	4293      	cmp	r3, r2
 8000b8a:	d14d      	bne.n	8000c28 <HAL_ADC_MspInit+0xcc>
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000b8c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8000b90:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 1;
 8000b92:	2301      	movs	r3, #1
 8000b94:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLL2.PLL2N = 18;
 8000b96:	2312      	movs	r3, #18
 8000b98:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2P = 4;
 8000b9a:	2304      	movs	r3, #4
 8000b9c:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000b9e:	2302      	movs	r3, #2
 8000ba0:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000ba2:	2302      	movs	r3, #2
 8000ba4:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8000ba6:	23c0      	movs	r3, #192	; 0xc0
 8000ba8:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8000baa:	2320      	movs	r3, #32
 8000bac:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLL2.PLL2FRACN = 6144;
 8000bae:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000bb2:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000bba:	f107 0310 	add.w	r3, r7, #16
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	f004 fb90 	bl	80052e4 <HAL_RCCEx_PeriphCLKConfig>
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d001      	beq.n	8000bce <HAL_ADC_MspInit+0x72>
    {
      Error_Handler();
 8000bca:	f7ff ffa5 	bl	8000b18 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000bce:	4b19      	ldr	r3, [pc, #100]	; (8000c34 <HAL_ADC_MspInit+0xd8>)
 8000bd0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000bd4:	4a17      	ldr	r2, [pc, #92]	; (8000c34 <HAL_ADC_MspInit+0xd8>)
 8000bd6:	f043 0320 	orr.w	r3, r3, #32
 8000bda:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000bde:	4b15      	ldr	r3, [pc, #84]	; (8000c34 <HAL_ADC_MspInit+0xd8>)
 8000be0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000be4:	f003 0320 	and.w	r3, r3, #32
 8000be8:	60fb      	str	r3, [r7, #12]
 8000bea:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bec:	4b11      	ldr	r3, [pc, #68]	; (8000c34 <HAL_ADC_MspInit+0xd8>)
 8000bee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bf2:	4a10      	ldr	r2, [pc, #64]	; (8000c34 <HAL_ADC_MspInit+0xd8>)
 8000bf4:	f043 0301 	orr.w	r3, r3, #1
 8000bf8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000bfc:	4b0d      	ldr	r3, [pc, #52]	; (8000c34 <HAL_ADC_MspInit+0xd8>)
 8000bfe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c02:	f003 0301 	and.w	r3, r3, #1
 8000c06:	60bb      	str	r3, [r7, #8]
 8000c08:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_INP15
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000c0a:	2308      	movs	r3, #8
 8000c0c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c10:	2303      	movs	r3, #3
 8000c12:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c16:	2300      	movs	r3, #0
 8000c18:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c1c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000c20:	4619      	mov	r1, r3
 8000c22:	4805      	ldr	r0, [pc, #20]	; (8000c38 <HAL_ADC_MspInit+0xdc>)
 8000c24:	f003 f9b2 	bl	8003f8c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000c28:	bf00      	nop
 8000c2a:	37e0      	adds	r7, #224	; 0xe0
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	bd80      	pop	{r7, pc}
 8000c30:	40022000 	.word	0x40022000
 8000c34:	58024400 	.word	0x58024400
 8000c38:	58020000 	.word	0x58020000

08000c3c <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b0b8      	sub	sp, #224	; 0xe0
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c44:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000c48:	2200      	movs	r2, #0
 8000c4a:	601a      	str	r2, [r3, #0]
 8000c4c:	605a      	str	r2, [r3, #4]
 8000c4e:	609a      	str	r2, [r3, #8]
 8000c50:	60da      	str	r2, [r3, #12]
 8000c52:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c54:	f107 0310 	add.w	r3, r7, #16
 8000c58:	22bc      	movs	r2, #188	; 0xbc
 8000c5a:	2100      	movs	r1, #0
 8000c5c:	4618      	mov	r0, r3
 8000c5e:	f007 fa57 	bl	8008110 <memset>
  if(hfdcan->Instance==FDCAN1)
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	4a29      	ldr	r2, [pc, #164]	; (8000d0c <HAL_FDCAN_MspInit+0xd0>)
 8000c68:	4293      	cmp	r3, r2
 8000c6a:	d14a      	bne.n	8000d02 <HAL_FDCAN_MspInit+0xc6>
  /* USER CODE BEGIN FDCAN1_MspInit 0 */

  /* USER CODE END FDCAN1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8000c6c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000c70:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8000c72:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000c76:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c78:	f107 0310 	add.w	r3, r7, #16
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	f004 fb31 	bl	80052e4 <HAL_RCCEx_PeriphCLKConfig>
 8000c82:	4603      	mov	r3, r0
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d001      	beq.n	8000c8c <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 8000c88:	f7ff ff46 	bl	8000b18 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8000c8c:	4b20      	ldr	r3, [pc, #128]	; (8000d10 <HAL_FDCAN_MspInit+0xd4>)
 8000c8e:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8000c92:	4a1f      	ldr	r2, [pc, #124]	; (8000d10 <HAL_FDCAN_MspInit+0xd4>)
 8000c94:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c98:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8000c9c:	4b1c      	ldr	r3, [pc, #112]	; (8000d10 <HAL_FDCAN_MspInit+0xd4>)
 8000c9e:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8000ca2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000ca6:	60fb      	str	r3, [r7, #12]
 8000ca8:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000caa:	4b19      	ldr	r3, [pc, #100]	; (8000d10 <HAL_FDCAN_MspInit+0xd4>)
 8000cac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cb0:	4a17      	ldr	r2, [pc, #92]	; (8000d10 <HAL_FDCAN_MspInit+0xd4>)
 8000cb2:	f043 0308 	orr.w	r3, r3, #8
 8000cb6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000cba:	4b15      	ldr	r3, [pc, #84]	; (8000d10 <HAL_FDCAN_MspInit+0xd4>)
 8000cbc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cc0:	f003 0308 	and.w	r3, r3, #8
 8000cc4:	60bb      	str	r3, [r7, #8]
 8000cc6:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PD0     ------> FDCAN1_RX
    PD1     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000cc8:	2303      	movs	r3, #3
 8000cca:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cce:	2302      	movs	r3, #2
 8000cd0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8000ce0:	2309      	movs	r3, #9
 8000ce2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ce6:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000cea:	4619      	mov	r1, r3
 8000cec:	4809      	ldr	r0, [pc, #36]	; (8000d14 <HAL_FDCAN_MspInit+0xd8>)
 8000cee:	f003 f94d 	bl	8003f8c <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	2100      	movs	r1, #0
 8000cf6:	2013      	movs	r0, #19
 8000cf8:	f001 ff39 	bl	8002b6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8000cfc:	2013      	movs	r0, #19
 8000cfe:	f001 ff50 	bl	8002ba2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }

}
 8000d02:	bf00      	nop
 8000d04:	37e0      	adds	r7, #224	; 0xe0
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bd80      	pop	{r7, pc}
 8000d0a:	bf00      	nop
 8000d0c:	4000a000 	.word	0x4000a000
 8000d10:	58024400 	.word	0x58024400
 8000d14:	58020c00 	.word	0x58020c00

08000d18 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	b085      	sub	sp, #20
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000d28:	d10e      	bne.n	8000d48 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000d2a:	4b0a      	ldr	r3, [pc, #40]	; (8000d54 <HAL_TIM_PWM_MspInit+0x3c>)
 8000d2c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000d30:	4a08      	ldr	r2, [pc, #32]	; (8000d54 <HAL_TIM_PWM_MspInit+0x3c>)
 8000d32:	f043 0301 	orr.w	r3, r3, #1
 8000d36:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000d3a:	4b06      	ldr	r3, [pc, #24]	; (8000d54 <HAL_TIM_PWM_MspInit+0x3c>)
 8000d3c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000d40:	f003 0301 	and.w	r3, r3, #1
 8000d44:	60fb      	str	r3, [r7, #12]
 8000d46:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000d48:	bf00      	nop
 8000d4a:	3714      	adds	r7, #20
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d52:	4770      	bx	lr
 8000d54:	58024400 	.word	0x58024400

08000d58 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b088      	sub	sp, #32
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d60:	f107 030c 	add.w	r3, r7, #12
 8000d64:	2200      	movs	r2, #0
 8000d66:	601a      	str	r2, [r3, #0]
 8000d68:	605a      	str	r2, [r3, #4]
 8000d6a:	609a      	str	r2, [r3, #8]
 8000d6c:	60da      	str	r2, [r3, #12]
 8000d6e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000d78:	d11e      	bne.n	8000db8 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d7a:	4b11      	ldr	r3, [pc, #68]	; (8000dc0 <HAL_TIM_MspPostInit+0x68>)
 8000d7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d80:	4a0f      	ldr	r2, [pc, #60]	; (8000dc0 <HAL_TIM_MspPostInit+0x68>)
 8000d82:	f043 0301 	orr.w	r3, r3, #1
 8000d86:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d8a:	4b0d      	ldr	r3, [pc, #52]	; (8000dc0 <HAL_TIM_MspPostInit+0x68>)
 8000d8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d90:	f003 0301 	and.w	r3, r3, #1
 8000d94:	60bb      	str	r3, [r7, #8]
 8000d96:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000d98:	2301      	movs	r3, #1
 8000d9a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d9c:	2302      	movs	r3, #2
 8000d9e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da0:	2300      	movs	r3, #0
 8000da2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000da4:	2300      	movs	r3, #0
 8000da6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000da8:	2301      	movs	r3, #1
 8000daa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dac:	f107 030c 	add.w	r3, r7, #12
 8000db0:	4619      	mov	r1, r3
 8000db2:	4804      	ldr	r0, [pc, #16]	; (8000dc4 <HAL_TIM_MspPostInit+0x6c>)
 8000db4:	f003 f8ea 	bl	8003f8c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000db8:	bf00      	nop
 8000dba:	3720      	adds	r7, #32
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	bd80      	pop	{r7, pc}
 8000dc0:	58024400 	.word	0x58024400
 8000dc4:	58020000 	.word	0x58020000

08000dc8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000dcc:	e7fe      	b.n	8000dcc <NMI_Handler+0x4>

08000dce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dce:	b480      	push	{r7}
 8000dd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dd2:	e7fe      	b.n	8000dd2 <HardFault_Handler+0x4>

08000dd4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000dd8:	e7fe      	b.n	8000dd8 <MemManage_Handler+0x4>

08000dda <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000dda:	b480      	push	{r7}
 8000ddc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000dde:	e7fe      	b.n	8000dde <BusFault_Handler+0x4>

08000de0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000de0:	b480      	push	{r7}
 8000de2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000de4:	e7fe      	b.n	8000de4 <UsageFault_Handler+0x4>

08000de6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000de6:	b480      	push	{r7}
 8000de8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000dea:	bf00      	nop
 8000dec:	46bd      	mov	sp, r7
 8000dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df2:	4770      	bx	lr

08000df4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000df4:	b480      	push	{r7}
 8000df6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000df8:	bf00      	nop
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e00:	4770      	bx	lr

08000e02 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e02:	b480      	push	{r7}
 8000e04:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e06:	bf00      	nop
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0e:	4770      	bx	lr

08000e10 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e14:	f000 f8a8 	bl	8000f68 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e18:	bf00      	nop
 8000e1a:	bd80      	pop	{r7, pc}

08000e1c <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8000e20:	4802      	ldr	r0, [pc, #8]	; (8000e2c <FDCAN1_IT0_IRQHandler+0x10>)
 8000e22:	f002 fb9b 	bl	800355c <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 8000e26:	bf00      	nop
 8000e28:	bd80      	pop	{r7, pc}
 8000e2a:	bf00      	nop
 8000e2c:	24000090 	.word	0x24000090

08000e30 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000e30:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e68 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000e34:	f7ff fa50 	bl	80002d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e38:	480c      	ldr	r0, [pc, #48]	; (8000e6c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000e3a:	490d      	ldr	r1, [pc, #52]	; (8000e70 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000e3c:	4a0d      	ldr	r2, [pc, #52]	; (8000e74 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000e3e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e40:	e002      	b.n	8000e48 <LoopCopyDataInit>

08000e42 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e42:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e44:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e46:	3304      	adds	r3, #4

08000e48 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e48:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e4a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e4c:	d3f9      	bcc.n	8000e42 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e4e:	4a0a      	ldr	r2, [pc, #40]	; (8000e78 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000e50:	4c0a      	ldr	r4, [pc, #40]	; (8000e7c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000e52:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e54:	e001      	b.n	8000e5a <LoopFillZerobss>

08000e56 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e56:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e58:	3204      	adds	r2, #4

08000e5a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e5a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e5c:	d3fb      	bcc.n	8000e56 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e5e:	f007 f925 	bl	80080ac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e62:	f7ff fad3 	bl	800040c <main>
  bx  lr
 8000e66:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000e68:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000e6c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000e70:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8000e74:	080081ac 	.word	0x080081ac
  ldr r2, =_sbss
 8000e78:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 8000e7c:	240001fc 	.word	0x240001fc

08000e80 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e80:	e7fe      	b.n	8000e80 <ADC3_IRQHandler>
	...

08000e84 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b082      	sub	sp, #8
 8000e88:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e8a:	2003      	movs	r0, #3
 8000e8c:	f001 fe64 	bl	8002b58 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000e90:	f004 f87e 	bl	8004f90 <HAL_RCC_GetSysClockFreq>
 8000e94:	4602      	mov	r2, r0
 8000e96:	4b15      	ldr	r3, [pc, #84]	; (8000eec <HAL_Init+0x68>)
 8000e98:	699b      	ldr	r3, [r3, #24]
 8000e9a:	0a1b      	lsrs	r3, r3, #8
 8000e9c:	f003 030f 	and.w	r3, r3, #15
 8000ea0:	4913      	ldr	r1, [pc, #76]	; (8000ef0 <HAL_Init+0x6c>)
 8000ea2:	5ccb      	ldrb	r3, [r1, r3]
 8000ea4:	f003 031f 	and.w	r3, r3, #31
 8000ea8:	fa22 f303 	lsr.w	r3, r2, r3
 8000eac:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000eae:	4b0f      	ldr	r3, [pc, #60]	; (8000eec <HAL_Init+0x68>)
 8000eb0:	699b      	ldr	r3, [r3, #24]
 8000eb2:	f003 030f 	and.w	r3, r3, #15
 8000eb6:	4a0e      	ldr	r2, [pc, #56]	; (8000ef0 <HAL_Init+0x6c>)
 8000eb8:	5cd3      	ldrb	r3, [r2, r3]
 8000eba:	f003 031f 	and.w	r3, r3, #31
 8000ebe:	687a      	ldr	r2, [r7, #4]
 8000ec0:	fa22 f303 	lsr.w	r3, r2, r3
 8000ec4:	4a0b      	ldr	r2, [pc, #44]	; (8000ef4 <HAL_Init+0x70>)
 8000ec6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000ec8:	4a0b      	ldr	r2, [pc, #44]	; (8000ef8 <HAL_Init+0x74>)
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000ece:	200f      	movs	r0, #15
 8000ed0:	f000 f814 	bl	8000efc <HAL_InitTick>
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d001      	beq.n	8000ede <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000eda:	2301      	movs	r3, #1
 8000edc:	e002      	b.n	8000ee4 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000ede:	f7ff fe23 	bl	8000b28 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ee2:	2300      	movs	r3, #0
}
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	3708      	adds	r7, #8
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	bd80      	pop	{r7, pc}
 8000eec:	58024400 	.word	0x58024400
 8000ef0:	08008184 	.word	0x08008184
 8000ef4:	24000004 	.word	0x24000004
 8000ef8:	24000000 	.word	0x24000000

08000efc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b082      	sub	sp, #8
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000f04:	4b15      	ldr	r3, [pc, #84]	; (8000f5c <HAL_InitTick+0x60>)
 8000f06:	781b      	ldrb	r3, [r3, #0]
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d101      	bne.n	8000f10 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000f0c:	2301      	movs	r3, #1
 8000f0e:	e021      	b.n	8000f54 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000f10:	4b13      	ldr	r3, [pc, #76]	; (8000f60 <HAL_InitTick+0x64>)
 8000f12:	681a      	ldr	r2, [r3, #0]
 8000f14:	4b11      	ldr	r3, [pc, #68]	; (8000f5c <HAL_InitTick+0x60>)
 8000f16:	781b      	ldrb	r3, [r3, #0]
 8000f18:	4619      	mov	r1, r3
 8000f1a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f1e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f22:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f26:	4618      	mov	r0, r3
 8000f28:	f001 fe49 	bl	8002bbe <HAL_SYSTICK_Config>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d001      	beq.n	8000f36 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000f32:	2301      	movs	r3, #1
 8000f34:	e00e      	b.n	8000f54 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	2b0f      	cmp	r3, #15
 8000f3a:	d80a      	bhi.n	8000f52 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	6879      	ldr	r1, [r7, #4]
 8000f40:	f04f 30ff 	mov.w	r0, #4294967295
 8000f44:	f001 fe13 	bl	8002b6e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f48:	4a06      	ldr	r2, [pc, #24]	; (8000f64 <HAL_InitTick+0x68>)
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	e000      	b.n	8000f54 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000f52:	2301      	movs	r3, #1
}
 8000f54:	4618      	mov	r0, r3
 8000f56:	3708      	adds	r7, #8
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	bd80      	pop	{r7, pc}
 8000f5c:	2400000c 	.word	0x2400000c
 8000f60:	24000000 	.word	0x24000000
 8000f64:	24000008 	.word	0x24000008

08000f68 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000f6c:	4b06      	ldr	r3, [pc, #24]	; (8000f88 <HAL_IncTick+0x20>)
 8000f6e:	781b      	ldrb	r3, [r3, #0]
 8000f70:	461a      	mov	r2, r3
 8000f72:	4b06      	ldr	r3, [pc, #24]	; (8000f8c <HAL_IncTick+0x24>)
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	4413      	add	r3, r2
 8000f78:	4a04      	ldr	r2, [pc, #16]	; (8000f8c <HAL_IncTick+0x24>)
 8000f7a:	6013      	str	r3, [r2, #0]
}
 8000f7c:	bf00      	nop
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop
 8000f88:	2400000c 	.word	0x2400000c
 8000f8c:	240001f8 	.word	0x240001f8

08000f90 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f90:	b480      	push	{r7}
 8000f92:	af00      	add	r7, sp, #0
  return uwTick;
 8000f94:	4b03      	ldr	r3, [pc, #12]	; (8000fa4 <HAL_GetTick+0x14>)
 8000f96:	681b      	ldr	r3, [r3, #0]
}
 8000f98:	4618      	mov	r0, r3
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa0:	4770      	bx	lr
 8000fa2:	bf00      	nop
 8000fa4:	240001f8 	.word	0x240001f8

08000fa8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b084      	sub	sp, #16
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000fb0:	f7ff ffee 	bl	8000f90 <HAL_GetTick>
 8000fb4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000fba:	68fb      	ldr	r3, [r7, #12]
 8000fbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fc0:	d005      	beq.n	8000fce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000fc2:	4b0a      	ldr	r3, [pc, #40]	; (8000fec <HAL_Delay+0x44>)
 8000fc4:	781b      	ldrb	r3, [r3, #0]
 8000fc6:	461a      	mov	r2, r3
 8000fc8:	68fb      	ldr	r3, [r7, #12]
 8000fca:	4413      	add	r3, r2
 8000fcc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000fce:	bf00      	nop
 8000fd0:	f7ff ffde 	bl	8000f90 <HAL_GetTick>
 8000fd4:	4602      	mov	r2, r0
 8000fd6:	68bb      	ldr	r3, [r7, #8]
 8000fd8:	1ad3      	subs	r3, r2, r3
 8000fda:	68fa      	ldr	r2, [r7, #12]
 8000fdc:	429a      	cmp	r2, r3
 8000fde:	d8f7      	bhi.n	8000fd0 <HAL_Delay+0x28>
  {
  }
}
 8000fe0:	bf00      	nop
 8000fe2:	bf00      	nop
 8000fe4:	3710      	adds	r7, #16
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd80      	pop	{r7, pc}
 8000fea:	bf00      	nop
 8000fec:	2400000c 	.word	0x2400000c

08000ff0 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8000ff4:	4b03      	ldr	r3, [pc, #12]	; (8001004 <HAL_GetREVID+0x14>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	0c1b      	lsrs	r3, r3, #16
}
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001002:	4770      	bx	lr
 8001004:	5c001000 	.word	0x5c001000

08001008 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001008:	b480      	push	{r7}
 800100a:	b083      	sub	sp, #12
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
 8001010:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	689b      	ldr	r3, [r3, #8]
 8001016:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800101a:	683b      	ldr	r3, [r7, #0]
 800101c:	431a      	orrs	r2, r3
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	609a      	str	r2, [r3, #8]
}
 8001022:	bf00      	nop
 8001024:	370c      	adds	r7, #12
 8001026:	46bd      	mov	sp, r7
 8001028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102c:	4770      	bx	lr

0800102e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800102e:	b480      	push	{r7}
 8001030:	b083      	sub	sp, #12
 8001032:	af00      	add	r7, sp, #0
 8001034:	6078      	str	r0, [r7, #4]
 8001036:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	689b      	ldr	r3, [r3, #8]
 800103c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001040:	683b      	ldr	r3, [r7, #0]
 8001042:	431a      	orrs	r2, r3
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	609a      	str	r2, [r3, #8]
}
 8001048:	bf00      	nop
 800104a:	370c      	adds	r7, #12
 800104c:	46bd      	mov	sp, r7
 800104e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001052:	4770      	bx	lr

08001054 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001054:	b480      	push	{r7}
 8001056:	b083      	sub	sp, #12
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	689b      	ldr	r3, [r3, #8]
 8001060:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001064:	4618      	mov	r0, r3
 8001066:	370c      	adds	r7, #12
 8001068:	46bd      	mov	sp, r7
 800106a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106e:	4770      	bx	lr

08001070 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001070:	b480      	push	{r7}
 8001072:	b087      	sub	sp, #28
 8001074:	af00      	add	r7, sp, #0
 8001076:	60f8      	str	r0, [r7, #12]
 8001078:	60b9      	str	r1, [r7, #8]
 800107a:	607a      	str	r2, [r7, #4]
 800107c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	3360      	adds	r3, #96	; 0x60
 8001082:	461a      	mov	r2, r3
 8001084:	68bb      	ldr	r3, [r7, #8]
 8001086:	009b      	lsls	r3, r3, #2
 8001088:	4413      	add	r3, r2
 800108a:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 800108c:	697b      	ldr	r3, [r7, #20]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 800109a:	683b      	ldr	r3, [r7, #0]
 800109c:	430b      	orrs	r3, r1
 800109e:	431a      	orrs	r2, r3
 80010a0:	697b      	ldr	r3, [r7, #20]
 80010a2:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 80010a4:	bf00      	nop
 80010a6:	371c      	adds	r7, #28
 80010a8:	46bd      	mov	sp, r7
 80010aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ae:	4770      	bx	lr

080010b0 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 80010b0:	b480      	push	{r7}
 80010b2:	b085      	sub	sp, #20
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	60f8      	str	r0, [r7, #12]
 80010b8:	60b9      	str	r1, [r7, #8]
 80010ba:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	691b      	ldr	r3, [r3, #16]
 80010c0:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 80010c4:	68bb      	ldr	r3, [r7, #8]
 80010c6:	f003 031f 	and.w	r3, r3, #31
 80010ca:	6879      	ldr	r1, [r7, #4]
 80010cc:	fa01 f303 	lsl.w	r3, r1, r3
 80010d0:	431a      	orrs	r2, r3
 80010d2:	68fb      	ldr	r3, [r7, #12]
 80010d4:	611a      	str	r2, [r3, #16]
}
 80010d6:	bf00      	nop
 80010d8:	3714      	adds	r7, #20
 80010da:	46bd      	mov	sp, r7
 80010dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e0:	4770      	bx	lr

080010e2 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 80010e2:	b480      	push	{r7}
 80010e4:	b087      	sub	sp, #28
 80010e6:	af00      	add	r7, sp, #0
 80010e8:	60f8      	str	r0, [r7, #12]
 80010ea:	60b9      	str	r1, [r7, #8]
 80010ec:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80010ee:	68fb      	ldr	r3, [r7, #12]
 80010f0:	3360      	adds	r3, #96	; 0x60
 80010f2:	461a      	mov	r2, r3
 80010f4:	68bb      	ldr	r3, [r7, #8]
 80010f6:	009b      	lsls	r3, r3, #2
 80010f8:	4413      	add	r3, r2
 80010fa:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 80010fc:	697b      	ldr	r3, [r7, #20]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	431a      	orrs	r2, r3
 8001108:	697b      	ldr	r3, [r7, #20]
 800110a:	601a      	str	r2, [r3, #0]
  }
}
 800110c:	bf00      	nop
 800110e:	371c      	adds	r7, #28
 8001110:	46bd      	mov	sp, r7
 8001112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001116:	4770      	bx	lr

08001118 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001118:	b480      	push	{r7}
 800111a:	b083      	sub	sp, #12
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	68db      	ldr	r3, [r3, #12]
 8001124:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001128:	2b00      	cmp	r3, #0
 800112a:	d101      	bne.n	8001130 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800112c:	2301      	movs	r3, #1
 800112e:	e000      	b.n	8001132 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001130:	2300      	movs	r3, #0
}
 8001132:	4618      	mov	r0, r3
 8001134:	370c      	adds	r7, #12
 8001136:	46bd      	mov	sp, r7
 8001138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113c:	4770      	bx	lr

0800113e <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800113e:	b480      	push	{r7}
 8001140:	b087      	sub	sp, #28
 8001142:	af00      	add	r7, sp, #0
 8001144:	60f8      	str	r0, [r7, #12]
 8001146:	60b9      	str	r1, [r7, #8]
 8001148:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	3330      	adds	r3, #48	; 0x30
 800114e:	461a      	mov	r2, r3
 8001150:	68bb      	ldr	r3, [r7, #8]
 8001152:	0a1b      	lsrs	r3, r3, #8
 8001154:	009b      	lsls	r3, r3, #2
 8001156:	f003 030c 	and.w	r3, r3, #12
 800115a:	4413      	add	r3, r2
 800115c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800115e:	697b      	ldr	r3, [r7, #20]
 8001160:	681a      	ldr	r2, [r3, #0]
 8001162:	68bb      	ldr	r3, [r7, #8]
 8001164:	f003 031f 	and.w	r3, r3, #31
 8001168:	211f      	movs	r1, #31
 800116a:	fa01 f303 	lsl.w	r3, r1, r3
 800116e:	43db      	mvns	r3, r3
 8001170:	401a      	ands	r2, r3
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	0e9b      	lsrs	r3, r3, #26
 8001176:	f003 011f 	and.w	r1, r3, #31
 800117a:	68bb      	ldr	r3, [r7, #8]
 800117c:	f003 031f 	and.w	r3, r3, #31
 8001180:	fa01 f303 	lsl.w	r3, r1, r3
 8001184:	431a      	orrs	r2, r3
 8001186:	697b      	ldr	r3, [r7, #20]
 8001188:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800118a:	bf00      	nop
 800118c:	371c      	adds	r7, #28
 800118e:	46bd      	mov	sp, r7
 8001190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001194:	4770      	bx	lr

08001196 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001196:	b480      	push	{r7}
 8001198:	b087      	sub	sp, #28
 800119a:	af00      	add	r7, sp, #0
 800119c:	60f8      	str	r0, [r7, #12]
 800119e:	60b9      	str	r1, [r7, #8]
 80011a0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80011a2:	68fb      	ldr	r3, [r7, #12]
 80011a4:	3314      	adds	r3, #20
 80011a6:	461a      	mov	r2, r3
 80011a8:	68bb      	ldr	r3, [r7, #8]
 80011aa:	0e5b      	lsrs	r3, r3, #25
 80011ac:	009b      	lsls	r3, r3, #2
 80011ae:	f003 0304 	and.w	r3, r3, #4
 80011b2:	4413      	add	r3, r2
 80011b4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80011b6:	697b      	ldr	r3, [r7, #20]
 80011b8:	681a      	ldr	r2, [r3, #0]
 80011ba:	68bb      	ldr	r3, [r7, #8]
 80011bc:	0d1b      	lsrs	r3, r3, #20
 80011be:	f003 031f 	and.w	r3, r3, #31
 80011c2:	2107      	movs	r1, #7
 80011c4:	fa01 f303 	lsl.w	r3, r1, r3
 80011c8:	43db      	mvns	r3, r3
 80011ca:	401a      	ands	r2, r3
 80011cc:	68bb      	ldr	r3, [r7, #8]
 80011ce:	0d1b      	lsrs	r3, r3, #20
 80011d0:	f003 031f 	and.w	r3, r3, #31
 80011d4:	6879      	ldr	r1, [r7, #4]
 80011d6:	fa01 f303 	lsl.w	r3, r1, r3
 80011da:	431a      	orrs	r2, r3
 80011dc:	697b      	ldr	r3, [r7, #20]
 80011de:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80011e0:	bf00      	nop
 80011e2:	371c      	adds	r7, #28
 80011e4:	46bd      	mov	sp, r7
 80011e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ea:	4770      	bx	lr

080011ec <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80011ec:	b480      	push	{r7}
 80011ee:	b085      	sub	sp, #20
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	60f8      	str	r0, [r7, #12]
 80011f4:	60b9      	str	r1, [r7, #8]
 80011f6:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 80011fe:	68bb      	ldr	r3, [r7, #8]
 8001200:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001204:	43db      	mvns	r3, r3
 8001206:	401a      	ands	r2, r3
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	f003 0318 	and.w	r3, r3, #24
 800120e:	4908      	ldr	r1, [pc, #32]	; (8001230 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001210:	40d9      	lsrs	r1, r3
 8001212:	68bb      	ldr	r3, [r7, #8]
 8001214:	400b      	ands	r3, r1
 8001216:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800121a:	431a      	orrs	r2, r3
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif
}
 8001222:	bf00      	nop
 8001224:	3714      	adds	r7, #20
 8001226:	46bd      	mov	sp, r7
 8001228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122c:	4770      	bx	lr
 800122e:	bf00      	nop
 8001230:	000fffff 	.word	0x000fffff

08001234 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001234:	b480      	push	{r7}
 8001236:	b083      	sub	sp, #12
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	689b      	ldr	r3, [r3, #8]
 8001240:	f003 031f 	and.w	r3, r3, #31
}
 8001244:	4618      	mov	r0, r3
 8001246:	370c      	adds	r7, #12
 8001248:	46bd      	mov	sp, r7
 800124a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124e:	4770      	bx	lr

08001250 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001250:	b480      	push	{r7}
 8001252:	b083      	sub	sp, #12
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	689b      	ldr	r3, [r3, #8]
 800125c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
}
 8001260:	4618      	mov	r0, r3
 8001262:	370c      	adds	r7, #12
 8001264:	46bd      	mov	sp, r7
 8001266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126a:	4770      	bx	lr

0800126c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800126c:	b480      	push	{r7}
 800126e:	b083      	sub	sp, #12
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	689a      	ldr	r2, [r3, #8]
 8001278:	4b04      	ldr	r3, [pc, #16]	; (800128c <LL_ADC_DisableDeepPowerDown+0x20>)
 800127a:	4013      	ands	r3, r2
 800127c:	687a      	ldr	r2, [r7, #4]
 800127e:	6093      	str	r3, [r2, #8]
}
 8001280:	bf00      	nop
 8001282:	370c      	adds	r7, #12
 8001284:	46bd      	mov	sp, r7
 8001286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128a:	4770      	bx	lr
 800128c:	5fffffc0 	.word	0x5fffffc0

08001290 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001290:	b480      	push	{r7}
 8001292:	b083      	sub	sp, #12
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	689b      	ldr	r3, [r3, #8]
 800129c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80012a0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80012a4:	d101      	bne.n	80012aa <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80012a6:	2301      	movs	r3, #1
 80012a8:	e000      	b.n	80012ac <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80012aa:	2300      	movs	r3, #0
}
 80012ac:	4618      	mov	r0, r3
 80012ae:	370c      	adds	r7, #12
 80012b0:	46bd      	mov	sp, r7
 80012b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b6:	4770      	bx	lr

080012b8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80012b8:	b480      	push	{r7}
 80012ba:	b083      	sub	sp, #12
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	689a      	ldr	r2, [r3, #8]
 80012c4:	4b05      	ldr	r3, [pc, #20]	; (80012dc <LL_ADC_EnableInternalRegulator+0x24>)
 80012c6:	4013      	ands	r3, r2
 80012c8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80012d0:	bf00      	nop
 80012d2:	370c      	adds	r7, #12
 80012d4:	46bd      	mov	sp, r7
 80012d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012da:	4770      	bx	lr
 80012dc:	6fffffc0 	.word	0x6fffffc0

080012e0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80012e0:	b480      	push	{r7}
 80012e2:	b083      	sub	sp, #12
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	689b      	ldr	r3, [r3, #8]
 80012ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012f0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80012f4:	d101      	bne.n	80012fa <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80012f6:	2301      	movs	r3, #1
 80012f8:	e000      	b.n	80012fc <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80012fa:	2300      	movs	r3, #0
}
 80012fc:	4618      	mov	r0, r3
 80012fe:	370c      	adds	r7, #12
 8001300:	46bd      	mov	sp, r7
 8001302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001306:	4770      	bx	lr

08001308 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001308:	b480      	push	{r7}
 800130a:	b083      	sub	sp, #12
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	689a      	ldr	r2, [r3, #8]
 8001314:	4b05      	ldr	r3, [pc, #20]	; (800132c <LL_ADC_Enable+0x24>)
 8001316:	4013      	ands	r3, r2
 8001318:	f043 0201 	orr.w	r2, r3, #1
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001320:	bf00      	nop
 8001322:	370c      	adds	r7, #12
 8001324:	46bd      	mov	sp, r7
 8001326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132a:	4770      	bx	lr
 800132c:	7fffffc0 	.word	0x7fffffc0

08001330 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8001330:	b480      	push	{r7}
 8001332:	b083      	sub	sp, #12
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	689a      	ldr	r2, [r3, #8]
 800133c:	4b05      	ldr	r3, [pc, #20]	; (8001354 <LL_ADC_Disable+0x24>)
 800133e:	4013      	ands	r3, r2
 8001340:	f043 0202 	orr.w	r2, r3, #2
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8001348:	bf00      	nop
 800134a:	370c      	adds	r7, #12
 800134c:	46bd      	mov	sp, r7
 800134e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001352:	4770      	bx	lr
 8001354:	7fffffc0 	.word	0x7fffffc0

08001358 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001358:	b480      	push	{r7}
 800135a:	b083      	sub	sp, #12
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	689b      	ldr	r3, [r3, #8]
 8001364:	f003 0301 	and.w	r3, r3, #1
 8001368:	2b01      	cmp	r3, #1
 800136a:	d101      	bne.n	8001370 <LL_ADC_IsEnabled+0x18>
 800136c:	2301      	movs	r3, #1
 800136e:	e000      	b.n	8001372 <LL_ADC_IsEnabled+0x1a>
 8001370:	2300      	movs	r3, #0
}
 8001372:	4618      	mov	r0, r3
 8001374:	370c      	adds	r7, #12
 8001376:	46bd      	mov	sp, r7
 8001378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137c:	4770      	bx	lr

0800137e <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 800137e:	b480      	push	{r7}
 8001380:	b083      	sub	sp, #12
 8001382:	af00      	add	r7, sp, #0
 8001384:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	689b      	ldr	r3, [r3, #8]
 800138a:	f003 0302 	and.w	r3, r3, #2
 800138e:	2b02      	cmp	r3, #2
 8001390:	d101      	bne.n	8001396 <LL_ADC_IsDisableOngoing+0x18>
 8001392:	2301      	movs	r3, #1
 8001394:	e000      	b.n	8001398 <LL_ADC_IsDisableOngoing+0x1a>
 8001396:	2300      	movs	r3, #0
}
 8001398:	4618      	mov	r0, r3
 800139a:	370c      	adds	r7, #12
 800139c:	46bd      	mov	sp, r7
 800139e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a2:	4770      	bx	lr

080013a4 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80013a4:	b480      	push	{r7}
 80013a6:	b083      	sub	sp, #12
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	689a      	ldr	r2, [r3, #8]
 80013b0:	4b05      	ldr	r3, [pc, #20]	; (80013c8 <LL_ADC_REG_StartConversion+0x24>)
 80013b2:	4013      	ands	r3, r2
 80013b4:	f043 0204 	orr.w	r2, r3, #4
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80013bc:	bf00      	nop
 80013be:	370c      	adds	r7, #12
 80013c0:	46bd      	mov	sp, r7
 80013c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c6:	4770      	bx	lr
 80013c8:	7fffffc0 	.word	0x7fffffc0

080013cc <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 80013cc:	b480      	push	{r7}
 80013ce:	b083      	sub	sp, #12
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	689a      	ldr	r2, [r3, #8]
 80013d8:	4b05      	ldr	r3, [pc, #20]	; (80013f0 <LL_ADC_REG_StopConversion+0x24>)
 80013da:	4013      	ands	r3, r2
 80013dc:	f043 0210 	orr.w	r2, r3, #16
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 80013e4:	bf00      	nop
 80013e6:	370c      	adds	r7, #12
 80013e8:	46bd      	mov	sp, r7
 80013ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ee:	4770      	bx	lr
 80013f0:	7fffffc0 	.word	0x7fffffc0

080013f4 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80013f4:	b480      	push	{r7}
 80013f6:	b083      	sub	sp, #12
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	689b      	ldr	r3, [r3, #8]
 8001400:	f003 0304 	and.w	r3, r3, #4
 8001404:	2b04      	cmp	r3, #4
 8001406:	d101      	bne.n	800140c <LL_ADC_REG_IsConversionOngoing+0x18>
 8001408:	2301      	movs	r3, #1
 800140a:	e000      	b.n	800140e <LL_ADC_REG_IsConversionOngoing+0x1a>
 800140c:	2300      	movs	r3, #0
}
 800140e:	4618      	mov	r0, r3
 8001410:	370c      	adds	r7, #12
 8001412:	46bd      	mov	sp, r7
 8001414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001418:	4770      	bx	lr
	...

0800141c <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 800141c:	b480      	push	{r7}
 800141e:	b083      	sub	sp, #12
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	689a      	ldr	r2, [r3, #8]
 8001428:	4b05      	ldr	r3, [pc, #20]	; (8001440 <LL_ADC_INJ_StopConversion+0x24>)
 800142a:	4013      	ands	r3, r2
 800142c:	f043 0220 	orr.w	r2, r3, #32
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8001434:	bf00      	nop
 8001436:	370c      	adds	r7, #12
 8001438:	46bd      	mov	sp, r7
 800143a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143e:	4770      	bx	lr
 8001440:	7fffffc0 	.word	0x7fffffc0

08001444 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001444:	b480      	push	{r7}
 8001446:	b083      	sub	sp, #12
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	689b      	ldr	r3, [r3, #8]
 8001450:	f003 0308 	and.w	r3, r3, #8
 8001454:	2b08      	cmp	r3, #8
 8001456:	d101      	bne.n	800145c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001458:	2301      	movs	r3, #1
 800145a:	e000      	b.n	800145e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800145c:	2300      	movs	r3, #0
}
 800145e:	4618      	mov	r0, r3
 8001460:	370c      	adds	r7, #12
 8001462:	46bd      	mov	sp, r7
 8001464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001468:	4770      	bx	lr
	...

0800146c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800146c:	b590      	push	{r4, r7, lr}
 800146e:	b089      	sub	sp, #36	; 0x24
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001474:	2300      	movs	r3, #0
 8001476:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001478:	2300      	movs	r3, #0
 800147a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	2b00      	cmp	r3, #0
 8001480:	d101      	bne.n	8001486 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001482:	2301      	movs	r3, #1
 8001484:	e18f      	b.n	80017a6 <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	68db      	ldr	r3, [r3, #12]
 800148a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001490:	2b00      	cmp	r3, #0
 8001492:	d109      	bne.n	80014a8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001494:	6878      	ldr	r0, [r7, #4]
 8001496:	f7ff fb61 	bl	8000b5c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	2200      	movs	r2, #0
 800149e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	2200      	movs	r2, #0
 80014a4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	4618      	mov	r0, r3
 80014ae:	f7ff feef 	bl	8001290 <LL_ADC_IsDeepPowerDownEnabled>
 80014b2:	4603      	mov	r3, r0
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d004      	beq.n	80014c2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	4618      	mov	r0, r3
 80014be:	f7ff fed5 	bl	800126c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	4618      	mov	r0, r3
 80014c8:	f7ff ff0a 	bl	80012e0 <LL_ADC_IsInternalRegulatorEnabled>
 80014cc:	4603      	mov	r3, r0
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d114      	bne.n	80014fc <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	4618      	mov	r0, r3
 80014d8:	f7ff feee 	bl	80012b8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80014dc:	4b87      	ldr	r3, [pc, #540]	; (80016fc <HAL_ADC_Init+0x290>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	099b      	lsrs	r3, r3, #6
 80014e2:	4a87      	ldr	r2, [pc, #540]	; (8001700 <HAL_ADC_Init+0x294>)
 80014e4:	fba2 2303 	umull	r2, r3, r2, r3
 80014e8:	099b      	lsrs	r3, r3, #6
 80014ea:	3301      	adds	r3, #1
 80014ec:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80014ee:	e002      	b.n	80014f6 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 80014f0:	68bb      	ldr	r3, [r7, #8]
 80014f2:	3b01      	subs	r3, #1
 80014f4:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80014f6:	68bb      	ldr	r3, [r7, #8]
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d1f9      	bne.n	80014f0 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	4618      	mov	r0, r3
 8001502:	f7ff feed 	bl	80012e0 <LL_ADC_IsInternalRegulatorEnabled>
 8001506:	4603      	mov	r3, r0
 8001508:	2b00      	cmp	r3, #0
 800150a:	d10d      	bne.n	8001528 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001510:	f043 0210 	orr.w	r2, r3, #16
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800151c:	f043 0201 	orr.w	r2, r3, #1
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001524:	2301      	movs	r3, #1
 8001526:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	4618      	mov	r0, r3
 800152e:	f7ff ff61 	bl	80013f4 <LL_ADC_REG_IsConversionOngoing>
 8001532:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001538:	f003 0310 	and.w	r3, r3, #16
 800153c:	2b00      	cmp	r3, #0
 800153e:	f040 8129 	bne.w	8001794 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001542:	697b      	ldr	r3, [r7, #20]
 8001544:	2b00      	cmp	r3, #0
 8001546:	f040 8125 	bne.w	8001794 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800154e:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001552:	f043 0202 	orr.w	r2, r3, #2
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	4618      	mov	r0, r3
 8001560:	f7ff fefa 	bl	8001358 <LL_ADC_IsEnabled>
 8001564:	4603      	mov	r3, r0
 8001566:	2b00      	cmp	r3, #0
 8001568:	d136      	bne.n	80015d8 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	4a65      	ldr	r2, [pc, #404]	; (8001704 <HAL_ADC_Init+0x298>)
 8001570:	4293      	cmp	r3, r2
 8001572:	d004      	beq.n	800157e <HAL_ADC_Init+0x112>
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	4a63      	ldr	r2, [pc, #396]	; (8001708 <HAL_ADC_Init+0x29c>)
 800157a:	4293      	cmp	r3, r2
 800157c:	d10e      	bne.n	800159c <HAL_ADC_Init+0x130>
 800157e:	4861      	ldr	r0, [pc, #388]	; (8001704 <HAL_ADC_Init+0x298>)
 8001580:	f7ff feea 	bl	8001358 <LL_ADC_IsEnabled>
 8001584:	4604      	mov	r4, r0
 8001586:	4860      	ldr	r0, [pc, #384]	; (8001708 <HAL_ADC_Init+0x29c>)
 8001588:	f7ff fee6 	bl	8001358 <LL_ADC_IsEnabled>
 800158c:	4603      	mov	r3, r0
 800158e:	4323      	orrs	r3, r4
 8001590:	2b00      	cmp	r3, #0
 8001592:	bf0c      	ite	eq
 8001594:	2301      	moveq	r3, #1
 8001596:	2300      	movne	r3, #0
 8001598:	b2db      	uxtb	r3, r3
 800159a:	e008      	b.n	80015ae <HAL_ADC_Init+0x142>
 800159c:	485b      	ldr	r0, [pc, #364]	; (800170c <HAL_ADC_Init+0x2a0>)
 800159e:	f7ff fedb 	bl	8001358 <LL_ADC_IsEnabled>
 80015a2:	4603      	mov	r3, r0
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	bf0c      	ite	eq
 80015a8:	2301      	moveq	r3, #1
 80015aa:	2300      	movne	r3, #0
 80015ac:	b2db      	uxtb	r3, r3
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d012      	beq.n	80015d8 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	4a53      	ldr	r2, [pc, #332]	; (8001704 <HAL_ADC_Init+0x298>)
 80015b8:	4293      	cmp	r3, r2
 80015ba:	d004      	beq.n	80015c6 <HAL_ADC_Init+0x15a>
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	4a51      	ldr	r2, [pc, #324]	; (8001708 <HAL_ADC_Init+0x29c>)
 80015c2:	4293      	cmp	r3, r2
 80015c4:	d101      	bne.n	80015ca <HAL_ADC_Init+0x15e>
 80015c6:	4a52      	ldr	r2, [pc, #328]	; (8001710 <HAL_ADC_Init+0x2a4>)
 80015c8:	e000      	b.n	80015cc <HAL_ADC_Init+0x160>
 80015ca:	4a52      	ldr	r2, [pc, #328]	; (8001714 <HAL_ADC_Init+0x2a8>)
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	685b      	ldr	r3, [r3, #4]
 80015d0:	4619      	mov	r1, r3
 80015d2:	4610      	mov	r0, r2
 80015d4:	f7ff fd18 	bl	8001008 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 80015d8:	f7ff fd0a 	bl	8000ff0 <HAL_GetREVID>
 80015dc:	4603      	mov	r3, r0
 80015de:	f241 0203 	movw	r2, #4099	; 0x1003
 80015e2:	4293      	cmp	r3, r2
 80015e4:	d914      	bls.n	8001610 <HAL_ADC_Init+0x1a4>
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	689b      	ldr	r3, [r3, #8]
 80015ea:	2b10      	cmp	r3, #16
 80015ec:	d110      	bne.n	8001610 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	7d5b      	ldrb	r3, [r3, #21]
 80015f2:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80015f8:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80015fe:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	7f1b      	ldrb	r3, [r3, #28]
 8001604:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8001606:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001608:	f043 030c 	orr.w	r3, r3, #12
 800160c:	61bb      	str	r3, [r7, #24]
 800160e:	e00d      	b.n	800162c <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	7d5b      	ldrb	r3, [r3, #21]
 8001614:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800161a:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8001620:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	7f1b      	ldrb	r3, [r3, #28]
 8001626:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001628:	4313      	orrs	r3, r2
 800162a:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	7f1b      	ldrb	r3, [r3, #28]
 8001630:	2b01      	cmp	r3, #1
 8001632:	d106      	bne.n	8001642 <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	6a1b      	ldr	r3, [r3, #32]
 8001638:	3b01      	subs	r3, #1
 800163a:	045b      	lsls	r3, r3, #17
 800163c:	69ba      	ldr	r2, [r7, #24]
 800163e:	4313      	orrs	r3, r2
 8001640:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001646:	2b00      	cmp	r3, #0
 8001648:	d009      	beq.n	800165e <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800164e:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001656:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001658:	69ba      	ldr	r2, [r7, #24]
 800165a:	4313      	orrs	r3, r2
 800165c:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	68da      	ldr	r2, [r3, #12]
 8001664:	4b2c      	ldr	r3, [pc, #176]	; (8001718 <HAL_ADC_Init+0x2ac>)
 8001666:	4013      	ands	r3, r2
 8001668:	687a      	ldr	r2, [r7, #4]
 800166a:	6812      	ldr	r2, [r2, #0]
 800166c:	69b9      	ldr	r1, [r7, #24]
 800166e:	430b      	orrs	r3, r1
 8001670:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	4618      	mov	r0, r3
 8001678:	f7ff febc 	bl	80013f4 <LL_ADC_REG_IsConversionOngoing>
 800167c:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	4618      	mov	r0, r3
 8001684:	f7ff fede 	bl	8001444 <LL_ADC_INJ_IsConversionOngoing>
 8001688:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800168a:	693b      	ldr	r3, [r7, #16]
 800168c:	2b00      	cmp	r3, #0
 800168e:	d15f      	bne.n	8001750 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	2b00      	cmp	r3, #0
 8001694:	d15c      	bne.n	8001750 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	7d1b      	ldrb	r3, [r3, #20]
 800169a:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 80016a0:	4313      	orrs	r3, r2
 80016a2:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	68da      	ldr	r2, [r3, #12]
 80016aa:	4b1c      	ldr	r3, [pc, #112]	; (800171c <HAL_ADC_Init+0x2b0>)
 80016ac:	4013      	ands	r3, r2
 80016ae:	687a      	ldr	r2, [r7, #4]
 80016b0:	6812      	ldr	r2, [r2, #0]
 80016b2:	69b9      	ldr	r1, [r7, #24]
 80016b4:	430b      	orrs	r3, r1
 80016b6:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80016be:	2b01      	cmp	r3, #1
 80016c0:	d130      	bne.n	8001724 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016c6:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	691a      	ldr	r2, [r3, #16]
 80016ce:	4b14      	ldr	r3, [pc, #80]	; (8001720 <HAL_ADC_Init+0x2b4>)
 80016d0:	4013      	ands	r3, r2
 80016d2:	687a      	ldr	r2, [r7, #4]
 80016d4:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80016d6:	3a01      	subs	r2, #1
 80016d8:	0411      	lsls	r1, r2, #16
 80016da:	687a      	ldr	r2, [r7, #4]
 80016dc:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80016de:	4311      	orrs	r1, r2
 80016e0:	687a      	ldr	r2, [r7, #4]
 80016e2:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80016e4:	4311      	orrs	r1, r2
 80016e6:	687a      	ldr	r2, [r7, #4]
 80016e8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80016ea:	430a      	orrs	r2, r1
 80016ec:	431a      	orrs	r2, r3
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f042 0201 	orr.w	r2, r2, #1
 80016f6:	611a      	str	r2, [r3, #16]
 80016f8:	e01c      	b.n	8001734 <HAL_ADC_Init+0x2c8>
 80016fa:	bf00      	nop
 80016fc:	24000000 	.word	0x24000000
 8001700:	053e2d63 	.word	0x053e2d63
 8001704:	40022000 	.word	0x40022000
 8001708:	40022100 	.word	0x40022100
 800170c:	58026000 	.word	0x58026000
 8001710:	40022300 	.word	0x40022300
 8001714:	58026300 	.word	0x58026300
 8001718:	fff0c003 	.word	0xfff0c003
 800171c:	ffffbffc 	.word	0xffffbffc
 8001720:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	691a      	ldr	r2, [r3, #16]
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f022 0201 	bic.w	r2, r2, #1
 8001732:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	691b      	ldr	r3, [r3, #16]
 800173a:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	430a      	orrs	r2, r1
 8001748:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 800174a:	6878      	ldr	r0, [r7, #4]
 800174c:	f000 ff26 	bl	800259c <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	68db      	ldr	r3, [r3, #12]
 8001754:	2b01      	cmp	r3, #1
 8001756:	d10c      	bne.n	8001772 <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800175e:	f023 010f 	bic.w	r1, r3, #15
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	699b      	ldr	r3, [r3, #24]
 8001766:	1e5a      	subs	r2, r3, #1
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	430a      	orrs	r2, r1
 800176e:	631a      	str	r2, [r3, #48]	; 0x30
 8001770:	e007      	b.n	8001782 <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	f022 020f 	bic.w	r2, r2, #15
 8001780:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001786:	f023 0303 	bic.w	r3, r3, #3
 800178a:	f043 0201 	orr.w	r2, r3, #1
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	655a      	str	r2, [r3, #84]	; 0x54
 8001792:	e007      	b.n	80017a4 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001798:	f043 0210 	orr.w	r2, r3, #16
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80017a0:	2301      	movs	r3, #1
 80017a2:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80017a4:	7ffb      	ldrb	r3, [r7, #31]
}
 80017a6:	4618      	mov	r0, r3
 80017a8:	3724      	adds	r7, #36	; 0x24
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bd90      	pop	{r4, r7, pc}
 80017ae:	bf00      	nop

080017b0 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b086      	sub	sp, #24
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	4a5c      	ldr	r2, [pc, #368]	; (8001930 <HAL_ADC_Start+0x180>)
 80017be:	4293      	cmp	r3, r2
 80017c0:	d004      	beq.n	80017cc <HAL_ADC_Start+0x1c>
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	4a5b      	ldr	r2, [pc, #364]	; (8001934 <HAL_ADC_Start+0x184>)
 80017c8:	4293      	cmp	r3, r2
 80017ca:	d101      	bne.n	80017d0 <HAL_ADC_Start+0x20>
 80017cc:	4b5a      	ldr	r3, [pc, #360]	; (8001938 <HAL_ADC_Start+0x188>)
 80017ce:	e000      	b.n	80017d2 <HAL_ADC_Start+0x22>
 80017d0:	4b5a      	ldr	r3, [pc, #360]	; (800193c <HAL_ADC_Start+0x18c>)
 80017d2:	4618      	mov	r0, r3
 80017d4:	f7ff fd2e 	bl	8001234 <LL_ADC_GetMultimode>
 80017d8:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	4618      	mov	r0, r3
 80017e0:	f7ff fe08 	bl	80013f4 <LL_ADC_REG_IsConversionOngoing>
 80017e4:	4603      	mov	r3, r0
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	f040 809a 	bne.w	8001920 <HAL_ADC_Start+0x170>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80017f2:	2b01      	cmp	r3, #1
 80017f4:	d101      	bne.n	80017fa <HAL_ADC_Start+0x4a>
 80017f6:	2302      	movs	r3, #2
 80017f8:	e095      	b.n	8001926 <HAL_ADC_Start+0x176>
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	2201      	movs	r2, #1
 80017fe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001802:	6878      	ldr	r0, [r7, #4]
 8001804:	f000 fde0 	bl	80023c8 <ADC_Enable>
 8001808:	4603      	mov	r3, r0
 800180a:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800180c:	7dfb      	ldrb	r3, [r7, #23]
 800180e:	2b00      	cmp	r3, #0
 8001810:	f040 8081 	bne.w	8001916 <HAL_ADC_Start+0x166>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001818:	4b49      	ldr	r3, [pc, #292]	; (8001940 <HAL_ADC_Start+0x190>)
 800181a:	4013      	ands	r3, r2
 800181c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	4a42      	ldr	r2, [pc, #264]	; (8001934 <HAL_ADC_Start+0x184>)
 800182a:	4293      	cmp	r3, r2
 800182c:	d002      	beq.n	8001834 <HAL_ADC_Start+0x84>
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	e000      	b.n	8001836 <HAL_ADC_Start+0x86>
 8001834:	4b3e      	ldr	r3, [pc, #248]	; (8001930 <HAL_ADC_Start+0x180>)
 8001836:	687a      	ldr	r2, [r7, #4]
 8001838:	6812      	ldr	r2, [r2, #0]
 800183a:	4293      	cmp	r3, r2
 800183c:	d002      	beq.n	8001844 <HAL_ADC_Start+0x94>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800183e:	693b      	ldr	r3, [r7, #16]
 8001840:	2b00      	cmp	r3, #0
 8001842:	d105      	bne.n	8001850 <HAL_ADC_Start+0xa0>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001848:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	655a      	str	r2, [r3, #84]	; 0x54
      }

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001854:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001858:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800185c:	d106      	bne.n	800186c <HAL_ADC_Start+0xbc>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001862:	f023 0206 	bic.w	r2, r3, #6
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	659a      	str	r2, [r3, #88]	; 0x58
 800186a:	e002      	b.n	8001872 <HAL_ADC_Start+0xc2>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	2200      	movs	r2, #0
 8001870:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	221c      	movs	r2, #28
 8001878:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	2200      	movs	r2, #0
 800187e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      /* trigger event.                                                       */
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	4a2b      	ldr	r2, [pc, #172]	; (8001934 <HAL_ADC_Start+0x184>)
 8001888:	4293      	cmp	r3, r2
 800188a:	d002      	beq.n	8001892 <HAL_ADC_Start+0xe2>
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	e000      	b.n	8001894 <HAL_ADC_Start+0xe4>
 8001892:	4b27      	ldr	r3, [pc, #156]	; (8001930 <HAL_ADC_Start+0x180>)
 8001894:	687a      	ldr	r2, [r7, #4]
 8001896:	6812      	ldr	r2, [r2, #0]
 8001898:	4293      	cmp	r3, r2
 800189a:	d008      	beq.n	80018ae <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800189c:	693b      	ldr	r3, [r7, #16]
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d005      	beq.n	80018ae <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80018a2:	693b      	ldr	r3, [r7, #16]
 80018a4:	2b05      	cmp	r3, #5
 80018a6:	d002      	beq.n	80018ae <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80018a8:	693b      	ldr	r3, [r7, #16]
 80018aa:	2b09      	cmp	r3, #9
 80018ac:	d114      	bne.n	80018d8 <HAL_ADC_Start+0x128>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	68db      	ldr	r3, [r3, #12]
 80018b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d007      	beq.n	80018cc <HAL_ADC_Start+0x11c>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018c0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80018c4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	4618      	mov	r0, r3
 80018d2:	f7ff fd67 	bl	80013a4 <LL_ADC_REG_StartConversion>
 80018d6:	e025      	b.n	8001924 <HAL_ADC_Start+0x174>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018dc:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	4a12      	ldr	r2, [pc, #72]	; (8001934 <HAL_ADC_Start+0x184>)
 80018ea:	4293      	cmp	r3, r2
 80018ec:	d002      	beq.n	80018f4 <HAL_ADC_Start+0x144>
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	e000      	b.n	80018f6 <HAL_ADC_Start+0x146>
 80018f4:	4b0e      	ldr	r3, [pc, #56]	; (8001930 <HAL_ADC_Start+0x180>)
 80018f6:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	68db      	ldr	r3, [r3, #12]
 80018fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001900:	2b00      	cmp	r3, #0
 8001902:	d00f      	beq.n	8001924 <HAL_ADC_Start+0x174>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001908:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800190c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	655a      	str	r2, [r3, #84]	; 0x54
 8001914:	e006      	b.n	8001924 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	2200      	movs	r2, #0
 800191a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 800191e:	e001      	b.n	8001924 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001920:	2302      	movs	r3, #2
 8001922:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001924:	7dfb      	ldrb	r3, [r7, #23]
}
 8001926:	4618      	mov	r0, r3
 8001928:	3718      	adds	r7, #24
 800192a:	46bd      	mov	sp, r7
 800192c:	bd80      	pop	{r7, pc}
 800192e:	bf00      	nop
 8001930:	40022000 	.word	0x40022000
 8001934:	40022100 	.word	0x40022100
 8001938:	40022300 	.word	0x40022300
 800193c:	58026300 	.word	0x58026300
 8001940:	fffff0fe 	.word	0xfffff0fe

08001944 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b084      	sub	sp, #16
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001952:	2b01      	cmp	r3, #1
 8001954:	d101      	bne.n	800195a <HAL_ADC_Stop+0x16>
 8001956:	2302      	movs	r3, #2
 8001958:	e021      	b.n	800199e <HAL_ADC_Stop+0x5a>
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	2201      	movs	r2, #1
 800195e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8001962:	2103      	movs	r1, #3
 8001964:	6878      	ldr	r0, [r7, #4]
 8001966:	f000 fc73 	bl	8002250 <ADC_ConversionStop>
 800196a:	4603      	mov	r3, r0
 800196c:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 800196e:	7bfb      	ldrb	r3, [r7, #15]
 8001970:	2b00      	cmp	r3, #0
 8001972:	d10f      	bne.n	8001994 <HAL_ADC_Stop+0x50>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8001974:	6878      	ldr	r0, [r7, #4]
 8001976:	f000 fdb1 	bl	80024dc <ADC_Disable>
 800197a:	4603      	mov	r3, r0
 800197c:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 800197e:	7bfb      	ldrb	r3, [r7, #15]
 8001980:	2b00      	cmp	r3, #0
 8001982:	d107      	bne.n	8001994 <HAL_ADC_Stop+0x50>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001988:	4b07      	ldr	r3, [pc, #28]	; (80019a8 <HAL_ADC_Stop+0x64>)
 800198a:	4013      	ands	r3, r2
 800198c:	f043 0201 	orr.w	r2, r3, #1
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	2200      	movs	r2, #0
 8001998:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800199c:	7bfb      	ldrb	r3, [r7, #15]
}
 800199e:	4618      	mov	r0, r3
 80019a0:	3710      	adds	r7, #16
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bd80      	pop	{r7, pc}
 80019a6:	bf00      	nop
 80019a8:	ffffeefe 	.word	0xffffeefe

080019ac <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b088      	sub	sp, #32
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
 80019b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	4a72      	ldr	r2, [pc, #456]	; (8001b84 <HAL_ADC_PollForConversion+0x1d8>)
 80019bc:	4293      	cmp	r3, r2
 80019be:	d004      	beq.n	80019ca <HAL_ADC_PollForConversion+0x1e>
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	4a70      	ldr	r2, [pc, #448]	; (8001b88 <HAL_ADC_PollForConversion+0x1dc>)
 80019c6:	4293      	cmp	r3, r2
 80019c8:	d101      	bne.n	80019ce <HAL_ADC_PollForConversion+0x22>
 80019ca:	4b70      	ldr	r3, [pc, #448]	; (8001b8c <HAL_ADC_PollForConversion+0x1e0>)
 80019cc:	e000      	b.n	80019d0 <HAL_ADC_PollForConversion+0x24>
 80019ce:	4b70      	ldr	r3, [pc, #448]	; (8001b90 <HAL_ADC_PollForConversion+0x1e4>)
 80019d0:	4618      	mov	r0, r3
 80019d2:	f7ff fc2f 	bl	8001234 <LL_ADC_GetMultimode>
 80019d6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	691b      	ldr	r3, [r3, #16]
 80019dc:	2b08      	cmp	r3, #8
 80019de:	d102      	bne.n	80019e6 <HAL_ADC_PollForConversion+0x3a>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 80019e0:	2308      	movs	r3, #8
 80019e2:	61fb      	str	r3, [r7, #28]
 80019e4:	e037      	b.n	8001a56 <HAL_ADC_PollForConversion+0xaa>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80019e6:	697b      	ldr	r3, [r7, #20]
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d005      	beq.n	80019f8 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80019ec:	697b      	ldr	r3, [r7, #20]
 80019ee:	2b05      	cmp	r3, #5
 80019f0:	d002      	beq.n	80019f8 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80019f2:	697b      	ldr	r3, [r7, #20]
 80019f4:	2b09      	cmp	r3, #9
 80019f6:	d111      	bne.n	8001a1c <HAL_ADC_PollForConversion+0x70>
       )
    {
      /* Check DMNGT bit in handle ADC CFGR register */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	68db      	ldr	r3, [r3, #12]
 80019fe:	f003 0301 	and.w	r3, r3, #1
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d007      	beq.n	8001a16 <HAL_ADC_PollForConversion+0x6a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a0a:	f043 0220 	orr.w	r2, r3, #32
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 8001a12:	2301      	movs	r3, #1
 8001a14:	e0b1      	b.n	8001b7a <HAL_ADC_PollForConversion+0x1ce>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8001a16:	2304      	movs	r3, #4
 8001a18:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 8001a1a:	e01c      	b.n	8001a56 <HAL_ADC_PollForConversion+0xaa>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	4a58      	ldr	r2, [pc, #352]	; (8001b84 <HAL_ADC_PollForConversion+0x1d8>)
 8001a22:	4293      	cmp	r3, r2
 8001a24:	d004      	beq.n	8001a30 <HAL_ADC_PollForConversion+0x84>
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	4a57      	ldr	r2, [pc, #348]	; (8001b88 <HAL_ADC_PollForConversion+0x1dc>)
 8001a2c:	4293      	cmp	r3, r2
 8001a2e:	d101      	bne.n	8001a34 <HAL_ADC_PollForConversion+0x88>
 8001a30:	4b56      	ldr	r3, [pc, #344]	; (8001b8c <HAL_ADC_PollForConversion+0x1e0>)
 8001a32:	e000      	b.n	8001a36 <HAL_ADC_PollForConversion+0x8a>
 8001a34:	4b56      	ldr	r3, [pc, #344]	; (8001b90 <HAL_ADC_PollForConversion+0x1e4>)
 8001a36:	4618      	mov	r0, r3
 8001a38:	f7ff fc0a 	bl	8001250 <LL_ADC_GetMultiDMATransfer>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d007      	beq.n	8001a52 <HAL_ADC_PollForConversion+0xa6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a46:	f043 0220 	orr.w	r2, r3, #32
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 8001a4e:	2301      	movs	r3, #1
 8001a50:	e093      	b.n	8001b7a <HAL_ADC_PollForConversion+0x1ce>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8001a52:	2304      	movs	r3, #4
 8001a54:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8001a56:	f7ff fa9b 	bl	8000f90 <HAL_GetTick>
 8001a5a:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001a5c:	e021      	b.n	8001aa2 <HAL_ADC_PollForConversion+0xf6>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8001a5e:	683b      	ldr	r3, [r7, #0]
 8001a60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a64:	d01d      	beq.n	8001aa2 <HAL_ADC_PollForConversion+0xf6>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8001a66:	f7ff fa93 	bl	8000f90 <HAL_GetTick>
 8001a6a:	4602      	mov	r2, r0
 8001a6c:	693b      	ldr	r3, [r7, #16]
 8001a6e:	1ad3      	subs	r3, r2, r3
 8001a70:	683a      	ldr	r2, [r7, #0]
 8001a72:	429a      	cmp	r2, r3
 8001a74:	d302      	bcc.n	8001a7c <HAL_ADC_PollForConversion+0xd0>
 8001a76:	683b      	ldr	r3, [r7, #0]
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d112      	bne.n	8001aa2 <HAL_ADC_PollForConversion+0xf6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	681a      	ldr	r2, [r3, #0]
 8001a82:	69fb      	ldr	r3, [r7, #28]
 8001a84:	4013      	ands	r3, r2
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d10b      	bne.n	8001aa2 <HAL_ADC_PollForConversion+0xf6>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a8e:	f043 0204 	orr.w	r2, r3, #4
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	2200      	movs	r2, #0
 8001a9a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 8001a9e:	2303      	movs	r3, #3
 8001aa0:	e06b      	b.n	8001b7a <HAL_ADC_PollForConversion+0x1ce>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	681a      	ldr	r2, [r3, #0]
 8001aa8:	69fb      	ldr	r3, [r7, #28]
 8001aaa:	4013      	ands	r3, r2
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d0d6      	beq.n	8001a5e <HAL_ADC_PollForConversion+0xb2>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ab4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	f7ff fb29 	bl	8001118 <LL_ADC_REG_IsTriggerSourceSWStart>
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d01c      	beq.n	8001b06 <HAL_ADC_PollForConversion+0x15a>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	7d5b      	ldrb	r3, [r3, #21]
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d118      	bne.n	8001b06 <HAL_ADC_PollForConversion+0x15a>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f003 0308 	and.w	r3, r3, #8
 8001ade:	2b08      	cmp	r3, #8
 8001ae0:	d111      	bne.n	8001b06 <HAL_ADC_PollForConversion+0x15a>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ae6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001af2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d105      	bne.n	8001b06 <HAL_ADC_PollForConversion+0x15a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001afe:	f043 0201 	orr.w	r2, r3, #1
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	4a1f      	ldr	r2, [pc, #124]	; (8001b88 <HAL_ADC_PollForConversion+0x1dc>)
 8001b0c:	4293      	cmp	r3, r2
 8001b0e:	d002      	beq.n	8001b16 <HAL_ADC_PollForConversion+0x16a>
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	e000      	b.n	8001b18 <HAL_ADC_PollForConversion+0x16c>
 8001b16:	4b1b      	ldr	r3, [pc, #108]	; (8001b84 <HAL_ADC_PollForConversion+0x1d8>)
 8001b18:	687a      	ldr	r2, [r7, #4]
 8001b1a:	6812      	ldr	r2, [r2, #0]
 8001b1c:	4293      	cmp	r3, r2
 8001b1e:	d008      	beq.n	8001b32 <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001b20:	697b      	ldr	r3, [r7, #20]
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d005      	beq.n	8001b32 <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001b26:	697b      	ldr	r3, [r7, #20]
 8001b28:	2b05      	cmp	r3, #5
 8001b2a:	d002      	beq.n	8001b32 <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001b2c:	697b      	ldr	r3, [r7, #20]
 8001b2e:	2b09      	cmp	r3, #9
 8001b30:	d104      	bne.n	8001b3c <HAL_ADC_PollForConversion+0x190>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	68db      	ldr	r3, [r3, #12]
 8001b38:	61bb      	str	r3, [r7, #24]
 8001b3a:	e00c      	b.n	8001b56 <HAL_ADC_PollForConversion+0x1aa>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	4a11      	ldr	r2, [pc, #68]	; (8001b88 <HAL_ADC_PollForConversion+0x1dc>)
 8001b42:	4293      	cmp	r3, r2
 8001b44:	d002      	beq.n	8001b4c <HAL_ADC_PollForConversion+0x1a0>
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	e000      	b.n	8001b4e <HAL_ADC_PollForConversion+0x1a2>
 8001b4c:	4b0d      	ldr	r3, [pc, #52]	; (8001b84 <HAL_ADC_PollForConversion+0x1d8>)
 8001b4e:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	68db      	ldr	r3, [r3, #12]
 8001b54:	61bb      	str	r3, [r7, #24]
  }

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8001b56:	69fb      	ldr	r3, [r7, #28]
 8001b58:	2b08      	cmp	r3, #8
 8001b5a:	d104      	bne.n	8001b66 <HAL_ADC_PollForConversion+0x1ba>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	2208      	movs	r2, #8
 8001b62:	601a      	str	r2, [r3, #0]
 8001b64:	e008      	b.n	8001b78 <HAL_ADC_PollForConversion+0x1cc>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8001b66:	69bb      	ldr	r3, [r7, #24]
 8001b68:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d103      	bne.n	8001b78 <HAL_ADC_PollForConversion+0x1cc>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	220c      	movs	r2, #12
 8001b76:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8001b78:	2300      	movs	r3, #0
}
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	3720      	adds	r7, #32
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bd80      	pop	{r7, pc}
 8001b82:	bf00      	nop
 8001b84:	40022000 	.word	0x40022000
 8001b88:	40022100 	.word	0x40022100
 8001b8c:	40022300 	.word	0x40022300
 8001b90:	58026300 	.word	0x58026300

08001b94 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8001b94:	b480      	push	{r7}
 8001b96:	b083      	sub	sp, #12
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	370c      	adds	r7, #12
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bac:	4770      	bx	lr
	...

08001bb0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001bb0:	b590      	push	{r4, r7, lr}
 8001bb2:	b0a1      	sub	sp, #132	; 0x84
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
 8001bb8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001bba:	2300      	movs	r3, #0
 8001bbc:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	68db      	ldr	r3, [r3, #12]
 8001bc8:	4a9d      	ldr	r2, [pc, #628]	; (8001e40 <HAL_ADC_ConfigChannel+0x290>)
 8001bca:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001bd2:	2b01      	cmp	r3, #1
 8001bd4:	d101      	bne.n	8001bda <HAL_ADC_ConfigChannel+0x2a>
 8001bd6:	2302      	movs	r3, #2
 8001bd8:	e321      	b.n	800221e <HAL_ADC_ConfigChannel+0x66e>
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	2201      	movs	r2, #1
 8001bde:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	4618      	mov	r0, r3
 8001be8:	f7ff fc04 	bl	80013f4 <LL_ADC_REG_IsConversionOngoing>
 8001bec:	4603      	mov	r3, r0
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	f040 8306 	bne.w	8002200 <HAL_ADC_ConfigChannel+0x650>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d108      	bne.n	8001c12 <HAL_ADC_ConfigChannel+0x62>
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	0e9b      	lsrs	r3, r3, #26
 8001c06:	f003 031f 	and.w	r3, r3, #31
 8001c0a:	2201      	movs	r2, #1
 8001c0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c10:	e016      	b.n	8001c40 <HAL_ADC_ConfigChannel+0x90>
 8001c12:	683b      	ldr	r3, [r7, #0]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c18:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001c1a:	fa93 f3a3 	rbit	r3, r3
 8001c1e:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001c20:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001c22:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001c24:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d101      	bne.n	8001c2e <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 8001c2a:	2320      	movs	r3, #32
 8001c2c:	e003      	b.n	8001c36 <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 8001c2e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001c30:	fab3 f383 	clz	r3, r3
 8001c34:	b2db      	uxtb	r3, r3
 8001c36:	f003 031f 	and.w	r3, r3, #31
 8001c3a:	2201      	movs	r2, #1
 8001c3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c40:	687a      	ldr	r2, [r7, #4]
 8001c42:	6812      	ldr	r2, [r2, #0]
 8001c44:	69d1      	ldr	r1, [r2, #28]
 8001c46:	687a      	ldr	r2, [r7, #4]
 8001c48:	6812      	ldr	r2, [r2, #0]
 8001c4a:	430b      	orrs	r3, r1
 8001c4c:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	6818      	ldr	r0, [r3, #0]
 8001c52:	683b      	ldr	r3, [r7, #0]
 8001c54:	6859      	ldr	r1, [r3, #4]
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	461a      	mov	r2, r3
 8001c5c:	f7ff fa6f 	bl	800113e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	4618      	mov	r0, r3
 8001c66:	f7ff fbc5 	bl	80013f4 <LL_ADC_REG_IsConversionOngoing>
 8001c6a:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	4618      	mov	r0, r3
 8001c72:	f7ff fbe7 	bl	8001444 <LL_ADC_INJ_IsConversionOngoing>
 8001c76:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001c78:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	f040 80b3 	bne.w	8001de6 <HAL_ADC_ConfigChannel+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001c80:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	f040 80af 	bne.w	8001de6 <HAL_ADC_ConfigChannel+0x236>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	6818      	ldr	r0, [r3, #0]
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	6819      	ldr	r1, [r3, #0]
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	689b      	ldr	r3, [r3, #8]
 8001c94:	461a      	mov	r2, r3
 8001c96:	f7ff fa7e 	bl	8001196 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001c9a:	4b6a      	ldr	r3, [pc, #424]	; (8001e44 <HAL_ADC_ConfigChannel+0x294>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8001ca2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001ca6:	d10b      	bne.n	8001cc0 <HAL_ADC_ConfigChannel+0x110>
 8001ca8:	683b      	ldr	r3, [r7, #0]
 8001caa:	695a      	ldr	r2, [r3, #20]
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	68db      	ldr	r3, [r3, #12]
 8001cb2:	089b      	lsrs	r3, r3, #2
 8001cb4:	f003 0307 	and.w	r3, r3, #7
 8001cb8:	005b      	lsls	r3, r3, #1
 8001cba:	fa02 f303 	lsl.w	r3, r2, r3
 8001cbe:	e01d      	b.n	8001cfc <HAL_ADC_ConfigChannel+0x14c>
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	68db      	ldr	r3, [r3, #12]
 8001cc6:	f003 0310 	and.w	r3, r3, #16
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d10b      	bne.n	8001ce6 <HAL_ADC_ConfigChannel+0x136>
 8001cce:	683b      	ldr	r3, [r7, #0]
 8001cd0:	695a      	ldr	r2, [r3, #20]
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	68db      	ldr	r3, [r3, #12]
 8001cd8:	089b      	lsrs	r3, r3, #2
 8001cda:	f003 0307 	and.w	r3, r3, #7
 8001cde:	005b      	lsls	r3, r3, #1
 8001ce0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce4:	e00a      	b.n	8001cfc <HAL_ADC_ConfigChannel+0x14c>
 8001ce6:	683b      	ldr	r3, [r7, #0]
 8001ce8:	695a      	ldr	r2, [r3, #20]
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	68db      	ldr	r3, [r3, #12]
 8001cf0:	089b      	lsrs	r3, r3, #2
 8001cf2:	f003 0304 	and.w	r3, r3, #4
 8001cf6:	005b      	lsls	r3, r3, #1
 8001cf8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cfc:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001cfe:	683b      	ldr	r3, [r7, #0]
 8001d00:	691b      	ldr	r3, [r3, #16]
 8001d02:	2b04      	cmp	r3, #4
 8001d04:	d027      	beq.n	8001d56 <HAL_ADC_ConfigChannel+0x1a6>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	6818      	ldr	r0, [r3, #0]
 8001d0a:	683b      	ldr	r3, [r7, #0]
 8001d0c:	6919      	ldr	r1, [r3, #16]
 8001d0e:	683b      	ldr	r3, [r7, #0]
 8001d10:	681a      	ldr	r2, [r3, #0]
 8001d12:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001d14:	f7ff f9ac 	bl	8001070 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	6818      	ldr	r0, [r3, #0]
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	6919      	ldr	r1, [r3, #16]
 8001d20:	683b      	ldr	r3, [r7, #0]
 8001d22:	7e5b      	ldrb	r3, [r3, #25]
 8001d24:	2b01      	cmp	r3, #1
 8001d26:	d102      	bne.n	8001d2e <HAL_ADC_ConfigChannel+0x17e>
 8001d28:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8001d2c:	e000      	b.n	8001d30 <HAL_ADC_ConfigChannel+0x180>
 8001d2e:	2300      	movs	r3, #0
 8001d30:	461a      	mov	r2, r3
 8001d32:	f7ff f9d6 	bl	80010e2 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	6818      	ldr	r0, [r3, #0]
 8001d3a:	683b      	ldr	r3, [r7, #0]
 8001d3c:	6919      	ldr	r1, [r3, #16]
 8001d3e:	683b      	ldr	r3, [r7, #0]
 8001d40:	7e1b      	ldrb	r3, [r3, #24]
 8001d42:	2b01      	cmp	r3, #1
 8001d44:	d102      	bne.n	8001d4c <HAL_ADC_ConfigChannel+0x19c>
 8001d46:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001d4a:	e000      	b.n	8001d4e <HAL_ADC_ConfigChannel+0x19e>
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	461a      	mov	r2, r3
 8001d50:	f7ff f9ae 	bl	80010b0 <LL_ADC_SetDataRightShift>
 8001d54:	e047      	b.n	8001de6 <HAL_ADC_ConfigChannel+0x236>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d5c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	069b      	lsls	r3, r3, #26
 8001d66:	429a      	cmp	r2, r3
 8001d68:	d107      	bne.n	8001d7a <HAL_ADC_ConfigChannel+0x1ca>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001d78:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001d80:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	069b      	lsls	r3, r3, #26
 8001d8a:	429a      	cmp	r2, r3
 8001d8c:	d107      	bne.n	8001d9e <HAL_ADC_ConfigChannel+0x1ee>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001d9c:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001da4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	069b      	lsls	r3, r3, #26
 8001dae:	429a      	cmp	r2, r3
 8001db0:	d107      	bne.n	8001dc2 <HAL_ADC_ConfigChannel+0x212>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001dc0:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001dc8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	069b      	lsls	r3, r3, #26
 8001dd2:	429a      	cmp	r2, r3
 8001dd4:	d107      	bne.n	8001de6 <HAL_ADC_ConfigChannel+0x236>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001de4:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	4618      	mov	r0, r3
 8001dec:	f7ff fab4 	bl	8001358 <LL_ADC_IsEnabled>
 8001df0:	4603      	mov	r3, r0
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	f040 820d 	bne.w	8002212 <HAL_ADC_ConfigChannel+0x662>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	6818      	ldr	r0, [r3, #0]
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	6819      	ldr	r1, [r3, #0]
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	68db      	ldr	r3, [r3, #12]
 8001e04:	461a      	mov	r2, r3
 8001e06:	f7ff f9f1 	bl	80011ec <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001e0a:	683b      	ldr	r3, [r7, #0]
 8001e0c:	68db      	ldr	r3, [r3, #12]
 8001e0e:	4a0c      	ldr	r2, [pc, #48]	; (8001e40 <HAL_ADC_ConfigChannel+0x290>)
 8001e10:	4293      	cmp	r3, r2
 8001e12:	f040 8133 	bne.w	800207c <HAL_ADC_ConfigChannel+0x4cc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001e1a:	683b      	ldr	r3, [r7, #0]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d110      	bne.n	8001e48 <HAL_ADC_ConfigChannel+0x298>
 8001e26:	683b      	ldr	r3, [r7, #0]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	0e9b      	lsrs	r3, r3, #26
 8001e2c:	3301      	adds	r3, #1
 8001e2e:	f003 031f 	and.w	r3, r3, #31
 8001e32:	2b09      	cmp	r3, #9
 8001e34:	bf94      	ite	ls
 8001e36:	2301      	movls	r3, #1
 8001e38:	2300      	movhi	r3, #0
 8001e3a:	b2db      	uxtb	r3, r3
 8001e3c:	e01e      	b.n	8001e7c <HAL_ADC_ConfigChannel+0x2cc>
 8001e3e:	bf00      	nop
 8001e40:	47ff0000 	.word	0x47ff0000
 8001e44:	5c001000 	.word	0x5c001000
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e4e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001e50:	fa93 f3a3 	rbit	r3, r3
 8001e54:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8001e56:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e58:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8001e5a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d101      	bne.n	8001e64 <HAL_ADC_ConfigChannel+0x2b4>
    return 32U;
 8001e60:	2320      	movs	r3, #32
 8001e62:	e003      	b.n	8001e6c <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 8001e64:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001e66:	fab3 f383 	clz	r3, r3
 8001e6a:	b2db      	uxtb	r3, r3
 8001e6c:	3301      	adds	r3, #1
 8001e6e:	f003 031f 	and.w	r3, r3, #31
 8001e72:	2b09      	cmp	r3, #9
 8001e74:	bf94      	ite	ls
 8001e76:	2301      	movls	r3, #1
 8001e78:	2300      	movhi	r3, #0
 8001e7a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d079      	beq.n	8001f74 <HAL_ADC_ConfigChannel+0x3c4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d107      	bne.n	8001e9c <HAL_ADC_ConfigChannel+0x2ec>
 8001e8c:	683b      	ldr	r3, [r7, #0]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	0e9b      	lsrs	r3, r3, #26
 8001e92:	3301      	adds	r3, #1
 8001e94:	069b      	lsls	r3, r3, #26
 8001e96:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001e9a:	e015      	b.n	8001ec8 <HAL_ADC_ConfigChannel+0x318>
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ea2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001ea4:	fa93 f3a3 	rbit	r3, r3
 8001ea8:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8001eaa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001eac:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8001eae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d101      	bne.n	8001eb8 <HAL_ADC_ConfigChannel+0x308>
    return 32U;
 8001eb4:	2320      	movs	r3, #32
 8001eb6:	e003      	b.n	8001ec0 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8001eb8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001eba:	fab3 f383 	clz	r3, r3
 8001ebe:	b2db      	uxtb	r3, r3
 8001ec0:	3301      	adds	r3, #1
 8001ec2:	069b      	lsls	r3, r3, #26
 8001ec4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d109      	bne.n	8001ee8 <HAL_ADC_ConfigChannel+0x338>
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	0e9b      	lsrs	r3, r3, #26
 8001eda:	3301      	adds	r3, #1
 8001edc:	f003 031f 	and.w	r3, r3, #31
 8001ee0:	2101      	movs	r1, #1
 8001ee2:	fa01 f303 	lsl.w	r3, r1, r3
 8001ee6:	e017      	b.n	8001f18 <HAL_ADC_ConfigChannel+0x368>
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001ef0:	fa93 f3a3 	rbit	r3, r3
 8001ef4:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8001ef6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001ef8:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8001efa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d101      	bne.n	8001f04 <HAL_ADC_ConfigChannel+0x354>
    return 32U;
 8001f00:	2320      	movs	r3, #32
 8001f02:	e003      	b.n	8001f0c <HAL_ADC_ConfigChannel+0x35c>
  return __builtin_clz(value);
 8001f04:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001f06:	fab3 f383 	clz	r3, r3
 8001f0a:	b2db      	uxtb	r3, r3
 8001f0c:	3301      	adds	r3, #1
 8001f0e:	f003 031f 	and.w	r3, r3, #31
 8001f12:	2101      	movs	r1, #1
 8001f14:	fa01 f303 	lsl.w	r3, r1, r3
 8001f18:	ea42 0103 	orr.w	r1, r2, r3
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d10a      	bne.n	8001f3e <HAL_ADC_ConfigChannel+0x38e>
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	0e9b      	lsrs	r3, r3, #26
 8001f2e:	3301      	adds	r3, #1
 8001f30:	f003 021f 	and.w	r2, r3, #31
 8001f34:	4613      	mov	r3, r2
 8001f36:	005b      	lsls	r3, r3, #1
 8001f38:	4413      	add	r3, r2
 8001f3a:	051b      	lsls	r3, r3, #20
 8001f3c:	e018      	b.n	8001f70 <HAL_ADC_ConfigChannel+0x3c0>
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f46:	fa93 f3a3 	rbit	r3, r3
 8001f4a:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8001f4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f4e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8001f50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d101      	bne.n	8001f5a <HAL_ADC_ConfigChannel+0x3aa>
    return 32U;
 8001f56:	2320      	movs	r3, #32
 8001f58:	e003      	b.n	8001f62 <HAL_ADC_ConfigChannel+0x3b2>
  return __builtin_clz(value);
 8001f5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f5c:	fab3 f383 	clz	r3, r3
 8001f60:	b2db      	uxtb	r3, r3
 8001f62:	3301      	adds	r3, #1
 8001f64:	f003 021f 	and.w	r2, r3, #31
 8001f68:	4613      	mov	r3, r2
 8001f6a:	005b      	lsls	r3, r3, #1
 8001f6c:	4413      	add	r3, r2
 8001f6e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001f70:	430b      	orrs	r3, r1
 8001f72:	e07e      	b.n	8002072 <HAL_ADC_ConfigChannel+0x4c2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d107      	bne.n	8001f90 <HAL_ADC_ConfigChannel+0x3e0>
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	0e9b      	lsrs	r3, r3, #26
 8001f86:	3301      	adds	r3, #1
 8001f88:	069b      	lsls	r3, r3, #26
 8001f8a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001f8e:	e015      	b.n	8001fbc <HAL_ADC_ConfigChannel+0x40c>
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f98:	fa93 f3a3 	rbit	r3, r3
 8001f9c:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8001f9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fa0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8001fa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d101      	bne.n	8001fac <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8001fa8:	2320      	movs	r3, #32
 8001faa:	e003      	b.n	8001fb4 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8001fac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fae:	fab3 f383 	clz	r3, r3
 8001fb2:	b2db      	uxtb	r3, r3
 8001fb4:	3301      	adds	r3, #1
 8001fb6:	069b      	lsls	r3, r3, #26
 8001fb8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d109      	bne.n	8001fdc <HAL_ADC_ConfigChannel+0x42c>
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	0e9b      	lsrs	r3, r3, #26
 8001fce:	3301      	adds	r3, #1
 8001fd0:	f003 031f 	and.w	r3, r3, #31
 8001fd4:	2101      	movs	r1, #1
 8001fd6:	fa01 f303 	lsl.w	r3, r1, r3
 8001fda:	e017      	b.n	800200c <HAL_ADC_ConfigChannel+0x45c>
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fe2:	69fb      	ldr	r3, [r7, #28]
 8001fe4:	fa93 f3a3 	rbit	r3, r3
 8001fe8:	61bb      	str	r3, [r7, #24]
  return result;
 8001fea:	69bb      	ldr	r3, [r7, #24]
 8001fec:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8001fee:	6a3b      	ldr	r3, [r7, #32]
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d101      	bne.n	8001ff8 <HAL_ADC_ConfigChannel+0x448>
    return 32U;
 8001ff4:	2320      	movs	r3, #32
 8001ff6:	e003      	b.n	8002000 <HAL_ADC_ConfigChannel+0x450>
  return __builtin_clz(value);
 8001ff8:	6a3b      	ldr	r3, [r7, #32]
 8001ffa:	fab3 f383 	clz	r3, r3
 8001ffe:	b2db      	uxtb	r3, r3
 8002000:	3301      	adds	r3, #1
 8002002:	f003 031f 	and.w	r3, r3, #31
 8002006:	2101      	movs	r1, #1
 8002008:	fa01 f303 	lsl.w	r3, r1, r3
 800200c:	ea42 0103 	orr.w	r1, r2, r3
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002018:	2b00      	cmp	r3, #0
 800201a:	d10d      	bne.n	8002038 <HAL_ADC_ConfigChannel+0x488>
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	0e9b      	lsrs	r3, r3, #26
 8002022:	3301      	adds	r3, #1
 8002024:	f003 021f 	and.w	r2, r3, #31
 8002028:	4613      	mov	r3, r2
 800202a:	005b      	lsls	r3, r3, #1
 800202c:	4413      	add	r3, r2
 800202e:	3b1e      	subs	r3, #30
 8002030:	051b      	lsls	r3, r3, #20
 8002032:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002036:	e01b      	b.n	8002070 <HAL_ADC_ConfigChannel+0x4c0>
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800203e:	693b      	ldr	r3, [r7, #16]
 8002040:	fa93 f3a3 	rbit	r3, r3
 8002044:	60fb      	str	r3, [r7, #12]
  return result;
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800204a:	697b      	ldr	r3, [r7, #20]
 800204c:	2b00      	cmp	r3, #0
 800204e:	d101      	bne.n	8002054 <HAL_ADC_ConfigChannel+0x4a4>
    return 32U;
 8002050:	2320      	movs	r3, #32
 8002052:	e003      	b.n	800205c <HAL_ADC_ConfigChannel+0x4ac>
  return __builtin_clz(value);
 8002054:	697b      	ldr	r3, [r7, #20]
 8002056:	fab3 f383 	clz	r3, r3
 800205a:	b2db      	uxtb	r3, r3
 800205c:	3301      	adds	r3, #1
 800205e:	f003 021f 	and.w	r2, r3, #31
 8002062:	4613      	mov	r3, r2
 8002064:	005b      	lsls	r3, r3, #1
 8002066:	4413      	add	r3, r2
 8002068:	3b1e      	subs	r3, #30
 800206a:	051b      	lsls	r3, r3, #20
 800206c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002070:	430b      	orrs	r3, r1
 8002072:	683a      	ldr	r2, [r7, #0]
 8002074:	6892      	ldr	r2, [r2, #8]
 8002076:	4619      	mov	r1, r3
 8002078:	f7ff f88d 	bl	8001196 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	2b00      	cmp	r3, #0
 8002082:	f280 80c6 	bge.w	8002212 <HAL_ADC_ConfigChannel+0x662>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	4a67      	ldr	r2, [pc, #412]	; (8002228 <HAL_ADC_ConfigChannel+0x678>)
 800208c:	4293      	cmp	r3, r2
 800208e:	d004      	beq.n	800209a <HAL_ADC_ConfigChannel+0x4ea>
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	4a65      	ldr	r2, [pc, #404]	; (800222c <HAL_ADC_ConfigChannel+0x67c>)
 8002096:	4293      	cmp	r3, r2
 8002098:	d101      	bne.n	800209e <HAL_ADC_ConfigChannel+0x4ee>
 800209a:	4b65      	ldr	r3, [pc, #404]	; (8002230 <HAL_ADC_ConfigChannel+0x680>)
 800209c:	e000      	b.n	80020a0 <HAL_ADC_ConfigChannel+0x4f0>
 800209e:	4b65      	ldr	r3, [pc, #404]	; (8002234 <HAL_ADC_ConfigChannel+0x684>)
 80020a0:	4618      	mov	r0, r3
 80020a2:	f7fe ffd7 	bl	8001054 <LL_ADC_GetCommonPathInternalCh>
 80020a6:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	4a5e      	ldr	r2, [pc, #376]	; (8002228 <HAL_ADC_ConfigChannel+0x678>)
 80020ae:	4293      	cmp	r3, r2
 80020b0:	d004      	beq.n	80020bc <HAL_ADC_ConfigChannel+0x50c>
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	4a5d      	ldr	r2, [pc, #372]	; (800222c <HAL_ADC_ConfigChannel+0x67c>)
 80020b8:	4293      	cmp	r3, r2
 80020ba:	d10e      	bne.n	80020da <HAL_ADC_ConfigChannel+0x52a>
 80020bc:	485a      	ldr	r0, [pc, #360]	; (8002228 <HAL_ADC_ConfigChannel+0x678>)
 80020be:	f7ff f94b 	bl	8001358 <LL_ADC_IsEnabled>
 80020c2:	4604      	mov	r4, r0
 80020c4:	4859      	ldr	r0, [pc, #356]	; (800222c <HAL_ADC_ConfigChannel+0x67c>)
 80020c6:	f7ff f947 	bl	8001358 <LL_ADC_IsEnabled>
 80020ca:	4603      	mov	r3, r0
 80020cc:	4323      	orrs	r3, r4
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	bf0c      	ite	eq
 80020d2:	2301      	moveq	r3, #1
 80020d4:	2300      	movne	r3, #0
 80020d6:	b2db      	uxtb	r3, r3
 80020d8:	e008      	b.n	80020ec <HAL_ADC_ConfigChannel+0x53c>
 80020da:	4857      	ldr	r0, [pc, #348]	; (8002238 <HAL_ADC_ConfigChannel+0x688>)
 80020dc:	f7ff f93c 	bl	8001358 <LL_ADC_IsEnabled>
 80020e0:	4603      	mov	r3, r0
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	bf0c      	ite	eq
 80020e6:	2301      	moveq	r3, #1
 80020e8:	2300      	movne	r3, #0
 80020ea:	b2db      	uxtb	r3, r3
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d07d      	beq.n	80021ec <HAL_ADC_ConfigChannel+0x63c>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	4a51      	ldr	r2, [pc, #324]	; (800223c <HAL_ADC_ConfigChannel+0x68c>)
 80020f6:	4293      	cmp	r3, r2
 80020f8:	d130      	bne.n	800215c <HAL_ADC_ConfigChannel+0x5ac>
 80020fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80020fc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002100:	2b00      	cmp	r3, #0
 8002102:	d12b      	bne.n	800215c <HAL_ADC_ConfigChannel+0x5ac>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	4a4b      	ldr	r2, [pc, #300]	; (8002238 <HAL_ADC_ConfigChannel+0x688>)
 800210a:	4293      	cmp	r3, r2
 800210c:	f040 8081 	bne.w	8002212 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	4a44      	ldr	r2, [pc, #272]	; (8002228 <HAL_ADC_ConfigChannel+0x678>)
 8002116:	4293      	cmp	r3, r2
 8002118:	d004      	beq.n	8002124 <HAL_ADC_ConfigChannel+0x574>
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	4a43      	ldr	r2, [pc, #268]	; (800222c <HAL_ADC_ConfigChannel+0x67c>)
 8002120:	4293      	cmp	r3, r2
 8002122:	d101      	bne.n	8002128 <HAL_ADC_ConfigChannel+0x578>
 8002124:	4a42      	ldr	r2, [pc, #264]	; (8002230 <HAL_ADC_ConfigChannel+0x680>)
 8002126:	e000      	b.n	800212a <HAL_ADC_ConfigChannel+0x57a>
 8002128:	4a42      	ldr	r2, [pc, #264]	; (8002234 <HAL_ADC_ConfigChannel+0x684>)
 800212a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800212c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002130:	4619      	mov	r1, r3
 8002132:	4610      	mov	r0, r2
 8002134:	f7fe ff7b 	bl	800102e <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002138:	4b41      	ldr	r3, [pc, #260]	; (8002240 <HAL_ADC_ConfigChannel+0x690>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	099b      	lsrs	r3, r3, #6
 800213e:	4a41      	ldr	r2, [pc, #260]	; (8002244 <HAL_ADC_ConfigChannel+0x694>)
 8002140:	fba2 2303 	umull	r2, r3, r2, r3
 8002144:	099b      	lsrs	r3, r3, #6
 8002146:	3301      	adds	r3, #1
 8002148:	005b      	lsls	r3, r3, #1
 800214a:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 800214c:	e002      	b.n	8002154 <HAL_ADC_ConfigChannel+0x5a4>
              {
                wait_loop_index--;
 800214e:	68bb      	ldr	r3, [r7, #8]
 8002150:	3b01      	subs	r3, #1
 8002152:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8002154:	68bb      	ldr	r3, [r7, #8]
 8002156:	2b00      	cmp	r3, #0
 8002158:	d1f9      	bne.n	800214e <HAL_ADC_ConfigChannel+0x59e>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800215a:	e05a      	b.n	8002212 <HAL_ADC_ConfigChannel+0x662>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	4a39      	ldr	r2, [pc, #228]	; (8002248 <HAL_ADC_ConfigChannel+0x698>)
 8002162:	4293      	cmp	r3, r2
 8002164:	d11e      	bne.n	80021a4 <HAL_ADC_ConfigChannel+0x5f4>
 8002166:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002168:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800216c:	2b00      	cmp	r3, #0
 800216e:	d119      	bne.n	80021a4 <HAL_ADC_ConfigChannel+0x5f4>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	4a30      	ldr	r2, [pc, #192]	; (8002238 <HAL_ADC_ConfigChannel+0x688>)
 8002176:	4293      	cmp	r3, r2
 8002178:	d14b      	bne.n	8002212 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	4a2a      	ldr	r2, [pc, #168]	; (8002228 <HAL_ADC_ConfigChannel+0x678>)
 8002180:	4293      	cmp	r3, r2
 8002182:	d004      	beq.n	800218e <HAL_ADC_ConfigChannel+0x5de>
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	4a28      	ldr	r2, [pc, #160]	; (800222c <HAL_ADC_ConfigChannel+0x67c>)
 800218a:	4293      	cmp	r3, r2
 800218c:	d101      	bne.n	8002192 <HAL_ADC_ConfigChannel+0x5e2>
 800218e:	4a28      	ldr	r2, [pc, #160]	; (8002230 <HAL_ADC_ConfigChannel+0x680>)
 8002190:	e000      	b.n	8002194 <HAL_ADC_ConfigChannel+0x5e4>
 8002192:	4a28      	ldr	r2, [pc, #160]	; (8002234 <HAL_ADC_ConfigChannel+0x684>)
 8002194:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002196:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800219a:	4619      	mov	r1, r3
 800219c:	4610      	mov	r0, r2
 800219e:	f7fe ff46 	bl	800102e <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80021a2:	e036      	b.n	8002212 <HAL_ADC_ConfigChannel+0x662>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	4a28      	ldr	r2, [pc, #160]	; (800224c <HAL_ADC_ConfigChannel+0x69c>)
 80021aa:	4293      	cmp	r3, r2
 80021ac:	d131      	bne.n	8002212 <HAL_ADC_ConfigChannel+0x662>
 80021ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80021b0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d12c      	bne.n	8002212 <HAL_ADC_ConfigChannel+0x662>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	4a1e      	ldr	r2, [pc, #120]	; (8002238 <HAL_ADC_ConfigChannel+0x688>)
 80021be:	4293      	cmp	r3, r2
 80021c0:	d127      	bne.n	8002212 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	4a18      	ldr	r2, [pc, #96]	; (8002228 <HAL_ADC_ConfigChannel+0x678>)
 80021c8:	4293      	cmp	r3, r2
 80021ca:	d004      	beq.n	80021d6 <HAL_ADC_ConfigChannel+0x626>
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	4a16      	ldr	r2, [pc, #88]	; (800222c <HAL_ADC_ConfigChannel+0x67c>)
 80021d2:	4293      	cmp	r3, r2
 80021d4:	d101      	bne.n	80021da <HAL_ADC_ConfigChannel+0x62a>
 80021d6:	4a16      	ldr	r2, [pc, #88]	; (8002230 <HAL_ADC_ConfigChannel+0x680>)
 80021d8:	e000      	b.n	80021dc <HAL_ADC_ConfigChannel+0x62c>
 80021da:	4a16      	ldr	r2, [pc, #88]	; (8002234 <HAL_ADC_ConfigChannel+0x684>)
 80021dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80021de:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80021e2:	4619      	mov	r1, r3
 80021e4:	4610      	mov	r0, r2
 80021e6:	f7fe ff22 	bl	800102e <LL_ADC_SetCommonPathInternalCh>
 80021ea:	e012      	b.n	8002212 <HAL_ADC_ConfigChannel+0x662>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021f0:	f043 0220 	orr.w	r2, r3, #32
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 80021f8:	2301      	movs	r3, #1
 80021fa:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 80021fe:	e008      	b.n	8002212 <HAL_ADC_ConfigChannel+0x662>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002204:	f043 0220 	orr.w	r2, r3, #32
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800220c:	2301      	movs	r3, #1
 800220e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	2200      	movs	r2, #0
 8002216:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800221a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 800221e:	4618      	mov	r0, r3
 8002220:	3784      	adds	r7, #132	; 0x84
 8002222:	46bd      	mov	sp, r7
 8002224:	bd90      	pop	{r4, r7, pc}
 8002226:	bf00      	nop
 8002228:	40022000 	.word	0x40022000
 800222c:	40022100 	.word	0x40022100
 8002230:	40022300 	.word	0x40022300
 8002234:	58026300 	.word	0x58026300
 8002238:	58026000 	.word	0x58026000
 800223c:	cb840000 	.word	0xcb840000
 8002240:	24000000 	.word	0x24000000
 8002244:	053e2d63 	.word	0x053e2d63
 8002248:	c7520000 	.word	0xc7520000
 800224c:	cfb80000 	.word	0xcfb80000

08002250 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	b088      	sub	sp, #32
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
 8002258:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 800225a:	2300      	movs	r3, #0
 800225c:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	4618      	mov	r0, r3
 8002268:	f7ff f8c4 	bl	80013f4 <LL_ADC_REG_IsConversionOngoing>
 800226c:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	4618      	mov	r0, r3
 8002274:	f7ff f8e6 	bl	8001444 <LL_ADC_INJ_IsConversionOngoing>
 8002278:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 800227a:	693b      	ldr	r3, [r7, #16]
 800227c:	2b00      	cmp	r3, #0
 800227e:	d103      	bne.n	8002288 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	2b00      	cmp	r3, #0
 8002284:	f000 8098 	beq.w	80023b8 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	68db      	ldr	r3, [r3, #12]
 800228e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002292:	2b00      	cmp	r3, #0
 8002294:	d02a      	beq.n	80022ec <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	7d5b      	ldrb	r3, [r3, #21]
 800229a:	2b01      	cmp	r3, #1
 800229c:	d126      	bne.n	80022ec <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	7d1b      	ldrb	r3, [r3, #20]
 80022a2:	2b01      	cmp	r3, #1
 80022a4:	d122      	bne.n	80022ec <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 80022a6:	2301      	movs	r3, #1
 80022a8:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80022aa:	e014      	b.n	80022d6 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 80022ac:	69fb      	ldr	r3, [r7, #28]
 80022ae:	4a45      	ldr	r2, [pc, #276]	; (80023c4 <ADC_ConversionStop+0x174>)
 80022b0:	4293      	cmp	r3, r2
 80022b2:	d90d      	bls.n	80022d0 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022b8:	f043 0210 	orr.w	r2, r3, #16
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022c4:	f043 0201 	orr.w	r2, r3, #1
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 80022cc:	2301      	movs	r3, #1
 80022ce:	e074      	b.n	80023ba <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 80022d0:	69fb      	ldr	r3, [r7, #28]
 80022d2:	3301      	adds	r3, #1
 80022d4:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022e0:	2b40      	cmp	r3, #64	; 0x40
 80022e2:	d1e3      	bne.n	80022ac <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	2240      	movs	r2, #64	; 0x40
 80022ea:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 80022ec:	69bb      	ldr	r3, [r7, #24]
 80022ee:	2b02      	cmp	r3, #2
 80022f0:	d014      	beq.n	800231c <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	4618      	mov	r0, r3
 80022f8:	f7ff f87c 	bl	80013f4 <LL_ADC_REG_IsConversionOngoing>
 80022fc:	4603      	mov	r3, r0
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d00c      	beq.n	800231c <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	4618      	mov	r0, r3
 8002308:	f7ff f839 	bl	800137e <LL_ADC_IsDisableOngoing>
 800230c:	4603      	mov	r3, r0
 800230e:	2b00      	cmp	r3, #0
 8002310:	d104      	bne.n	800231c <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	4618      	mov	r0, r3
 8002318:	f7ff f858 	bl	80013cc <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 800231c:	69bb      	ldr	r3, [r7, #24]
 800231e:	2b01      	cmp	r3, #1
 8002320:	d014      	beq.n	800234c <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	4618      	mov	r0, r3
 8002328:	f7ff f88c 	bl	8001444 <LL_ADC_INJ_IsConversionOngoing>
 800232c:	4603      	mov	r3, r0
 800232e:	2b00      	cmp	r3, #0
 8002330:	d00c      	beq.n	800234c <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	4618      	mov	r0, r3
 8002338:	f7ff f821 	bl	800137e <LL_ADC_IsDisableOngoing>
 800233c:	4603      	mov	r3, r0
 800233e:	2b00      	cmp	r3, #0
 8002340:	d104      	bne.n	800234c <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	4618      	mov	r0, r3
 8002348:	f7ff f868 	bl	800141c <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 800234c:	69bb      	ldr	r3, [r7, #24]
 800234e:	2b02      	cmp	r3, #2
 8002350:	d005      	beq.n	800235e <ADC_ConversionStop+0x10e>
 8002352:	69bb      	ldr	r3, [r7, #24]
 8002354:	2b03      	cmp	r3, #3
 8002356:	d105      	bne.n	8002364 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8002358:	230c      	movs	r3, #12
 800235a:	617b      	str	r3, [r7, #20]
        break;
 800235c:	e005      	b.n	800236a <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 800235e:	2308      	movs	r3, #8
 8002360:	617b      	str	r3, [r7, #20]
        break;
 8002362:	e002      	b.n	800236a <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8002364:	2304      	movs	r3, #4
 8002366:	617b      	str	r3, [r7, #20]
        break;
 8002368:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 800236a:	f7fe fe11 	bl	8000f90 <HAL_GetTick>
 800236e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002370:	e01b      	b.n	80023aa <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8002372:	f7fe fe0d 	bl	8000f90 <HAL_GetTick>
 8002376:	4602      	mov	r2, r0
 8002378:	68bb      	ldr	r3, [r7, #8]
 800237a:	1ad3      	subs	r3, r2, r3
 800237c:	2b05      	cmp	r3, #5
 800237e:	d914      	bls.n	80023aa <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	689a      	ldr	r2, [r3, #8]
 8002386:	697b      	ldr	r3, [r7, #20]
 8002388:	4013      	ands	r3, r2
 800238a:	2b00      	cmp	r3, #0
 800238c:	d00d      	beq.n	80023aa <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002392:	f043 0210 	orr.w	r2, r3, #16
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800239e:	f043 0201 	orr.w	r2, r3, #1
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 80023a6:	2301      	movs	r3, #1
 80023a8:	e007      	b.n	80023ba <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	689a      	ldr	r2, [r3, #8]
 80023b0:	697b      	ldr	r3, [r7, #20]
 80023b2:	4013      	ands	r3, r2
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d1dc      	bne.n	8002372 <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 80023b8:	2300      	movs	r3, #0
}
 80023ba:	4618      	mov	r0, r3
 80023bc:	3720      	adds	r7, #32
 80023be:	46bd      	mov	sp, r7
 80023c0:	bd80      	pop	{r7, pc}
 80023c2:	bf00      	nop
 80023c4:	000cdbff 	.word	0x000cdbff

080023c8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b084      	sub	sp, #16
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	4618      	mov	r0, r3
 80023d6:	f7fe ffbf 	bl	8001358 <LL_ADC_IsEnabled>
 80023da:	4603      	mov	r3, r0
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d16e      	bne.n	80024be <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	689a      	ldr	r2, [r3, #8]
 80023e6:	4b38      	ldr	r3, [pc, #224]	; (80024c8 <ADC_Enable+0x100>)
 80023e8:	4013      	ands	r3, r2
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d00d      	beq.n	800240a <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023f2:	f043 0210 	orr.w	r2, r3, #16
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023fe:	f043 0201 	orr.w	r2, r3, #1
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8002406:	2301      	movs	r3, #1
 8002408:	e05a      	b.n	80024c0 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	4618      	mov	r0, r3
 8002410:	f7fe ff7a 	bl	8001308 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002414:	f7fe fdbc 	bl	8000f90 <HAL_GetTick>
 8002418:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	4a2b      	ldr	r2, [pc, #172]	; (80024cc <ADC_Enable+0x104>)
 8002420:	4293      	cmp	r3, r2
 8002422:	d004      	beq.n	800242e <ADC_Enable+0x66>
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	4a29      	ldr	r2, [pc, #164]	; (80024d0 <ADC_Enable+0x108>)
 800242a:	4293      	cmp	r3, r2
 800242c:	d101      	bne.n	8002432 <ADC_Enable+0x6a>
 800242e:	4b29      	ldr	r3, [pc, #164]	; (80024d4 <ADC_Enable+0x10c>)
 8002430:	e000      	b.n	8002434 <ADC_Enable+0x6c>
 8002432:	4b29      	ldr	r3, [pc, #164]	; (80024d8 <ADC_Enable+0x110>)
 8002434:	4618      	mov	r0, r3
 8002436:	f7fe fefd 	bl	8001234 <LL_ADC_GetMultimode>
 800243a:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	4a23      	ldr	r2, [pc, #140]	; (80024d0 <ADC_Enable+0x108>)
 8002442:	4293      	cmp	r3, r2
 8002444:	d002      	beq.n	800244c <ADC_Enable+0x84>
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	e000      	b.n	800244e <ADC_Enable+0x86>
 800244c:	4b1f      	ldr	r3, [pc, #124]	; (80024cc <ADC_Enable+0x104>)
 800244e:	687a      	ldr	r2, [r7, #4]
 8002450:	6812      	ldr	r2, [r2, #0]
 8002452:	4293      	cmp	r3, r2
 8002454:	d02c      	beq.n	80024b0 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002456:	68bb      	ldr	r3, [r7, #8]
 8002458:	2b00      	cmp	r3, #0
 800245a:	d130      	bne.n	80024be <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800245c:	e028      	b.n	80024b0 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	4618      	mov	r0, r3
 8002464:	f7fe ff78 	bl	8001358 <LL_ADC_IsEnabled>
 8002468:	4603      	mov	r3, r0
 800246a:	2b00      	cmp	r3, #0
 800246c:	d104      	bne.n	8002478 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	4618      	mov	r0, r3
 8002474:	f7fe ff48 	bl	8001308 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002478:	f7fe fd8a 	bl	8000f90 <HAL_GetTick>
 800247c:	4602      	mov	r2, r0
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	1ad3      	subs	r3, r2, r3
 8002482:	2b02      	cmp	r3, #2
 8002484:	d914      	bls.n	80024b0 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f003 0301 	and.w	r3, r3, #1
 8002490:	2b01      	cmp	r3, #1
 8002492:	d00d      	beq.n	80024b0 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002498:	f043 0210 	orr.w	r2, r3, #16
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024a4:	f043 0201 	orr.w	r2, r3, #1
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	659a      	str	r2, [r3, #88]	; 0x58

            return HAL_ERROR;
 80024ac:	2301      	movs	r3, #1
 80024ae:	e007      	b.n	80024c0 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f003 0301 	and.w	r3, r3, #1
 80024ba:	2b01      	cmp	r3, #1
 80024bc:	d1cf      	bne.n	800245e <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80024be:	2300      	movs	r3, #0
}
 80024c0:	4618      	mov	r0, r3
 80024c2:	3710      	adds	r7, #16
 80024c4:	46bd      	mov	sp, r7
 80024c6:	bd80      	pop	{r7, pc}
 80024c8:	8000003f 	.word	0x8000003f
 80024cc:	40022000 	.word	0x40022000
 80024d0:	40022100 	.word	0x40022100
 80024d4:	40022300 	.word	0x40022300
 80024d8:	58026300 	.word	0x58026300

080024dc <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b084      	sub	sp, #16
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	4618      	mov	r0, r3
 80024ea:	f7fe ff48 	bl	800137e <LL_ADC_IsDisableOngoing>
 80024ee:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	4618      	mov	r0, r3
 80024f6:	f7fe ff2f 	bl	8001358 <LL_ADC_IsEnabled>
 80024fa:	4603      	mov	r3, r0
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d047      	beq.n	8002590 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	2b00      	cmp	r3, #0
 8002504:	d144      	bne.n	8002590 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	689b      	ldr	r3, [r3, #8]
 800250c:	f003 030d 	and.w	r3, r3, #13
 8002510:	2b01      	cmp	r3, #1
 8002512:	d10c      	bne.n	800252e <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	4618      	mov	r0, r3
 800251a:	f7fe ff09 	bl	8001330 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	2203      	movs	r2, #3
 8002524:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002526:	f7fe fd33 	bl	8000f90 <HAL_GetTick>
 800252a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800252c:	e029      	b.n	8002582 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002532:	f043 0210 	orr.w	r2, r3, #16
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800253e:	f043 0201 	orr.w	r2, r3, #1
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8002546:	2301      	movs	r3, #1
 8002548:	e023      	b.n	8002592 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800254a:	f7fe fd21 	bl	8000f90 <HAL_GetTick>
 800254e:	4602      	mov	r2, r0
 8002550:	68bb      	ldr	r3, [r7, #8]
 8002552:	1ad3      	subs	r3, r2, r3
 8002554:	2b02      	cmp	r3, #2
 8002556:	d914      	bls.n	8002582 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	689b      	ldr	r3, [r3, #8]
 800255e:	f003 0301 	and.w	r3, r3, #1
 8002562:	2b00      	cmp	r3, #0
 8002564:	d00d      	beq.n	8002582 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800256a:	f043 0210 	orr.w	r2, r3, #16
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002576:	f043 0201 	orr.w	r2, r3, #1
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 800257e:	2301      	movs	r3, #1
 8002580:	e007      	b.n	8002592 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	689b      	ldr	r3, [r3, #8]
 8002588:	f003 0301 	and.w	r3, r3, #1
 800258c:	2b00      	cmp	r3, #0
 800258e:	d1dc      	bne.n	800254a <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002590:	2300      	movs	r3, #0
}
 8002592:	4618      	mov	r0, r3
 8002594:	3710      	adds	r7, #16
 8002596:	46bd      	mov	sp, r7
 8002598:	bd80      	pop	{r7, pc}
	...

0800259c <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	b084      	sub	sp, #16
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	4a79      	ldr	r2, [pc, #484]	; (8002790 <ADC_ConfigureBoostMode+0x1f4>)
 80025aa:	4293      	cmp	r3, r2
 80025ac:	d004      	beq.n	80025b8 <ADC_ConfigureBoostMode+0x1c>
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	4a78      	ldr	r2, [pc, #480]	; (8002794 <ADC_ConfigureBoostMode+0x1f8>)
 80025b4:	4293      	cmp	r3, r2
 80025b6:	d109      	bne.n	80025cc <ADC_ConfigureBoostMode+0x30>
 80025b8:	4b77      	ldr	r3, [pc, #476]	; (8002798 <ADC_ConfigureBoostMode+0x1fc>)
 80025ba:	689b      	ldr	r3, [r3, #8]
 80025bc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	bf14      	ite	ne
 80025c4:	2301      	movne	r3, #1
 80025c6:	2300      	moveq	r3, #0
 80025c8:	b2db      	uxtb	r3, r3
 80025ca:	e008      	b.n	80025de <ADC_ConfigureBoostMode+0x42>
 80025cc:	4b73      	ldr	r3, [pc, #460]	; (800279c <ADC_ConfigureBoostMode+0x200>)
 80025ce:	689b      	ldr	r3, [r3, #8]
 80025d0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	bf14      	ite	ne
 80025d8:	2301      	movne	r3, #1
 80025da:	2300      	moveq	r3, #0
 80025dc:	b2db      	uxtb	r3, r3
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d01c      	beq.n	800261c <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 80025e2:	f002 fe4f 	bl	8005284 <HAL_RCC_GetHCLKFreq>
 80025e6:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	685b      	ldr	r3, [r3, #4]
 80025ec:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80025f0:	d010      	beq.n	8002614 <ADC_ConfigureBoostMode+0x78>
 80025f2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80025f6:	d871      	bhi.n	80026dc <ADC_ConfigureBoostMode+0x140>
 80025f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025fc:	d002      	beq.n	8002604 <ADC_ConfigureBoostMode+0x68>
 80025fe:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002602:	d16b      	bne.n	80026dc <ADC_ConfigureBoostMode+0x140>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	685b      	ldr	r3, [r3, #4]
 8002608:	0c1b      	lsrs	r3, r3, #16
 800260a:	68fa      	ldr	r2, [r7, #12]
 800260c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002610:	60fb      	str	r3, [r7, #12]
        break;
 8002612:	e066      	b.n	80026e2 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	089b      	lsrs	r3, r3, #2
 8002618:	60fb      	str	r3, [r7, #12]
        break;
 800261a:	e062      	b.n	80026e2 <ADC_ConfigureBoostMode+0x146>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 800261c:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8002620:	f003 fda6 	bl	8006170 <HAL_RCCEx_GetPeriphCLKFreq>
 8002624:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	685b      	ldr	r3, [r3, #4]
 800262a:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 800262e:	d051      	beq.n	80026d4 <ADC_ConfigureBoostMode+0x138>
 8002630:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8002634:	d854      	bhi.n	80026e0 <ADC_ConfigureBoostMode+0x144>
 8002636:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 800263a:	d047      	beq.n	80026cc <ADC_ConfigureBoostMode+0x130>
 800263c:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8002640:	d84e      	bhi.n	80026e0 <ADC_ConfigureBoostMode+0x144>
 8002642:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8002646:	d03d      	beq.n	80026c4 <ADC_ConfigureBoostMode+0x128>
 8002648:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 800264c:	d848      	bhi.n	80026e0 <ADC_ConfigureBoostMode+0x144>
 800264e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002652:	d033      	beq.n	80026bc <ADC_ConfigureBoostMode+0x120>
 8002654:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002658:	d842      	bhi.n	80026e0 <ADC_ConfigureBoostMode+0x144>
 800265a:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 800265e:	d029      	beq.n	80026b4 <ADC_ConfigureBoostMode+0x118>
 8002660:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8002664:	d83c      	bhi.n	80026e0 <ADC_ConfigureBoostMode+0x144>
 8002666:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 800266a:	d01a      	beq.n	80026a2 <ADC_ConfigureBoostMode+0x106>
 800266c:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8002670:	d836      	bhi.n	80026e0 <ADC_ConfigureBoostMode+0x144>
 8002672:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8002676:	d014      	beq.n	80026a2 <ADC_ConfigureBoostMode+0x106>
 8002678:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 800267c:	d830      	bhi.n	80026e0 <ADC_ConfigureBoostMode+0x144>
 800267e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002682:	d00e      	beq.n	80026a2 <ADC_ConfigureBoostMode+0x106>
 8002684:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002688:	d82a      	bhi.n	80026e0 <ADC_ConfigureBoostMode+0x144>
 800268a:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800268e:	d008      	beq.n	80026a2 <ADC_ConfigureBoostMode+0x106>
 8002690:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002694:	d824      	bhi.n	80026e0 <ADC_ConfigureBoostMode+0x144>
 8002696:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800269a:	d002      	beq.n	80026a2 <ADC_ConfigureBoostMode+0x106>
 800269c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80026a0:	d11e      	bne.n	80026e0 <ADC_ConfigureBoostMode+0x144>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	685b      	ldr	r3, [r3, #4]
 80026a6:	0c9b      	lsrs	r3, r3, #18
 80026a8:	005b      	lsls	r3, r3, #1
 80026aa:	68fa      	ldr	r2, [r7, #12]
 80026ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80026b0:	60fb      	str	r3, [r7, #12]
        break;
 80026b2:	e016      	b.n	80026e2 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	091b      	lsrs	r3, r3, #4
 80026b8:	60fb      	str	r3, [r7, #12]
        break;
 80026ba:	e012      	b.n	80026e2 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	095b      	lsrs	r3, r3, #5
 80026c0:	60fb      	str	r3, [r7, #12]
        break;
 80026c2:	e00e      	b.n	80026e2 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	099b      	lsrs	r3, r3, #6
 80026c8:	60fb      	str	r3, [r7, #12]
        break;
 80026ca:	e00a      	b.n	80026e2 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	09db      	lsrs	r3, r3, #7
 80026d0:	60fb      	str	r3, [r7, #12]
        break;
 80026d2:	e006      	b.n	80026e2 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	0a1b      	lsrs	r3, r3, #8
 80026d8:	60fb      	str	r3, [r7, #12]
        break;
 80026da:	e002      	b.n	80026e2 <ADC_ConfigureBoostMode+0x146>
        break;
 80026dc:	bf00      	nop
 80026de:	e000      	b.n	80026e2 <ADC_ConfigureBoostMode+0x146>
      default:
        break;
 80026e0:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 80026e2:	f7fe fc85 	bl	8000ff0 <HAL_GetREVID>
 80026e6:	4603      	mov	r3, r0
 80026e8:	f241 0203 	movw	r2, #4099	; 0x1003
 80026ec:	4293      	cmp	r3, r2
 80026ee:	d815      	bhi.n	800271c <ADC_ConfigureBoostMode+0x180>
  {
    if (freq > 20000000UL)
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	4a2b      	ldr	r2, [pc, #172]	; (80027a0 <ADC_ConfigureBoostMode+0x204>)
 80026f4:	4293      	cmp	r3, r2
 80026f6:	d908      	bls.n	800270a <ADC_ConfigureBoostMode+0x16e>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	689a      	ldr	r2, [r3, #8]
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002706:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8002708:	e03e      	b.n	8002788 <ADC_ConfigureBoostMode+0x1ec>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	689a      	ldr	r2, [r3, #8]
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002718:	609a      	str	r2, [r3, #8]
}
 800271a:	e035      	b.n	8002788 <ADC_ConfigureBoostMode+0x1ec>
    freq /= 2U; /* divider by 2 for Rev.V */
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	085b      	lsrs	r3, r3, #1
 8002720:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	4a1f      	ldr	r2, [pc, #124]	; (80027a4 <ADC_ConfigureBoostMode+0x208>)
 8002726:	4293      	cmp	r3, r2
 8002728:	d808      	bhi.n	800273c <ADC_ConfigureBoostMode+0x1a0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	689a      	ldr	r2, [r3, #8]
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002738:	609a      	str	r2, [r3, #8]
}
 800273a:	e025      	b.n	8002788 <ADC_ConfigureBoostMode+0x1ec>
    else if (freq <= 12500000UL)
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	4a1a      	ldr	r2, [pc, #104]	; (80027a8 <ADC_ConfigureBoostMode+0x20c>)
 8002740:	4293      	cmp	r3, r2
 8002742:	d80a      	bhi.n	800275a <ADC_ConfigureBoostMode+0x1be>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	689b      	ldr	r3, [r3, #8]
 800274a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002756:	609a      	str	r2, [r3, #8]
}
 8002758:	e016      	b.n	8002788 <ADC_ConfigureBoostMode+0x1ec>
    else if (freq <= 25000000UL)
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	4a13      	ldr	r2, [pc, #76]	; (80027ac <ADC_ConfigureBoostMode+0x210>)
 800275e:	4293      	cmp	r3, r2
 8002760:	d80a      	bhi.n	8002778 <ADC_ConfigureBoostMode+0x1dc>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	689b      	ldr	r3, [r3, #8]
 8002768:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002774:	609a      	str	r2, [r3, #8]
}
 8002776:	e007      	b.n	8002788 <ADC_ConfigureBoostMode+0x1ec>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	689a      	ldr	r2, [r3, #8]
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8002786:	609a      	str	r2, [r3, #8]
}
 8002788:	bf00      	nop
 800278a:	3710      	adds	r7, #16
 800278c:	46bd      	mov	sp, r7
 800278e:	bd80      	pop	{r7, pc}
 8002790:	40022000 	.word	0x40022000
 8002794:	40022100 	.word	0x40022100
 8002798:	40022300 	.word	0x40022300
 800279c:	58026300 	.word	0x58026300
 80027a0:	01312d00 	.word	0x01312d00
 80027a4:	005f5e10 	.word	0x005f5e10
 80027a8:	00bebc20 	.word	0x00bebc20
 80027ac:	017d7840 	.word	0x017d7840

080027b0 <LL_ADC_IsEnabled>:
{
 80027b0:	b480      	push	{r7}
 80027b2:	b083      	sub	sp, #12
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	689b      	ldr	r3, [r3, #8]
 80027bc:	f003 0301 	and.w	r3, r3, #1
 80027c0:	2b01      	cmp	r3, #1
 80027c2:	d101      	bne.n	80027c8 <LL_ADC_IsEnabled+0x18>
 80027c4:	2301      	movs	r3, #1
 80027c6:	e000      	b.n	80027ca <LL_ADC_IsEnabled+0x1a>
 80027c8:	2300      	movs	r3, #0
}
 80027ca:	4618      	mov	r0, r3
 80027cc:	370c      	adds	r7, #12
 80027ce:	46bd      	mov	sp, r7
 80027d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d4:	4770      	bx	lr

080027d6 <LL_ADC_REG_IsConversionOngoing>:
{
 80027d6:	b480      	push	{r7}
 80027d8:	b083      	sub	sp, #12
 80027da:	af00      	add	r7, sp, #0
 80027dc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	689b      	ldr	r3, [r3, #8]
 80027e2:	f003 0304 	and.w	r3, r3, #4
 80027e6:	2b04      	cmp	r3, #4
 80027e8:	d101      	bne.n	80027ee <LL_ADC_REG_IsConversionOngoing+0x18>
 80027ea:	2301      	movs	r3, #1
 80027ec:	e000      	b.n	80027f0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80027ee:	2300      	movs	r3, #0
}
 80027f0:	4618      	mov	r0, r3
 80027f2:	370c      	adds	r7, #12
 80027f4:	46bd      	mov	sp, r7
 80027f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fa:	4770      	bx	lr

080027fc <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80027fc:	b590      	push	{r4, r7, lr}
 80027fe:	b09f      	sub	sp, #124	; 0x7c
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
 8002804:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002806:	2300      	movs	r3, #0
 8002808:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002812:	2b01      	cmp	r3, #1
 8002814:	d101      	bne.n	800281a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002816:	2302      	movs	r3, #2
 8002818:	e0be      	b.n	8002998 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	2201      	movs	r2, #1
 800281e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8002822:	2300      	movs	r3, #0
 8002824:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8002826:	2300      	movs	r3, #0
 8002828:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	4a5c      	ldr	r2, [pc, #368]	; (80029a0 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002830:	4293      	cmp	r3, r2
 8002832:	d102      	bne.n	800283a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002834:	4b5b      	ldr	r3, [pc, #364]	; (80029a4 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002836:	60bb      	str	r3, [r7, #8]
 8002838:	e001      	b.n	800283e <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800283a:	2300      	movs	r3, #0
 800283c:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 800283e:	68bb      	ldr	r3, [r7, #8]
 8002840:	2b00      	cmp	r3, #0
 8002842:	d10b      	bne.n	800285c <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002848:	f043 0220 	orr.w	r2, r3, #32
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2200      	movs	r2, #0
 8002854:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8002858:	2301      	movs	r3, #1
 800285a:	e09d      	b.n	8002998 <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 800285c:	68bb      	ldr	r3, [r7, #8]
 800285e:	4618      	mov	r0, r3
 8002860:	f7ff ffb9 	bl	80027d6 <LL_ADC_REG_IsConversionOngoing>
 8002864:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	4618      	mov	r0, r3
 800286c:	f7ff ffb3 	bl	80027d6 <LL_ADC_REG_IsConversionOngoing>
 8002870:	4603      	mov	r3, r0
 8002872:	2b00      	cmp	r3, #0
 8002874:	d17f      	bne.n	8002976 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8002876:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002878:	2b00      	cmp	r3, #0
 800287a:	d17c      	bne.n	8002976 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	4a47      	ldr	r2, [pc, #284]	; (80029a0 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002882:	4293      	cmp	r3, r2
 8002884:	d004      	beq.n	8002890 <HAL_ADCEx_MultiModeConfigChannel+0x94>
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	4a46      	ldr	r2, [pc, #280]	; (80029a4 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800288c:	4293      	cmp	r3, r2
 800288e:	d101      	bne.n	8002894 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8002890:	4b45      	ldr	r3, [pc, #276]	; (80029a8 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8002892:	e000      	b.n	8002896 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8002894:	4b45      	ldr	r3, [pc, #276]	; (80029ac <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8002896:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	2b00      	cmp	r3, #0
 800289e:	d039      	beq.n	8002914 <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 80028a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80028a2:	689b      	ldr	r3, [r3, #8]
 80028a4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	685b      	ldr	r3, [r3, #4]
 80028ac:	431a      	orrs	r2, r3
 80028ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80028b0:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	4a3a      	ldr	r2, [pc, #232]	; (80029a0 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80028b8:	4293      	cmp	r3, r2
 80028ba:	d004      	beq.n	80028c6 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	4a38      	ldr	r2, [pc, #224]	; (80029a4 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80028c2:	4293      	cmp	r3, r2
 80028c4:	d10e      	bne.n	80028e4 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 80028c6:	4836      	ldr	r0, [pc, #216]	; (80029a0 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80028c8:	f7ff ff72 	bl	80027b0 <LL_ADC_IsEnabled>
 80028cc:	4604      	mov	r4, r0
 80028ce:	4835      	ldr	r0, [pc, #212]	; (80029a4 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80028d0:	f7ff ff6e 	bl	80027b0 <LL_ADC_IsEnabled>
 80028d4:	4603      	mov	r3, r0
 80028d6:	4323      	orrs	r3, r4
 80028d8:	2b00      	cmp	r3, #0
 80028da:	bf0c      	ite	eq
 80028dc:	2301      	moveq	r3, #1
 80028de:	2300      	movne	r3, #0
 80028e0:	b2db      	uxtb	r3, r3
 80028e2:	e008      	b.n	80028f6 <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 80028e4:	4832      	ldr	r0, [pc, #200]	; (80029b0 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 80028e6:	f7ff ff63 	bl	80027b0 <LL_ADC_IsEnabled>
 80028ea:	4603      	mov	r3, r0
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	bf0c      	ite	eq
 80028f0:	2301      	moveq	r3, #1
 80028f2:	2300      	movne	r3, #0
 80028f4:	b2db      	uxtb	r3, r3
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d047      	beq.n	800298a <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80028fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80028fc:	689a      	ldr	r2, [r3, #8]
 80028fe:	4b2d      	ldr	r3, [pc, #180]	; (80029b4 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8002900:	4013      	ands	r3, r2
 8002902:	683a      	ldr	r2, [r7, #0]
 8002904:	6811      	ldr	r1, [r2, #0]
 8002906:	683a      	ldr	r2, [r7, #0]
 8002908:	6892      	ldr	r2, [r2, #8]
 800290a:	430a      	orrs	r2, r1
 800290c:	431a      	orrs	r2, r3
 800290e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002910:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002912:	e03a      	b.n	800298a <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8002914:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002916:	689b      	ldr	r3, [r3, #8]
 8002918:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800291c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800291e:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	4a1e      	ldr	r2, [pc, #120]	; (80029a0 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002926:	4293      	cmp	r3, r2
 8002928:	d004      	beq.n	8002934 <HAL_ADCEx_MultiModeConfigChannel+0x138>
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	4a1d      	ldr	r2, [pc, #116]	; (80029a4 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002930:	4293      	cmp	r3, r2
 8002932:	d10e      	bne.n	8002952 <HAL_ADCEx_MultiModeConfigChannel+0x156>
 8002934:	481a      	ldr	r0, [pc, #104]	; (80029a0 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002936:	f7ff ff3b 	bl	80027b0 <LL_ADC_IsEnabled>
 800293a:	4604      	mov	r4, r0
 800293c:	4819      	ldr	r0, [pc, #100]	; (80029a4 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800293e:	f7ff ff37 	bl	80027b0 <LL_ADC_IsEnabled>
 8002942:	4603      	mov	r3, r0
 8002944:	4323      	orrs	r3, r4
 8002946:	2b00      	cmp	r3, #0
 8002948:	bf0c      	ite	eq
 800294a:	2301      	moveq	r3, #1
 800294c:	2300      	movne	r3, #0
 800294e:	b2db      	uxtb	r3, r3
 8002950:	e008      	b.n	8002964 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8002952:	4817      	ldr	r0, [pc, #92]	; (80029b0 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8002954:	f7ff ff2c 	bl	80027b0 <LL_ADC_IsEnabled>
 8002958:	4603      	mov	r3, r0
 800295a:	2b00      	cmp	r3, #0
 800295c:	bf0c      	ite	eq
 800295e:	2301      	moveq	r3, #1
 8002960:	2300      	movne	r3, #0
 8002962:	b2db      	uxtb	r3, r3
 8002964:	2b00      	cmp	r3, #0
 8002966:	d010      	beq.n	800298a <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002968:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800296a:	689a      	ldr	r2, [r3, #8]
 800296c:	4b11      	ldr	r3, [pc, #68]	; (80029b4 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 800296e:	4013      	ands	r3, r2
 8002970:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002972:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002974:	e009      	b.n	800298a <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800297a:	f043 0220 	orr.w	r2, r3, #32
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002982:	2301      	movs	r3, #1
 8002984:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8002988:	e000      	b.n	800298c <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800298a:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2200      	movs	r2, #0
 8002990:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002994:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8002998:	4618      	mov	r0, r3
 800299a:	377c      	adds	r7, #124	; 0x7c
 800299c:	46bd      	mov	sp, r7
 800299e:	bd90      	pop	{r4, r7, pc}
 80029a0:	40022000 	.word	0x40022000
 80029a4:	40022100 	.word	0x40022100
 80029a8:	40022300 	.word	0x40022300
 80029ac:	58026300 	.word	0x58026300
 80029b0:	58026000 	.word	0x58026000
 80029b4:	fffff0e0 	.word	0xfffff0e0

080029b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029b8:	b480      	push	{r7}
 80029ba:	b085      	sub	sp, #20
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	f003 0307 	and.w	r3, r3, #7
 80029c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80029c8:	4b0b      	ldr	r3, [pc, #44]	; (80029f8 <__NVIC_SetPriorityGrouping+0x40>)
 80029ca:	68db      	ldr	r3, [r3, #12]
 80029cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80029ce:	68ba      	ldr	r2, [r7, #8]
 80029d0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80029d4:	4013      	ands	r3, r2
 80029d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80029dc:	68bb      	ldr	r3, [r7, #8]
 80029de:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80029e0:	4b06      	ldr	r3, [pc, #24]	; (80029fc <__NVIC_SetPriorityGrouping+0x44>)
 80029e2:	4313      	orrs	r3, r2
 80029e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80029e6:	4a04      	ldr	r2, [pc, #16]	; (80029f8 <__NVIC_SetPriorityGrouping+0x40>)
 80029e8:	68bb      	ldr	r3, [r7, #8]
 80029ea:	60d3      	str	r3, [r2, #12]
}
 80029ec:	bf00      	nop
 80029ee:	3714      	adds	r7, #20
 80029f0:	46bd      	mov	sp, r7
 80029f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f6:	4770      	bx	lr
 80029f8:	e000ed00 	.word	0xe000ed00
 80029fc:	05fa0000 	.word	0x05fa0000

08002a00 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002a00:	b480      	push	{r7}
 8002a02:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002a04:	4b04      	ldr	r3, [pc, #16]	; (8002a18 <__NVIC_GetPriorityGrouping+0x18>)
 8002a06:	68db      	ldr	r3, [r3, #12]
 8002a08:	0a1b      	lsrs	r3, r3, #8
 8002a0a:	f003 0307 	and.w	r3, r3, #7
}
 8002a0e:	4618      	mov	r0, r3
 8002a10:	46bd      	mov	sp, r7
 8002a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a16:	4770      	bx	lr
 8002a18:	e000ed00 	.word	0xe000ed00

08002a1c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a1c:	b480      	push	{r7}
 8002a1e:	b083      	sub	sp, #12
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	4603      	mov	r3, r0
 8002a24:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002a26:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	db0b      	blt.n	8002a46 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002a2e:	88fb      	ldrh	r3, [r7, #6]
 8002a30:	f003 021f 	and.w	r2, r3, #31
 8002a34:	4907      	ldr	r1, [pc, #28]	; (8002a54 <__NVIC_EnableIRQ+0x38>)
 8002a36:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002a3a:	095b      	lsrs	r3, r3, #5
 8002a3c:	2001      	movs	r0, #1
 8002a3e:	fa00 f202 	lsl.w	r2, r0, r2
 8002a42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002a46:	bf00      	nop
 8002a48:	370c      	adds	r7, #12
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a50:	4770      	bx	lr
 8002a52:	bf00      	nop
 8002a54:	e000e100 	.word	0xe000e100

08002a58 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002a58:	b480      	push	{r7}
 8002a5a:	b083      	sub	sp, #12
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	4603      	mov	r3, r0
 8002a60:	6039      	str	r1, [r7, #0]
 8002a62:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002a64:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	db0a      	blt.n	8002a82 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a6c:	683b      	ldr	r3, [r7, #0]
 8002a6e:	b2da      	uxtb	r2, r3
 8002a70:	490c      	ldr	r1, [pc, #48]	; (8002aa4 <__NVIC_SetPriority+0x4c>)
 8002a72:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002a76:	0112      	lsls	r2, r2, #4
 8002a78:	b2d2      	uxtb	r2, r2
 8002a7a:	440b      	add	r3, r1
 8002a7c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002a80:	e00a      	b.n	8002a98 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a82:	683b      	ldr	r3, [r7, #0]
 8002a84:	b2da      	uxtb	r2, r3
 8002a86:	4908      	ldr	r1, [pc, #32]	; (8002aa8 <__NVIC_SetPriority+0x50>)
 8002a88:	88fb      	ldrh	r3, [r7, #6]
 8002a8a:	f003 030f 	and.w	r3, r3, #15
 8002a8e:	3b04      	subs	r3, #4
 8002a90:	0112      	lsls	r2, r2, #4
 8002a92:	b2d2      	uxtb	r2, r2
 8002a94:	440b      	add	r3, r1
 8002a96:	761a      	strb	r2, [r3, #24]
}
 8002a98:	bf00      	nop
 8002a9a:	370c      	adds	r7, #12
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa2:	4770      	bx	lr
 8002aa4:	e000e100 	.word	0xe000e100
 8002aa8:	e000ed00 	.word	0xe000ed00

08002aac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002aac:	b480      	push	{r7}
 8002aae:	b089      	sub	sp, #36	; 0x24
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	60f8      	str	r0, [r7, #12]
 8002ab4:	60b9      	str	r1, [r7, #8]
 8002ab6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	f003 0307 	and.w	r3, r3, #7
 8002abe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002ac0:	69fb      	ldr	r3, [r7, #28]
 8002ac2:	f1c3 0307 	rsb	r3, r3, #7
 8002ac6:	2b04      	cmp	r3, #4
 8002ac8:	bf28      	it	cs
 8002aca:	2304      	movcs	r3, #4
 8002acc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002ace:	69fb      	ldr	r3, [r7, #28]
 8002ad0:	3304      	adds	r3, #4
 8002ad2:	2b06      	cmp	r3, #6
 8002ad4:	d902      	bls.n	8002adc <NVIC_EncodePriority+0x30>
 8002ad6:	69fb      	ldr	r3, [r7, #28]
 8002ad8:	3b03      	subs	r3, #3
 8002ada:	e000      	b.n	8002ade <NVIC_EncodePriority+0x32>
 8002adc:	2300      	movs	r3, #0
 8002ade:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ae0:	f04f 32ff 	mov.w	r2, #4294967295
 8002ae4:	69bb      	ldr	r3, [r7, #24]
 8002ae6:	fa02 f303 	lsl.w	r3, r2, r3
 8002aea:	43da      	mvns	r2, r3
 8002aec:	68bb      	ldr	r3, [r7, #8]
 8002aee:	401a      	ands	r2, r3
 8002af0:	697b      	ldr	r3, [r7, #20]
 8002af2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002af4:	f04f 31ff 	mov.w	r1, #4294967295
 8002af8:	697b      	ldr	r3, [r7, #20]
 8002afa:	fa01 f303 	lsl.w	r3, r1, r3
 8002afe:	43d9      	mvns	r1, r3
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b04:	4313      	orrs	r3, r2
         );
}
 8002b06:	4618      	mov	r0, r3
 8002b08:	3724      	adds	r7, #36	; 0x24
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b10:	4770      	bx	lr
	...

08002b14 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	b082      	sub	sp, #8
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	3b01      	subs	r3, #1
 8002b20:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002b24:	d301      	bcc.n	8002b2a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002b26:	2301      	movs	r3, #1
 8002b28:	e00f      	b.n	8002b4a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002b2a:	4a0a      	ldr	r2, [pc, #40]	; (8002b54 <SysTick_Config+0x40>)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	3b01      	subs	r3, #1
 8002b30:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002b32:	210f      	movs	r1, #15
 8002b34:	f04f 30ff 	mov.w	r0, #4294967295
 8002b38:	f7ff ff8e 	bl	8002a58 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002b3c:	4b05      	ldr	r3, [pc, #20]	; (8002b54 <SysTick_Config+0x40>)
 8002b3e:	2200      	movs	r2, #0
 8002b40:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002b42:	4b04      	ldr	r3, [pc, #16]	; (8002b54 <SysTick_Config+0x40>)
 8002b44:	2207      	movs	r2, #7
 8002b46:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002b48:	2300      	movs	r3, #0
}
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	3708      	adds	r7, #8
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	bd80      	pop	{r7, pc}
 8002b52:	bf00      	nop
 8002b54:	e000e010 	.word	0xe000e010

08002b58 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b082      	sub	sp, #8
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002b60:	6878      	ldr	r0, [r7, #4]
 8002b62:	f7ff ff29 	bl	80029b8 <__NVIC_SetPriorityGrouping>
}
 8002b66:	bf00      	nop
 8002b68:	3708      	adds	r7, #8
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	bd80      	pop	{r7, pc}

08002b6e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b6e:	b580      	push	{r7, lr}
 8002b70:	b086      	sub	sp, #24
 8002b72:	af00      	add	r7, sp, #0
 8002b74:	4603      	mov	r3, r0
 8002b76:	60b9      	str	r1, [r7, #8]
 8002b78:	607a      	str	r2, [r7, #4]
 8002b7a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002b7c:	f7ff ff40 	bl	8002a00 <__NVIC_GetPriorityGrouping>
 8002b80:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002b82:	687a      	ldr	r2, [r7, #4]
 8002b84:	68b9      	ldr	r1, [r7, #8]
 8002b86:	6978      	ldr	r0, [r7, #20]
 8002b88:	f7ff ff90 	bl	8002aac <NVIC_EncodePriority>
 8002b8c:	4602      	mov	r2, r0
 8002b8e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002b92:	4611      	mov	r1, r2
 8002b94:	4618      	mov	r0, r3
 8002b96:	f7ff ff5f 	bl	8002a58 <__NVIC_SetPriority>
}
 8002b9a:	bf00      	nop
 8002b9c:	3718      	adds	r7, #24
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	bd80      	pop	{r7, pc}

08002ba2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ba2:	b580      	push	{r7, lr}
 8002ba4:	b082      	sub	sp, #8
 8002ba6:	af00      	add	r7, sp, #0
 8002ba8:	4603      	mov	r3, r0
 8002baa:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002bac:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	f7ff ff33 	bl	8002a1c <__NVIC_EnableIRQ>
}
 8002bb6:	bf00      	nop
 8002bb8:	3708      	adds	r7, #8
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	bd80      	pop	{r7, pc}

08002bbe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002bbe:	b580      	push	{r7, lr}
 8002bc0:	b082      	sub	sp, #8
 8002bc2:	af00      	add	r7, sp, #0
 8002bc4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002bc6:	6878      	ldr	r0, [r7, #4]
 8002bc8:	f7ff ffa4 	bl	8002b14 <SysTick_Config>
 8002bcc:	4603      	mov	r3, r0
}
 8002bce:	4618      	mov	r0, r3
 8002bd0:	3708      	adds	r7, #8
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	bd80      	pop	{r7, pc}
	...

08002bd8 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b098      	sub	sp, #96	; 0x60
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 8002be0:	4a84      	ldr	r2, [pc, #528]	; (8002df4 <HAL_FDCAN_Init+0x21c>)
 8002be2:	f107 030c 	add.w	r3, r7, #12
 8002be6:	4611      	mov	r1, r2
 8002be8:	224c      	movs	r2, #76	; 0x4c
 8002bea:	4618      	mov	r0, r3
 8002bec:	f005 fa82 	bl	80080f4 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d101      	bne.n	8002bfa <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 8002bf6:	2301      	movs	r3, #1
 8002bf8:	e1c6      	b.n	8002f88 <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	4a7e      	ldr	r2, [pc, #504]	; (8002df8 <HAL_FDCAN_Init+0x220>)
 8002c00:	4293      	cmp	r3, r2
 8002c02:	d106      	bne.n	8002c12 <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8002c0c:	461a      	mov	r2, r3
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8002c18:	b2db      	uxtb	r3, r3
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d106      	bne.n	8002c2c <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	2200      	movs	r2, #0
 8002c22:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8002c26:	6878      	ldr	r0, [r7, #4]
 8002c28:	f7fe f808 	bl	8000c3c <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	699a      	ldr	r2, [r3, #24]
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f022 0210 	bic.w	r2, r2, #16
 8002c3a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002c3c:	f7fe f9a8 	bl	8000f90 <HAL_GetTick>
 8002c40:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8002c42:	e014      	b.n	8002c6e <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8002c44:	f7fe f9a4 	bl	8000f90 <HAL_GetTick>
 8002c48:	4602      	mov	r2, r0
 8002c4a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002c4c:	1ad3      	subs	r3, r2, r3
 8002c4e:	2b0a      	cmp	r3, #10
 8002c50:	d90d      	bls.n	8002c6e <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002c58:	f043 0201 	orr.w	r2, r3, #1
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	2203      	movs	r2, #3
 8002c66:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8002c6a:	2301      	movs	r3, #1
 8002c6c:	e18c      	b.n	8002f88 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	699b      	ldr	r3, [r3, #24]
 8002c74:	f003 0308 	and.w	r3, r3, #8
 8002c78:	2b08      	cmp	r3, #8
 8002c7a:	d0e3      	beq.n	8002c44 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	699a      	ldr	r2, [r3, #24]
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f042 0201 	orr.w	r2, r2, #1
 8002c8a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002c8c:	f7fe f980 	bl	8000f90 <HAL_GetTick>
 8002c90:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8002c92:	e014      	b.n	8002cbe <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8002c94:	f7fe f97c 	bl	8000f90 <HAL_GetTick>
 8002c98:	4602      	mov	r2, r0
 8002c9a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002c9c:	1ad3      	subs	r3, r2, r3
 8002c9e:	2b0a      	cmp	r3, #10
 8002ca0:	d90d      	bls.n	8002cbe <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002ca8:	f043 0201 	orr.w	r2, r3, #1
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	2203      	movs	r2, #3
 8002cb6:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8002cba:	2301      	movs	r3, #1
 8002cbc:	e164      	b.n	8002f88 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	699b      	ldr	r3, [r3, #24]
 8002cc4:	f003 0301 	and.w	r3, r3, #1
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d0e3      	beq.n	8002c94 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	699a      	ldr	r2, [r3, #24]
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f042 0202 	orr.w	r2, r2, #2
 8002cda:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	7c1b      	ldrb	r3, [r3, #16]
 8002ce0:	2b01      	cmp	r3, #1
 8002ce2:	d108      	bne.n	8002cf6 <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	699a      	ldr	r2, [r3, #24]
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002cf2:	619a      	str	r2, [r3, #24]
 8002cf4:	e007      	b.n	8002d06 <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	699a      	ldr	r2, [r3, #24]
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002d04:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	7c5b      	ldrb	r3, [r3, #17]
 8002d0a:	2b01      	cmp	r3, #1
 8002d0c:	d108      	bne.n	8002d20 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	699a      	ldr	r2, [r3, #24]
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002d1c:	619a      	str	r2, [r3, #24]
 8002d1e:	e007      	b.n	8002d30 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	699a      	ldr	r2, [r3, #24]
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002d2e:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	7c9b      	ldrb	r3, [r3, #18]
 8002d34:	2b01      	cmp	r3, #1
 8002d36:	d108      	bne.n	8002d4a <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	699a      	ldr	r2, [r3, #24]
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002d46:	619a      	str	r2, [r3, #24]
 8002d48:	e007      	b.n	8002d5a <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	699a      	ldr	r2, [r3, #24]
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002d58:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	699b      	ldr	r3, [r3, #24]
 8002d60:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	689a      	ldr	r2, [r3, #8]
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	430a      	orrs	r2, r1
 8002d6e:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	699a      	ldr	r2, [r3, #24]
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8002d7e:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	691a      	ldr	r2, [r3, #16]
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f022 0210 	bic.w	r2, r2, #16
 8002d8e:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	68db      	ldr	r3, [r3, #12]
 8002d94:	2b01      	cmp	r3, #1
 8002d96:	d108      	bne.n	8002daa <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	699a      	ldr	r2, [r3, #24]
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f042 0204 	orr.w	r2, r2, #4
 8002da6:	619a      	str	r2, [r3, #24]
 8002da8:	e030      	b.n	8002e0c <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	68db      	ldr	r3, [r3, #12]
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d02c      	beq.n	8002e0c <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	68db      	ldr	r3, [r3, #12]
 8002db6:	2b02      	cmp	r3, #2
 8002db8:	d020      	beq.n	8002dfc <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	699a      	ldr	r2, [r3, #24]
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002dc8:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	691a      	ldr	r2, [r3, #16]
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f042 0210 	orr.w	r2, r2, #16
 8002dd8:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	68db      	ldr	r3, [r3, #12]
 8002dde:	2b03      	cmp	r3, #3
 8002de0:	d114      	bne.n	8002e0c <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	699a      	ldr	r2, [r3, #24]
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f042 0220 	orr.w	r2, r2, #32
 8002df0:	619a      	str	r2, [r3, #24]
 8002df2:	e00b      	b.n	8002e0c <HAL_FDCAN_Init+0x234>
 8002df4:	08008138 	.word	0x08008138
 8002df8:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	699a      	ldr	r2, [r3, #24]
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f042 0220 	orr.w	r2, r2, #32
 8002e0a:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	699b      	ldr	r3, [r3, #24]
 8002e10:	3b01      	subs	r3, #1
 8002e12:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	69db      	ldr	r3, [r3, #28]
 8002e18:	3b01      	subs	r3, #1
 8002e1a:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8002e1c:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	6a1b      	ldr	r3, [r3, #32]
 8002e22:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8002e24:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	695b      	ldr	r3, [r3, #20]
 8002e2c:	3b01      	subs	r3, #1
 8002e2e:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8002e34:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8002e36:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	689b      	ldr	r3, [r3, #8]
 8002e3c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002e40:	d115      	bne.n	8002e6e <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e46:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e4c:	3b01      	subs	r3, #1
 8002e4e:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8002e50:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e56:	3b01      	subs	r3, #1
 8002e58:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8002e5a:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e62:	3b01      	subs	r3, #1
 8002e64:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8002e6a:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8002e6c:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d00a      	beq.n	8002e8c <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	430a      	orrs	r2, r1
 8002e88:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e94:	4413      	add	r3, r2
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d011      	beq.n	8002ebe <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8002ea2:	f023 0107 	bic.w	r1, r3, #7
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002eaa:	009b      	lsls	r3, r3, #2
 8002eac:	3360      	adds	r3, #96	; 0x60
 8002eae:	443b      	add	r3, r7
 8002eb0:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	430a      	orrs	r2, r1
 8002eba:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d011      	beq.n	8002eea <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8002ece:	f023 0107 	bic.w	r1, r3, #7
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ed6:	009b      	lsls	r3, r3, #2
 8002ed8:	3360      	adds	r3, #96	; 0x60
 8002eda:	443b      	add	r3, r7
 8002edc:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	430a      	orrs	r2, r1
 8002ee6:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d012      	beq.n	8002f18 <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8002efa:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f02:	009b      	lsls	r3, r3, #2
 8002f04:	3360      	adds	r3, #96	; 0x60
 8002f06:	443b      	add	r3, r7
 8002f08:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8002f0c:	011a      	lsls	r2, r3, #4
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	430a      	orrs	r2, r1
 8002f14:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d012      	beq.n	8002f46 <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8002f28:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f30:	009b      	lsls	r3, r3, #2
 8002f32:	3360      	adds	r3, #96	; 0x60
 8002f34:	443b      	add	r3, r7
 8002f36:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8002f3a:	021a      	lsls	r2, r3, #8
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	430a      	orrs	r2, r1
 8002f42:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	4a11      	ldr	r2, [pc, #68]	; (8002f90 <HAL_FDCAN_Init+0x3b8>)
 8002f4c:	4293      	cmp	r3, r2
 8002f4e:	d107      	bne.n	8002f60 <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	685b      	ldr	r3, [r3, #4]
 8002f54:	689a      	ldr	r2, [r3, #8]
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	685b      	ldr	r3, [r3, #4]
 8002f5a:	f022 0203 	bic.w	r2, r2, #3
 8002f5e:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2200      	movs	r2, #0
 8002f64:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2201      	movs	r2, #1
 8002f74:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8002f78:	6878      	ldr	r0, [r7, #4]
 8002f7a:	f000 fe03 	bl	8003b84 <FDCAN_CalcultateRamBlockAddresses>
 8002f7e:	4603      	mov	r3, r0
 8002f80:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 8002f84:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 8002f88:	4618      	mov	r0, r3
 8002f8a:	3760      	adds	r7, #96	; 0x60
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	bd80      	pop	{r7, pc}
 8002f90:	4000a000 	.word	0x4000a000

08002f94 <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, FDCAN_FilterTypeDef *sFilterConfig)
{
 8002f94:	b480      	push	{r7}
 8002f96:	b087      	sub	sp, #28
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]
 8002f9c:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8002fa4:	73fb      	strb	r3, [r7, #15]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8002fa6:	7bfb      	ldrb	r3, [r7, #15]
 8002fa8:	2b01      	cmp	r3, #1
 8002faa:	d002      	beq.n	8002fb2 <HAL_FDCAN_ConfigFilter+0x1e>
 8002fac:	7bfb      	ldrb	r3, [r7, #15]
 8002fae:	2b02      	cmp	r3, #2
 8002fb0:	d157      	bne.n	8003062 <HAL_FDCAN_ConfigFilter+0xce>
    {
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->RxBufferIndex, 63U));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->IsCalibrationMsg, 1U));
    }

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 8002fb2:	683b      	ldr	r3, [r7, #0]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d12b      	bne.n	8003012 <HAL_FDCAN_ConfigFilter+0x7e>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
        assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 8002fba:	683b      	ldr	r3, [r7, #0]
 8002fbc:	68db      	ldr	r3, [r3, #12]
 8002fbe:	2b07      	cmp	r3, #7
 8002fc0:	d10d      	bne.n	8002fde <HAL_FDCAN_ConfigFilter+0x4a>
      {
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
                           (sFilterConfig->FilterID1 << 16U)       |
 8002fc2:	683b      	ldr	r3, [r7, #0]
 8002fc4:	691b      	ldr	r3, [r3, #16]
 8002fc6:	041a      	lsls	r2, r3, #16
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	69db      	ldr	r3, [r3, #28]
 8002fcc:	021b      	lsls	r3, r3, #8
                           (sFilterConfig->FilterID1 << 16U)       |
 8002fce:	431a      	orrs	r2, r3
                           sFilterConfig->RxBufferIndex);
 8002fd0:	683b      	ldr	r3, [r7, #0]
 8002fd2:	699b      	ldr	r3, [r3, #24]
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 8002fd4:	4313      	orrs	r3, r2
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
 8002fd6:	f043 5360 	orr.w	r3, r3, #939524096	; 0x38000000
 8002fda:	617b      	str	r3, [r7, #20]
 8002fdc:	e00e      	b.n	8002ffc <HAL_FDCAN_ConfigFilter+0x68>
      }
      else
      {
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8002fde:	683b      	ldr	r3, [r7, #0]
 8002fe0:	689b      	ldr	r3, [r3, #8]
 8002fe2:	079a      	lsls	r2, r3, #30
                           (sFilterConfig->FilterConfig << 27U) |
 8002fe4:	683b      	ldr	r3, [r7, #0]
 8002fe6:	68db      	ldr	r3, [r3, #12]
 8002fe8:	06db      	lsls	r3, r3, #27
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8002fea:	431a      	orrs	r2, r3
                           (sFilterConfig->FilterID1 << 16U)    |
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	691b      	ldr	r3, [r3, #16]
 8002ff0:	041b      	lsls	r3, r3, #16
                           (sFilterConfig->FilterConfig << 27U) |
 8002ff2:	431a      	orrs	r2, r3
                           sFilterConfig->FilterID2);
 8002ff4:	683b      	ldr	r3, [r7, #0]
 8002ff6:	695b      	ldr	r3, [r3, #20]
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8002ff8:	4313      	orrs	r3, r2
 8002ffa:	617b      	str	r3, [r7, #20]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * 4U));
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8003000:	683b      	ldr	r3, [r7, #0]
 8003002:	685b      	ldr	r3, [r3, #4]
 8003004:	009b      	lsls	r3, r3, #2
 8003006:	4413      	add	r3, r2
 8003008:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 800300a:	68bb      	ldr	r3, [r7, #8]
 800300c:	697a      	ldr	r2, [r7, #20]
 800300e:	601a      	str	r2, [r3, #0]
 8003010:	e025      	b.n	800305e <HAL_FDCAN_ConfigFilter+0xca>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
        assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 8003012:	683b      	ldr	r3, [r7, #0]
 8003014:	68db      	ldr	r3, [r3, #12]
 8003016:	075a      	lsls	r2, r3, #29
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	691b      	ldr	r3, [r3, #16]
 800301c:	4313      	orrs	r3, r2
 800301e:	617b      	str	r3, [r7, #20]

      /* Build second word of filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 8003020:	683b      	ldr	r3, [r7, #0]
 8003022:	68db      	ldr	r3, [r3, #12]
 8003024:	2b07      	cmp	r3, #7
 8003026:	d103      	bne.n	8003030 <HAL_FDCAN_ConfigFilter+0x9c>
      {
        FilterElementW2 = sFilterConfig->RxBufferIndex;
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	699b      	ldr	r3, [r3, #24]
 800302c:	613b      	str	r3, [r7, #16]
 800302e:	e006      	b.n	800303e <HAL_FDCAN_ConfigFilter+0xaa>
      }
      else
      {
        FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 8003030:	683b      	ldr	r3, [r7, #0]
 8003032:	689b      	ldr	r3, [r3, #8]
 8003034:	079a      	lsls	r2, r3, #30
 8003036:	683b      	ldr	r3, [r7, #0]
 8003038:	695b      	ldr	r3, [r3, #20]
 800303a:	4313      	orrs	r3, r2
 800303c:	613b      	str	r3, [r7, #16]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * 4U * 2U));
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003042:	683b      	ldr	r3, [r7, #0]
 8003044:	685b      	ldr	r3, [r3, #4]
 8003046:	00db      	lsls	r3, r3, #3
 8003048:	4413      	add	r3, r2
 800304a:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 800304c:	68bb      	ldr	r3, [r7, #8]
 800304e:	697a      	ldr	r2, [r7, #20]
 8003050:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 8003052:	68bb      	ldr	r3, [r7, #8]
 8003054:	3304      	adds	r3, #4
 8003056:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 8003058:	68bb      	ldr	r3, [r7, #8]
 800305a:	693a      	ldr	r2, [r7, #16]
 800305c:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 800305e:	2300      	movs	r3, #0
 8003060:	e008      	b.n	8003074 <HAL_FDCAN_ConfigFilter+0xe0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003068:	f043 0202 	orr.w	r2, r3, #2
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8003072:	2301      	movs	r3, #1
  }
}
 8003074:	4618      	mov	r0, r3
 8003076:	371c      	adds	r7, #28
 8003078:	46bd      	mov	sp, r7
 800307a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307e:	4770      	bx	lr

08003080 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8003080:	b480      	push	{r7}
 8003082:	b083      	sub	sp, #12
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800308e:	b2db      	uxtb	r3, r3
 8003090:	2b01      	cmp	r3, #1
 8003092:	d111      	bne.n	80030b8 <HAL_FDCAN_Start+0x38>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2202      	movs	r2, #2
 8003098:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	699a      	ldr	r2, [r3, #24]
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f022 0201 	bic.w	r2, r2, #1
 80030aa:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	2200      	movs	r2, #0
 80030b0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Return function status */
    return HAL_OK;
 80030b4:	2300      	movs	r3, #0
 80030b6:	e008      	b.n	80030ca <HAL_FDCAN_Start+0x4a>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80030be:	f043 0204 	orr.w	r2, r3, #4
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 80030c8:	2301      	movs	r3, #1
  }
}
 80030ca:	4618      	mov	r0, r3
 80030cc:	370c      	adds	r7, #12
 80030ce:	46bd      	mov	sp, r7
 80030d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d4:	4770      	bx	lr

080030d6 <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxHeader pointer to a FDCAN_TxHeaderTypeDef structure.
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData)
{
 80030d6:	b580      	push	{r7, lr}
 80030d8:	b086      	sub	sp, #24
 80030da:	af00      	add	r7, sp, #0
 80030dc:	60f8      	str	r0, [r7, #12]
 80030de:	60b9      	str	r1, [r7, #8]
 80030e0:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80030e8:	b2db      	uxtb	r3, r3
 80030ea:	2b02      	cmp	r3, #2
 80030ec:	d141      	bne.n	8003172 <HAL_FDCAN_AddMessageToTxFifoQ+0x9c>
  {
    /* Check that the Tx FIFO/Queue has an allocated area into the RAM */
    if ((hfdcan->Instance->TXBC & FDCAN_TXBC_TFQS) == 0U)
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80030f6:	f003 537c 	and.w	r3, r3, #1056964608	; 0x3f000000
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d109      	bne.n	8003112 <HAL_FDCAN_AddMessageToTxFifoQ+0x3c>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003104:	f043 0220 	orr.w	r2, r3, #32
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      return HAL_ERROR;
 800310e:	2301      	movs	r3, #1
 8003110:	e038      	b.n	8003184 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }

    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800311a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800311e:	2b00      	cmp	r3, #0
 8003120:	d009      	beq.n	8003136 <HAL_FDCAN_AddMessageToTxFifoQ+0x60>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003128:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      return HAL_ERROR;
 8003132:	2301      	movs	r3, #1
 8003134:	e026      	b.n	8003184 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800313e:	0c1b      	lsrs	r3, r3, #16
 8003140:	f003 031f 	and.w	r3, r3, #31
 8003144:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 8003146:	697b      	ldr	r3, [r7, #20]
 8003148:	687a      	ldr	r2, [r7, #4]
 800314a:	68b9      	ldr	r1, [r7, #8]
 800314c:	68f8      	ldr	r0, [r7, #12]
 800314e:	f000 fe9f 	bl	8003e90 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	2101      	movs	r1, #1
 8003158:	697a      	ldr	r2, [r7, #20]
 800315a:	fa01 f202 	lsl.w	r2, r1, r2
 800315e:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 8003162:	2201      	movs	r2, #1
 8003164:	697b      	ldr	r3, [r7, #20]
 8003166:	409a      	lsls	r2, r3
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    }

    /* Return function status */
    return HAL_OK;
 800316e:	2300      	movs	r3, #0
 8003170:	e008      	b.n	8003184 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003178:	f043 0208 	orr.w	r2, r3, #8
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8003182:	2301      	movs	r3, #1
  }
}
 8003184:	4618      	mov	r0, r3
 8003186:	3718      	adds	r7, #24
 8003188:	46bd      	mov	sp, r7
 800318a:	bd80      	pop	{r7, pc}

0800318c <HAL_FDCAN_GetRxMessage>:
  * @param  pRxHeader pointer to a FDCAN_RxHeaderTypeDef structure.
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation, FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 800318c:	b480      	push	{r7}
 800318e:	b08b      	sub	sp, #44	; 0x2c
 8003190:	af00      	add	r7, sp, #0
 8003192:	60f8      	str	r0, [r7, #12]
 8003194:	60b9      	str	r1, [r7, #8]
 8003196:	607a      	str	r2, [r7, #4]
 8003198:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 800319a:	2300      	movs	r3, #0
 800319c:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80031a4:	76fb      	strb	r3, [r7, #27]

  if (state == HAL_FDCAN_STATE_BUSY)
 80031a6:	7efb      	ldrb	r3, [r7, #27]
 80031a8:	2b02      	cmp	r3, #2
 80031aa:	f040 814b 	bne.w	8003444 <HAL_FDCAN_GetRxMessage+0x2b8>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 80031ae:	68bb      	ldr	r3, [r7, #8]
 80031b0:	2b40      	cmp	r3, #64	; 0x40
 80031b2:	d14d      	bne.n	8003250 <HAL_FDCAN_GetRxMessage+0xc4>
    {
      /* Check that the Rx FIFO 0 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0S) == 0U)
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80031bc:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d109      	bne.n	80031d8 <HAL_FDCAN_GetRxMessage+0x4c>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80031ca:	f043 0220 	orr.w	r2, r3, #32
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 80031d4:	2301      	movs	r3, #1
 80031d6:	e13e      	b.n	8003456 <HAL_FDCAN_GetRxMessage+0x2ca>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80031e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d109      	bne.n	80031fc <HAL_FDCAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80031ee:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 80031f8:	2301      	movs	r3, #1
 80031fa:	e12c      	b.n	8003456 <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on*/
        if(((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003204:	0e1b      	lsrs	r3, r3, #24
 8003206:	f003 0301 	and.w	r3, r3, #1
 800320a:	2b01      	cmp	r3, #1
 800320c:	d10b      	bne.n	8003226 <HAL_FDCAN_GetRxMessage+0x9a>
        {
          if(((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0OM) >> FDCAN_RXF0C_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003216:	0fdb      	lsrs	r3, r3, #31
 8003218:	f003 0301 	and.w	r3, r3, #1
 800321c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003220:	d101      	bne.n	8003226 <HAL_FDCAN_GetRxMessage+0x9a>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8003222:	2301      	movs	r3, #1
 8003224:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index*/
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800322e:	0a1b      	lsrs	r3, r3, #8
 8003230:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003234:	69fa      	ldr	r2, [r7, #28]
 8003236:	4413      	add	r3, r2
 8003238:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * hfdcan->Init.RxFifo0ElmtSize * 4U));
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003242:	69f9      	ldr	r1, [r7, #28]
 8003244:	fb01 f303 	mul.w	r3, r1, r3
 8003248:	009b      	lsls	r3, r3, #2
 800324a:	4413      	add	r3, r2
 800324c:	627b      	str	r3, [r7, #36]	; 0x24
 800324e:	e069      	b.n	8003324 <HAL_FDCAN_GetRxMessage+0x198>
      }
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 8003250:	68bb      	ldr	r3, [r7, #8]
 8003252:	2b41      	cmp	r3, #65	; 0x41
 8003254:	d14d      	bne.n	80032f2 <HAL_FDCAN_GetRxMessage+0x166>
    {
      /* Check that the Rx FIFO 1 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1S) == 0U)
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800325e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003262:	2b00      	cmp	r3, #0
 8003264:	d109      	bne.n	800327a <HAL_FDCAN_GetRxMessage+0xee>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800326c:	f043 0220 	orr.w	r2, r3, #32
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8003276:	2301      	movs	r3, #1
 8003278:	e0ed      	b.n	8003456 <HAL_FDCAN_GetRxMessage+0x2ca>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003282:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003286:	2b00      	cmp	r3, #0
 8003288:	d109      	bne.n	800329e <HAL_FDCAN_GetRxMessage+0x112>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003290:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 800329a:	2301      	movs	r3, #1
 800329c:	e0db      	b.n	8003456 <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on*/
        if(((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80032a6:	0e1b      	lsrs	r3, r3, #24
 80032a8:	f003 0301 	and.w	r3, r3, #1
 80032ac:	2b01      	cmp	r3, #1
 80032ae:	d10b      	bne.n	80032c8 <HAL_FDCAN_GetRxMessage+0x13c>
        {
          if(((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1OM) >> FDCAN_RXF1C_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80032b8:	0fdb      	lsrs	r3, r3, #31
 80032ba:	f003 0301 	and.w	r3, r3, #1
 80032be:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80032c2:	d101      	bne.n	80032c8 <HAL_FDCAN_GetRxMessage+0x13c>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 80032c4:	2301      	movs	r3, #1
 80032c6:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index*/
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80032d0:	0a1b      	lsrs	r3, r3, #8
 80032d2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80032d6:	69fa      	ldr	r2, [r7, #28]
 80032d8:	4413      	add	r3, r2
 80032da:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * hfdcan->Init.RxFifo1ElmtSize * 4U));
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032e4:	69f9      	ldr	r1, [r7, #28]
 80032e6:	fb01 f303 	mul.w	r3, r1, r3
 80032ea:	009b      	lsls	r3, r3, #2
 80032ec:	4413      	add	r3, r2
 80032ee:	627b      	str	r3, [r7, #36]	; 0x24
 80032f0:	e018      	b.n	8003324 <HAL_FDCAN_GetRxMessage+0x198>
      }
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Check that the selected buffer has an allocated area into the RAM */
      if (RxLocation >= hfdcan->Init.RxBuffersNbr)
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80032f6:	68ba      	ldr	r2, [r7, #8]
 80032f8:	429a      	cmp	r2, r3
 80032fa:	d309      	bcc.n	8003310 <HAL_FDCAN_GetRxMessage+0x184>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003302:	f043 0220 	orr.w	r2, r3, #32
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 800330c:	2301      	movs	r3, #1
 800330e:	e0a2      	b.n	8003456 <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Calculate Rx buffer address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxBufferSA + (RxLocation * hfdcan->Init.RxBufferSize * 4U));
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003318:	68b9      	ldr	r1, [r7, #8]
 800331a:	fb01 f303 	mul.w	r3, r1, r3
 800331e:	009b      	lsls	r3, r3, #2
 8003320:	4413      	add	r3, r2
 8003322:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8003324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	685b      	ldr	r3, [r3, #4]
 8003334:	2b00      	cmp	r3, #0
 8003336:	d107      	bne.n	8003348 <HAL_FDCAN_GetRxMessage+0x1bc>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18);
 8003338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	0c9b      	lsrs	r3, r3, #18
 800333e:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	601a      	str	r2, [r3, #0]
 8003346:	e005      	b.n	8003354 <HAL_FDCAN_GetRxMessage+0x1c8>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8003348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8003354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f003 5200 	and.w	r2, r3, #536870912	; 0x20000000
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 8003360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 800336c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800336e:	3304      	adds	r3, #4
 8003370:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8003372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	b29a      	uxth	r2, r3
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = (*RxAddress & FDCAN_ELEMENT_MASK_DLC);
 800337c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f403 2270 	and.w	r2, r3, #983040	; 0xf0000
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8003388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f403 1280 	and.w	r2, r3, #1048576	; 0x100000
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8003394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f403 1200 	and.w	r2, r3, #2097152	; 0x200000
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24);
 80033a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	0e1b      	lsrs	r3, r3, #24
 80033a6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31);
 80033ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	0fda      	lsrs	r2, r3, #31
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 80033b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033ba:	3304      	adds	r3, #4
 80033bc:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 80033be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033c0:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16]; ByteCounter++)
 80033c2:	2300      	movs	r3, #0
 80033c4:	623b      	str	r3, [r7, #32]
 80033c6:	e00a      	b.n	80033de <HAL_FDCAN_GetRxMessage+0x252>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 80033c8:	697a      	ldr	r2, [r7, #20]
 80033ca:	6a3b      	ldr	r3, [r7, #32]
 80033cc:	441a      	add	r2, r3
 80033ce:	6839      	ldr	r1, [r7, #0]
 80033d0:	6a3b      	ldr	r3, [r7, #32]
 80033d2:	440b      	add	r3, r1
 80033d4:	7812      	ldrb	r2, [r2, #0]
 80033d6:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16]; ByteCounter++)
 80033d8:	6a3b      	ldr	r3, [r7, #32]
 80033da:	3301      	adds	r3, #1
 80033dc:	623b      	str	r3, [r7, #32]
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	68db      	ldr	r3, [r3, #12]
 80033e2:	0c1b      	lsrs	r3, r3, #16
 80033e4:	4a1f      	ldr	r2, [pc, #124]	; (8003464 <HAL_FDCAN_GetRxMessage+0x2d8>)
 80033e6:	5cd3      	ldrb	r3, [r2, r3]
 80033e8:	461a      	mov	r2, r3
 80033ea:	6a3b      	ldr	r3, [r7, #32]
 80033ec:	4293      	cmp	r3, r2
 80033ee:	d3eb      	bcc.n	80033c8 <HAL_FDCAN_GetRxMessage+0x23c>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 80033f0:	68bb      	ldr	r3, [r7, #8]
 80033f2:	2b40      	cmp	r3, #64	; 0x40
 80033f4:	d105      	bne.n	8003402 <HAL_FDCAN_GetRxMessage+0x276>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	69fa      	ldr	r2, [r7, #28]
 80033fc:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
 8003400:	e01e      	b.n	8003440 <HAL_FDCAN_GetRxMessage+0x2b4>
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 8003402:	68bb      	ldr	r3, [r7, #8]
 8003404:	2b41      	cmp	r3, #65	; 0x41
 8003406:	d105      	bne.n	8003414 <HAL_FDCAN_GetRxMessage+0x288>
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	69fa      	ldr	r2, [r7, #28]
 800340e:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
 8003412:	e015      	b.n	8003440 <HAL_FDCAN_GetRxMessage+0x2b4>
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Clear the New Data flag of the current Rx buffer */
      if (RxLocation < FDCAN_RX_BUFFER32)
 8003414:	68bb      	ldr	r3, [r7, #8]
 8003416:	2b1f      	cmp	r3, #31
 8003418:	d808      	bhi.n	800342c <HAL_FDCAN_GetRxMessage+0x2a0>
      {
        hfdcan->Instance->NDAT1 = ((uint32_t)1 << RxLocation);
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	2101      	movs	r1, #1
 8003420:	68ba      	ldr	r2, [r7, #8]
 8003422:	fa01 f202 	lsl.w	r2, r1, r2
 8003426:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 800342a:	e009      	b.n	8003440 <HAL_FDCAN_GetRxMessage+0x2b4>
      }
      else /* FDCAN_RX_BUFFER32 <= RxLocation <= FDCAN_RX_BUFFER63 */
      {
        hfdcan->Instance->NDAT2 = ((uint32_t)1 << (RxLocation & 0x1FU));
 800342c:	68bb      	ldr	r3, [r7, #8]
 800342e:	f003 021f 	and.w	r2, r3, #31
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	2101      	movs	r1, #1
 8003438:	fa01 f202 	lsl.w	r2, r1, r2
 800343c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }
    }

    /* Return function status */
    return HAL_OK;
 8003440:	2300      	movs	r3, #0
 8003442:	e008      	b.n	8003456 <HAL_FDCAN_GetRxMessage+0x2ca>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800344a:	f043 0208 	orr.w	r2, r3, #8
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8003454:	2301      	movs	r3, #1
  }
}
 8003456:	4618      	mov	r0, r3
 8003458:	372c      	adds	r7, #44	; 0x2c
 800345a:	46bd      	mov	sp, r7
 800345c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003460:	4770      	bx	lr
 8003462:	bf00      	nop
 8003464:	08008194 	.word	0x08008194

08003468 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_COMPLETE
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs, uint32_t BufferIndexes)
{
 8003468:	b480      	push	{r7}
 800346a:	b087      	sub	sp, #28
 800346c:	af00      	add	r7, sp, #0
 800346e:	60f8      	str	r0, [r7, #12]
 8003470:	60b9      	str	r1, [r7, #8]
 8003472:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800347a:	75fb      	strb	r3, [r7, #23]

  /* Check function parameters */
  assert_param(IS_FDCAN_IT(ActiveITs));

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 800347c:	7dfb      	ldrb	r3, [r7, #23]
 800347e:	2b01      	cmp	r3, #1
 8003480:	d002      	beq.n	8003488 <HAL_FDCAN_ActivateNotification+0x20>
 8003482:	7dfb      	ldrb	r3, [r7, #23]
 8003484:	2b02      	cmp	r3, #2
 8003486:	d155      	bne.n	8003534 <HAL_FDCAN_ActivateNotification+0xcc>
  {
    /* Enable Interrupt lines */
    if ((ActiveITs & hfdcan->Instance->ILS) == 0U)
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800348e:	68bb      	ldr	r3, [r7, #8]
 8003490:	4013      	ands	r3, r2
 8003492:	2b00      	cmp	r3, #0
 8003494:	d108      	bne.n	80034a8 <HAL_FDCAN_ActivateNotification+0x40>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f042 0201 	orr.w	r2, r2, #1
 80034a4:	65da      	str	r2, [r3, #92]	; 0x5c
 80034a6:	e014      	b.n	80034d2 <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else if ((ActiveITs & hfdcan->Instance->ILS) == ActiveITs)
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80034ae:	68bb      	ldr	r3, [r7, #8]
 80034b0:	4013      	ands	r3, r2
 80034b2:	68ba      	ldr	r2, [r7, #8]
 80034b4:	429a      	cmp	r2, r3
 80034b6:	d108      	bne.n	80034ca <HAL_FDCAN_ActivateNotification+0x62>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f042 0202 	orr.w	r2, r2, #2
 80034c6:	65da      	str	r2, [r3, #92]	; 0x5c
 80034c8:	e003      	b.n	80034d2 <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else
    {
      /* Enable Interrupt lines 0 and 1 */
      hfdcan->Instance->ILE = (FDCAN_INTERRUPT_LINE0 | FDCAN_INTERRUPT_LINE1);
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	2203      	movs	r2, #3
 80034d0:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 80034d2:	68bb      	ldr	r3, [r7, #8]
 80034d4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d009      	beq.n	80034f0 <HAL_FDCAN_ActivateNotification+0x88>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f8d3 10e0 	ldr.w	r1, [r3, #224]	; 0xe0
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	687a      	ldr	r2, [r7, #4]
 80034ea:	430a      	orrs	r2, r1
 80034ec:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 80034f0:	68bb      	ldr	r3, [r7, #8]
 80034f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d009      	beq.n	800350e <HAL_FDCAN_ActivateNotification+0xa6>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f8d3 10e4 	ldr.w	r1, [r3, #228]	; 0xe4
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	687a      	ldr	r2, [r7, #4]
 8003508:	430a      	orrs	r2, r1
 800350a:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003514:	68ba      	ldr	r2, [r7, #8]
 8003516:	4b0f      	ldr	r3, [pc, #60]	; (8003554 <HAL_FDCAN_ActivateNotification+0xec>)
 8003518:	4013      	ands	r3, r2
 800351a:	68fa      	ldr	r2, [r7, #12]
 800351c:	6812      	ldr	r2, [r2, #0]
 800351e:	430b      	orrs	r3, r1
 8003520:	6553      	str	r3, [r2, #84]	; 0x54
 8003522:	4b0d      	ldr	r3, [pc, #52]	; (8003558 <HAL_FDCAN_ActivateNotification+0xf0>)
 8003524:	695a      	ldr	r2, [r3, #20]
 8003526:	68bb      	ldr	r3, [r7, #8]
 8003528:	0f9b      	lsrs	r3, r3, #30
 800352a:	490b      	ldr	r1, [pc, #44]	; (8003558 <HAL_FDCAN_ActivateNotification+0xf0>)
 800352c:	4313      	orrs	r3, r2
 800352e:	614b      	str	r3, [r1, #20]

    /* Return function status */
    return HAL_OK;
 8003530:	2300      	movs	r3, #0
 8003532:	e008      	b.n	8003546 <HAL_FDCAN_ActivateNotification+0xde>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800353a:	f043 0202 	orr.w	r2, r3, #2
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8003544:	2301      	movs	r3, #1
  }
}
 8003546:	4618      	mov	r0, r3
 8003548:	371c      	adds	r7, #28
 800354a:	46bd      	mov	sp, r7
 800354c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003550:	4770      	bx	lr
 8003552:	bf00      	nop
 8003554:	3fcfffff 	.word	0x3fcfffff
 8003558:	4000a800 	.word	0x4000a800

0800355c <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 800355c:	b580      	push	{r7, lr}
 800355e:	b092      	sub	sp, #72	; 0x48
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
  uint32_t TTDistErrors;
  uint32_t TTFatalErrors;
  uint32_t SWTime;
  uint32_t SWCycleCount;

  ClkCalibrationITs = (FDCAN_CCU->IR << 30);
 8003564:	4b90      	ldr	r3, [pc, #576]	; (80037a8 <HAL_FDCAN_IRQHandler+0x24c>)
 8003566:	691b      	ldr	r3, [r3, #16]
 8003568:	079b      	lsls	r3, r3, #30
 800356a:	647b      	str	r3, [r7, #68]	; 0x44
  ClkCalibrationITs &= (FDCAN_CCU->IE << 30);
 800356c:	4b8e      	ldr	r3, [pc, #568]	; (80037a8 <HAL_FDCAN_IRQHandler+0x24c>)
 800356e:	695b      	ldr	r3, [r3, #20]
 8003570:	079b      	lsls	r3, r3, #30
 8003572:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003574:	4013      	ands	r3, r2
 8003576:	647b      	str	r3, [r7, #68]	; 0x44
  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800357e:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8003582:	643b      	str	r3, [r7, #64]	; 0x40
  TxEventFifoITs &= hfdcan->Instance->IE;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800358a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800358c:	4013      	ands	r3, r2
 800358e:	643b      	str	r3, [r7, #64]	; 0x40
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003596:	f003 030f 	and.w	r3, r3, #15
 800359a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RxFifo0ITs &= hfdcan->Instance->IE;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035a2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80035a4:	4013      	ands	r3, r2
 80035a6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035ae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80035b2:	63bb      	str	r3, [r7, #56]	; 0x38
  RxFifo1ITs &= hfdcan->Instance->IE;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035ba:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80035bc:	4013      	ands	r3, r2
 80035be:	63bb      	str	r3, [r7, #56]	; 0x38
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035c6:	f003 5371 	and.w	r3, r3, #1010827264	; 0x3c400000
 80035ca:	637b      	str	r3, [r7, #52]	; 0x34
  Errors &= hfdcan->Instance->IE;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035d2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80035d4:	4013      	ands	r3, r2
 80035d6:	637b      	str	r3, [r7, #52]	; 0x34
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035de:	f003 7360 	and.w	r3, r3, #58720256	; 0x3800000
 80035e2:	633b      	str	r3, [r7, #48]	; 0x30
  ErrorStatusITs &= hfdcan->Instance->IE;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035ea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80035ec:	4013      	ands	r3, r2
 80035ee:	633b      	str	r3, [r7, #48]	; 0x30

  /* High Priority Message interrupt management *******************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != 0U)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d011      	beq.n	8003622 <HAL_FDCAN_IRQHandler+0xc6>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != 0U)
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003604:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003608:	2b00      	cmp	r3, #0
 800360a:	d00a      	beq.n	8003622 <HAL_FDCAN_IRQHandler+0xc6>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003614:	651a      	str	r2, [r3, #80]	; 0x50
 8003616:	4b64      	ldr	r3, [pc, #400]	; (80037a8 <HAL_FDCAN_IRQHandler+0x24c>)
 8003618:	2200      	movs	r2, #0
 800361a:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 800361c:	6878      	ldr	r0, [r7, #4]
 800361e:	f000 fa65 	bl	8003aec <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003628:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800362c:	2b00      	cmp	r3, #0
 800362e:	d01e      	beq.n	800366e <HAL_FDCAN_IRQHandler+0x112>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE) != 0U)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003636:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800363a:	2b00      	cmp	r3, #0
 800363c:	d017      	beq.n	800366e <HAL_FDCAN_IRQHandler+0x112>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8003646:	62fb      	str	r3, [r7, #44]	; 0x2c
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8003650:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003652:	4013      	ands	r3, r2
 8003654:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800365e:	651a      	str	r2, [r3, #80]	; 0x50
 8003660:	4b51      	ldr	r3, [pc, #324]	; (80037a8 <HAL_FDCAN_IRQHandler+0x24c>)
 8003662:	2200      	movs	r2, #0
 8003664:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8003666:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003668:	6878      	ldr	r0, [r7, #4]
 800366a:	f000 fa16 	bl	8003a9a <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Clock calibration unit interrupts management *****************************/
  if (ClkCalibrationITs != 0U)
 800366e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003670:	2b00      	cmp	r3, #0
 8003672:	d00d      	beq.n	8003690 <HAL_FDCAN_IRQHandler+0x134>
  {
    /* Clear the Clock Calibration flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ClkCalibrationITs);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681a      	ldr	r2, [r3, #0]
 8003678:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800367a:	4b4c      	ldr	r3, [pc, #304]	; (80037ac <HAL_FDCAN_IRQHandler+0x250>)
 800367c:	400b      	ands	r3, r1
 800367e:	6513      	str	r3, [r2, #80]	; 0x50
 8003680:	4a49      	ldr	r2, [pc, #292]	; (80037a8 <HAL_FDCAN_IRQHandler+0x24c>)
 8003682:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003684:	0f9b      	lsrs	r3, r3, #30
 8003686:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
#else
    /* Clock Calibration Callback */
    HAL_FDCAN_ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
 8003688:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800368a:	6878      	ldr	r0, [r7, #4]
 800368c:	f000 f9c4 	bl	8003a18 <HAL_FDCAN_ClockCalibrationCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8003690:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003692:	2b00      	cmp	r3, #0
 8003694:	d00d      	beq.n	80036b2 <HAL_FDCAN_IRQHandler+0x156>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681a      	ldr	r2, [r3, #0]
 800369a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800369c:	4b43      	ldr	r3, [pc, #268]	; (80037ac <HAL_FDCAN_IRQHandler+0x250>)
 800369e:	400b      	ands	r3, r1
 80036a0:	6513      	str	r3, [r2, #80]	; 0x50
 80036a2:	4a41      	ldr	r2, [pc, #260]	; (80037a8 <HAL_FDCAN_IRQHandler+0x24c>)
 80036a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80036a6:	0f9b      	lsrs	r3, r3, #30
 80036a8:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 80036aa:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80036ac:	6878      	ldr	r0, [r7, #4]
 80036ae:	f000 f9be 	bl	8003a2e <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 80036b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d00d      	beq.n	80036d4 <HAL_FDCAN_IRQHandler+0x178>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681a      	ldr	r2, [r3, #0]
 80036bc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80036be:	4b3b      	ldr	r3, [pc, #236]	; (80037ac <HAL_FDCAN_IRQHandler+0x250>)
 80036c0:	400b      	ands	r3, r1
 80036c2:	6513      	str	r3, [r2, #80]	; 0x50
 80036c4:	4a38      	ldr	r2, [pc, #224]	; (80037a8 <HAL_FDCAN_IRQHandler+0x24c>)
 80036c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80036c8:	0f9b      	lsrs	r3, r3, #30
 80036ca:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 80036cc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80036ce:	6878      	ldr	r0, [r7, #4]
 80036d0:	f000 f9b8 	bl	8003a44 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 80036d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d00d      	beq.n	80036f6 <HAL_FDCAN_IRQHandler+0x19a>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681a      	ldr	r2, [r3, #0]
 80036de:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80036e0:	4b32      	ldr	r3, [pc, #200]	; (80037ac <HAL_FDCAN_IRQHandler+0x250>)
 80036e2:	400b      	ands	r3, r1
 80036e4:	6513      	str	r3, [r2, #80]	; 0x50
 80036e6:	4a30      	ldr	r2, [pc, #192]	; (80037a8 <HAL_FDCAN_IRQHandler+0x24c>)
 80036e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036ea:	0f9b      	lsrs	r3, r3, #30
 80036ec:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 80036ee:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80036f0:	6878      	ldr	r0, [r7, #4]
 80036f2:	f000 f9b2 	bl	8003a5a <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_FIFO_EMPTY) != 0U)
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036fc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003700:	2b00      	cmp	r3, #0
 8003702:	d011      	beq.n	8003728 <HAL_FDCAN_IRQHandler+0x1cc>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY) != 0U)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800370a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800370e:	2b00      	cmp	r3, #0
 8003710:	d00a      	beq.n	8003728 <HAL_FDCAN_IRQHandler+0x1cc>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800371a:	651a      	str	r2, [r3, #80]	; 0x50
 800371c:	4b22      	ldr	r3, [pc, #136]	; (80037a8 <HAL_FDCAN_IRQHandler+0x24c>)
 800371e:	2200      	movs	r2, #0
 8003720:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8003722:	6878      	ldr	r0, [r7, #4]
 8003724:	f000 f9a4 	bl	8003a70 <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_COMPLETE) != 0U)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800372e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003732:	2b00      	cmp	r3, #0
 8003734:	d01e      	beq.n	8003774 <HAL_FDCAN_IRQHandler+0x218>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE) != 0U)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800373c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003740:	2b00      	cmp	r3, #0
 8003742:	d017      	beq.n	8003774 <HAL_FDCAN_IRQHandler+0x218>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800374c:	62bb      	str	r3, [r7, #40]	; 0x28
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003756:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003758:	4013      	ands	r3, r2
 800375a:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003764:	651a      	str	r2, [r3, #80]	; 0x50
 8003766:	4b10      	ldr	r3, [pc, #64]	; (80037a8 <HAL_FDCAN_IRQHandler+0x24c>)
 8003768:	2200      	movs	r2, #0
 800376a:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 800376c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800376e:	6878      	ldr	r0, [r7, #4]
 8003770:	f000 f988 	bl	8003a84 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Rx Buffer New Message interrupt management *******************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RX_BUFFER_NEW_MESSAGE) != 0U)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800377a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800377e:	2b00      	cmp	r3, #0
 8003780:	d016      	beq.n	80037b0 <HAL_FDCAN_IRQHandler+0x254>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE) != 0U)
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003788:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800378c:	2b00      	cmp	r3, #0
 800378e:	d00f      	beq.n	80037b0 <HAL_FDCAN_IRQHandler+0x254>
    {
      /* Clear the Rx Buffer New Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8003798:	651a      	str	r2, [r3, #80]	; 0x50
 800379a:	4b03      	ldr	r3, [pc, #12]	; (80037a8 <HAL_FDCAN_IRQHandler+0x24c>)
 800379c:	2200      	movs	r2, #0
 800379e:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->RxBufferNewMessageCallback(hfdcan);
#else
      /* Rx Buffer New Message Callback */
      HAL_FDCAN_RxBufferNewMessageCallback(hfdcan);
 80037a0:	6878      	ldr	r0, [r7, #4]
 80037a2:	f000 f985 	bl	8003ab0 <HAL_FDCAN_RxBufferNewMessageCallback>
 80037a6:	e003      	b.n	80037b0 <HAL_FDCAN_IRQHandler+0x254>
 80037a8:	4000a800 	.word	0x4000a800
 80037ac:	3fcfffff 	.word	0x3fcfffff
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMESTAMP_WRAPAROUND) != 0U)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d011      	beq.n	80037e2 <HAL_FDCAN_IRQHandler+0x286>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != 0U)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d00a      	beq.n	80037e2 <HAL_FDCAN_IRQHandler+0x286>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80037d4:	651a      	str	r2, [r3, #80]	; 0x50
 80037d6:	4b8d      	ldr	r3, [pc, #564]	; (8003a0c <HAL_FDCAN_IRQHandler+0x4b0>)
 80037d8:	2200      	movs	r2, #0
 80037da:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 80037dc:	6878      	ldr	r0, [r7, #4]
 80037de:	f000 f971 	bl	8003ac4 <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMEOUT_OCCURRED) != 0U)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037e8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d011      	beq.n	8003814 <HAL_FDCAN_IRQHandler+0x2b8>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED) != 0U)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037f6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d00a      	beq.n	8003814 <HAL_FDCAN_IRQHandler+0x2b8>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8003806:	651a      	str	r2, [r3, #80]	; 0x50
 8003808:	4b80      	ldr	r3, [pc, #512]	; (8003a0c <HAL_FDCAN_IRQHandler+0x4b0>)
 800380a:	2200      	movs	r2, #0
 800380c:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 800380e:	6878      	ldr	r0, [r7, #4]
 8003810:	f000 f962 	bl	8003ad8 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RAM_ACCESS_FAILURE) != 0U)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800381a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800381e:	2b00      	cmp	r3, #0
 8003820:	d016      	beq.n	8003850 <HAL_FDCAN_IRQHandler+0x2f4>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE) != 0U)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003828:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800382c:	2b00      	cmp	r3, #0
 800382e:	d00f      	beq.n	8003850 <HAL_FDCAN_IRQHandler+0x2f4>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003838:	651a      	str	r2, [r3, #80]	; 0x50
 800383a:	4b74      	ldr	r3, [pc, #464]	; (8003a0c <HAL_FDCAN_IRQHandler+0x4b0>)
 800383c:	2200      	movs	r2, #0
 800383e:	611a      	str	r2, [r3, #16]

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003846:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8003850:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003852:	2b00      	cmp	r3, #0
 8003854:	d00d      	beq.n	8003872 <HAL_FDCAN_IRQHandler+0x316>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681a      	ldr	r2, [r3, #0]
 800385a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800385c:	4b6c      	ldr	r3, [pc, #432]	; (8003a10 <HAL_FDCAN_IRQHandler+0x4b4>)
 800385e:	400b      	ands	r3, r1
 8003860:	6513      	str	r3, [r2, #80]	; 0x50
 8003862:	4a6a      	ldr	r2, [pc, #424]	; (8003a0c <HAL_FDCAN_IRQHandler+0x4b0>)
 8003864:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003866:	0f9b      	lsrs	r3, r3, #30
 8003868:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 800386a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800386c:	6878      	ldr	r0, [r7, #4]
 800386e:	f000 f951 	bl	8003b14 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8003872:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003874:	2b00      	cmp	r3, #0
 8003876:	d011      	beq.n	800389c <HAL_FDCAN_IRQHandler+0x340>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681a      	ldr	r2, [r3, #0]
 800387c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800387e:	4b64      	ldr	r3, [pc, #400]	; (8003a10 <HAL_FDCAN_IRQHandler+0x4b4>)
 8003880:	400b      	ands	r3, r1
 8003882:	6513      	str	r3, [r2, #80]	; 0x50
 8003884:	4a61      	ldr	r2, [pc, #388]	; (8003a0c <HAL_FDCAN_IRQHandler+0x4b0>)
 8003886:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003888:	0f9b      	lsrs	r3, r3, #30
 800388a:	6113      	str	r3, [r2, #16]

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8003892:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003894:	431a      	orrs	r2, r3
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  }

  if (hfdcan->Instance == FDCAN1)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	4a5c      	ldr	r2, [pc, #368]	; (8003a14 <HAL_FDCAN_IRQHandler+0x4b8>)
 80038a2:	4293      	cmp	r3, r2
 80038a4:	f040 80a6 	bne.w	80039f4 <HAL_FDCAN_IRQHandler+0x498>
  {
    if ((hfdcan->ttcan->TTOCF & FDCAN_TTOCF_OM) != 0U)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	685b      	ldr	r3, [r3, #4]
 80038ac:	689b      	ldr	r3, [r3, #8]
 80038ae:	f003 0303 	and.w	r3, r3, #3
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	f000 809e 	beq.w	80039f4 <HAL_FDCAN_IRQHandler+0x498>
    {
      TTSchedSyncITs = hfdcan->ttcan->TTIR & FDCAN_TT_SCHEDULE_SYNC_MASK;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	685b      	ldr	r3, [r3, #4]
 80038bc:	6a1b      	ldr	r3, [r3, #32]
 80038be:	f003 030f 	and.w	r3, r3, #15
 80038c2:	627b      	str	r3, [r7, #36]	; 0x24
      TTSchedSyncITs &= hfdcan->ttcan->TTIE;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	685b      	ldr	r3, [r3, #4]
 80038c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038cc:	4013      	ands	r3, r2
 80038ce:	627b      	str	r3, [r7, #36]	; 0x24
      TTTimeMarkITs = hfdcan->ttcan->TTIR & FDCAN_TT_TIME_MARK_MASK;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	685b      	ldr	r3, [r3, #4]
 80038d4:	6a1b      	ldr	r3, [r3, #32]
 80038d6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80038da:	623b      	str	r3, [r7, #32]
      TTTimeMarkITs &= hfdcan->ttcan->TTIE;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	685b      	ldr	r3, [r3, #4]
 80038e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038e2:	6a3a      	ldr	r2, [r7, #32]
 80038e4:	4013      	ands	r3, r2
 80038e6:	623b      	str	r3, [r7, #32]
      TTGlobTimeITs = hfdcan->ttcan->TTIR & FDCAN_TT_GLOBAL_TIME_MASK;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	685b      	ldr	r3, [r3, #4]
 80038ec:	6a1b      	ldr	r3, [r3, #32]
 80038ee:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 80038f2:	61fb      	str	r3, [r7, #28]
      TTGlobTimeITs &= hfdcan->ttcan->TTIE;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	685b      	ldr	r3, [r3, #4]
 80038f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038fa:	69fa      	ldr	r2, [r7, #28]
 80038fc:	4013      	ands	r3, r2
 80038fe:	61fb      	str	r3, [r7, #28]
      TTDistErrors = hfdcan->ttcan->TTIR & FDCAN_TT_DISTURBING_ERROR_MASK;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	685b      	ldr	r3, [r3, #4]
 8003904:	6a1b      	ldr	r3, [r3, #32]
 8003906:	f403 43fc 	and.w	r3, r3, #32256	; 0x7e00
 800390a:	61bb      	str	r3, [r7, #24]
      TTDistErrors &= hfdcan->ttcan->TTIE;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	685b      	ldr	r3, [r3, #4]
 8003910:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003912:	69ba      	ldr	r2, [r7, #24]
 8003914:	4013      	ands	r3, r2
 8003916:	61bb      	str	r3, [r7, #24]
      TTFatalErrors = hfdcan->ttcan->TTIR & FDCAN_TT_FATAL_ERROR_MASK;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	685b      	ldr	r3, [r3, #4]
 800391c:	6a1b      	ldr	r3, [r3, #32]
 800391e:	f403 23f0 	and.w	r3, r3, #491520	; 0x78000
 8003922:	617b      	str	r3, [r7, #20]
      TTFatalErrors &= hfdcan->ttcan->TTIE;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	685b      	ldr	r3, [r3, #4]
 8003928:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800392a:	697a      	ldr	r2, [r7, #20]
 800392c:	4013      	ands	r3, r2
 800392e:	617b      	str	r3, [r7, #20]

      /* TT Schedule Synchronization interrupts management **********************/
      if (TTSchedSyncITs != 0U)
 8003930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003932:	2b00      	cmp	r3, #0
 8003934:	d007      	beq.n	8003946 <HAL_FDCAN_IRQHandler+0x3ea>
      {
        /* Clear the TT Schedule Synchronization flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTSchedSyncITs);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	685b      	ldr	r3, [r3, #4]
 800393a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800393c:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
#else
        /* TT Schedule Synchronization Callback */
        HAL_FDCAN_TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
 800393e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003940:	6878      	ldr	r0, [r7, #4]
 8003942:	f000 f8f2 	bl	8003b2a <HAL_FDCAN_TT_ScheduleSyncCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Time Mark interrupts management *************************************/
      if (TTTimeMarkITs != 0U)
 8003946:	6a3b      	ldr	r3, [r7, #32]
 8003948:	2b00      	cmp	r3, #0
 800394a:	d007      	beq.n	800395c <HAL_FDCAN_IRQHandler+0x400>
      {
        /* Clear the TT Time Mark flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTTimeMarkITs);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	685b      	ldr	r3, [r3, #4]
 8003950:	6a3a      	ldr	r2, [r7, #32]
 8003952:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
#else
        /* TT Time Mark Callback */
        HAL_FDCAN_TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
 8003954:	6a39      	ldr	r1, [r7, #32]
 8003956:	6878      	ldr	r0, [r7, #4]
 8003958:	f000 f8f2 	bl	8003b40 <HAL_FDCAN_TT_TimeMarkCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Stop Watch interrupt management *************************************/
      if (__HAL_FDCAN_TT_GET_IT_SOURCE(hfdcan, FDCAN_TT_IT_STOP_WATCH) != 0U)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	685b      	ldr	r3, [r3, #4]
 8003960:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003962:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003966:	2b00      	cmp	r3, #0
 8003968:	d01b      	beq.n	80039a2 <HAL_FDCAN_IRQHandler+0x446>
      {
        if (__HAL_FDCAN_TT_GET_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH) != 0U)
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	685b      	ldr	r3, [r3, #4]
 800396e:	6a1b      	ldr	r3, [r3, #32]
 8003970:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003974:	2b00      	cmp	r3, #0
 8003976:	d014      	beq.n	80039a2 <HAL_FDCAN_IRQHandler+0x446>
        {
          /* Retrieve Stop watch Time and Cycle count */
          SWTime = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_SWV) >> FDCAN_TTCPT_SWV_Pos);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	685b      	ldr	r3, [r3, #4]
 800397c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800397e:	0c1b      	lsrs	r3, r3, #16
 8003980:	b29b      	uxth	r3, r3
 8003982:	613b      	str	r3, [r7, #16]
          SWCycleCount = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_CCV) >> FDCAN_TTCPT_CCV_Pos);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	685b      	ldr	r3, [r3, #4]
 8003988:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800398a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800398e:	60fb      	str	r3, [r7, #12]

          /* Clear the TT Stop Watch flag */
          __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	685b      	ldr	r3, [r3, #4]
 8003994:	2240      	movs	r2, #64	; 0x40
 8003996:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hfdcan->TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
#else
          /* TT Stop Watch Callback */
          HAL_FDCAN_TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
 8003998:	68fa      	ldr	r2, [r7, #12]
 800399a:	6939      	ldr	r1, [r7, #16]
 800399c:	6878      	ldr	r0, [r7, #4]
 800399e:	f000 f8da 	bl	8003b56 <HAL_FDCAN_TT_StopWatchCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
        }
      }

      /* TT Global Time interrupts management ***********************************/
      if (TTGlobTimeITs != 0U)
 80039a2:	69fb      	ldr	r3, [r7, #28]
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d007      	beq.n	80039b8 <HAL_FDCAN_IRQHandler+0x45c>
      {
        /* Clear the TT Global Time flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTGlobTimeITs);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	685b      	ldr	r3, [r3, #4]
 80039ac:	69fa      	ldr	r2, [r7, #28]
 80039ae:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
#else
        /* TT Global Time Callback */
        HAL_FDCAN_TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
 80039b0:	69f9      	ldr	r1, [r7, #28]
 80039b2:	6878      	ldr	r0, [r7, #4]
 80039b4:	f000 f8db 	bl	8003b6e <HAL_FDCAN_TT_GlobalTimeCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Disturbing Error interrupts management ******************************/
      if (TTDistErrors != 0U)
 80039b8:	69bb      	ldr	r3, [r7, #24]
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d00b      	beq.n	80039d6 <HAL_FDCAN_IRQHandler+0x47a>
      {
        /* Clear the TT Disturbing Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTDistErrors);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	685b      	ldr	r3, [r3, #4]
 80039c2:	69ba      	ldr	r2, [r7, #24]
 80039c4:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTDistErrors;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 80039cc:	69bb      	ldr	r3, [r7, #24]
 80039ce:	431a      	orrs	r2, r3
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }

      /* TT Fatal Error interrupts management ***********************************/
      if (TTFatalErrors != 0U)
 80039d6:	697b      	ldr	r3, [r7, #20]
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d00b      	beq.n	80039f4 <HAL_FDCAN_IRQHandler+0x498>
      {
        /* Clear the TT Fatal Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTFatalErrors);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	685b      	ldr	r3, [r3, #4]
 80039e0:	697a      	ldr	r2, [r7, #20]
 80039e2:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTFatalErrors;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 80039ea:	697b      	ldr	r3, [r7, #20]
 80039ec:	431a      	orrs	r2, r3
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }
    }
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d002      	beq.n	8003a04 <HAL_FDCAN_IRQHandler+0x4a8>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 80039fe:	6878      	ldr	r0, [r7, #4]
 8003a00:	f000 f87e 	bl	8003b00 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8003a04:	bf00      	nop
 8003a06:	3748      	adds	r7, #72	; 0x48
 8003a08:	46bd      	mov	sp, r7
 8003a0a:	bd80      	pop	{r7, pc}
 8003a0c:	4000a800 	.word	0x4000a800
 8003a10:	3fcfffff 	.word	0x3fcfffff
 8003a14:	4000a000 	.word	0x4000a000

08003a18 <HAL_FDCAN_ClockCalibrationCallback>:
  * @param  ClkCalibrationITs indicates which Clock Calibration interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Clock_Calibration_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ClockCalibrationCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ClkCalibrationITs)
{
 8003a18:	b480      	push	{r7}
 8003a1a:	b083      	sub	sp, #12
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
 8003a20:	6039      	str	r1, [r7, #0]
  UNUSED(ClkCalibrationITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ClockCalibrationCallback could be implemented in the user file
   */
}
 8003a22:	bf00      	nop
 8003a24:	370c      	adds	r7, #12
 8003a26:	46bd      	mov	sp, r7
 8003a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2c:	4770      	bx	lr

08003a2e <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8003a2e:	b480      	push	{r7}
 8003a30:	b083      	sub	sp, #12
 8003a32:	af00      	add	r7, sp, #0
 8003a34:	6078      	str	r0, [r7, #4]
 8003a36:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8003a38:	bf00      	nop
 8003a3a:	370c      	adds	r7, #12
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a42:	4770      	bx	lr

08003a44 <HAL_FDCAN_RxFifo0Callback>:
  * @param  RxFifo0ITs indicates which Rx FIFO 0 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo0_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 8003a44:	b480      	push	{r7}
 8003a46:	b083      	sub	sp, #12
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]
 8003a4c:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo0ITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo0Callback could be implemented in the user file
   */
}
 8003a4e:	bf00      	nop
 8003a50:	370c      	adds	r7, #12
 8003a52:	46bd      	mov	sp, r7
 8003a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a58:	4770      	bx	lr

08003a5a <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8003a5a:	b480      	push	{r7}
 8003a5c:	b083      	sub	sp, #12
 8003a5e:	af00      	add	r7, sp, #0
 8003a60:	6078      	str	r0, [r7, #4]
 8003a62:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 8003a64:	bf00      	nop
 8003a66:	370c      	adds	r7, #12
 8003a68:	46bd      	mov	sp, r7
 8003a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6e:	4770      	bx	lr

08003a70 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8003a70:	b480      	push	{r7}
 8003a72:	b083      	sub	sp, #12
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8003a78:	bf00      	nop
 8003a7a:	370c      	adds	r7, #12
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a82:	4770      	bx	lr

08003a84 <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8003a84:	b480      	push	{r7}
 8003a86:	b083      	sub	sp, #12
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	6078      	str	r0, [r7, #4]
 8003a8c:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8003a8e:	bf00      	nop
 8003a90:	370c      	adds	r7, #12
 8003a92:	46bd      	mov	sp, r7
 8003a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a98:	4770      	bx	lr

08003a9a <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8003a9a:	b480      	push	{r7}
 8003a9c:	b083      	sub	sp, #12
 8003a9e:	af00      	add	r7, sp, #0
 8003aa0:	6078      	str	r0, [r7, #4]
 8003aa2:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8003aa4:	bf00      	nop
 8003aa6:	370c      	adds	r7, #12
 8003aa8:	46bd      	mov	sp, r7
 8003aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aae:	4770      	bx	lr

08003ab0 <HAL_FDCAN_RxBufferNewMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_RxBufferNewMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8003ab0:	b480      	push	{r7}
 8003ab2:	b083      	sub	sp, #12
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxBufferNewMessageCallback could be implemented in the user file
   */
}
 8003ab8:	bf00      	nop
 8003aba:	370c      	adds	r7, #12
 8003abc:	46bd      	mov	sp, r7
 8003abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac2:	4770      	bx	lr

08003ac4 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8003ac4:	b480      	push	{r7}
 8003ac6:	b083      	sub	sp, #12
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8003acc:	bf00      	nop
 8003ace:	370c      	adds	r7, #12
 8003ad0:	46bd      	mov	sp, r7
 8003ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad6:	4770      	bx	lr

08003ad8 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8003ad8:	b480      	push	{r7}
 8003ada:	b083      	sub	sp, #12
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8003ae0:	bf00      	nop
 8003ae2:	370c      	adds	r7, #12
 8003ae4:	46bd      	mov	sp, r7
 8003ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aea:	4770      	bx	lr

08003aec <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8003aec:	b480      	push	{r7}
 8003aee:	b083      	sub	sp, #12
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8003af4:	bf00      	nop
 8003af6:	370c      	adds	r7, #12
 8003af8:	46bd      	mov	sp, r7
 8003afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afe:	4770      	bx	lr

08003b00 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8003b00:	b480      	push	{r7}
 8003b02:	b083      	sub	sp, #12
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8003b08:	bf00      	nop
 8003b0a:	370c      	adds	r7, #12
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b12:	4770      	bx	lr

08003b14 <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8003b14:	b480      	push	{r7}
 8003b16:	b083      	sub	sp, #12
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	6078      	str	r0, [r7, #4]
 8003b1c:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8003b1e:	bf00      	nop
 8003b20:	370c      	adds	r7, #12
 8003b22:	46bd      	mov	sp, r7
 8003b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b28:	4770      	bx	lr

08003b2a <HAL_FDCAN_TT_ScheduleSyncCallback>:
  * @param  TTSchedSyncITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTScheduleSynchronization_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_ScheduleSyncCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTSchedSyncITs)
{
 8003b2a:	b480      	push	{r7}
 8003b2c:	b083      	sub	sp, #12
 8003b2e:	af00      	add	r7, sp, #0
 8003b30:	6078      	str	r0, [r7, #4]
 8003b32:	6039      	str	r1, [r7, #0]
  UNUSED(TTSchedSyncITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_ScheduleSyncCallback could be implemented in the user file
   */
}
 8003b34:	bf00      	nop
 8003b36:	370c      	adds	r7, #12
 8003b38:	46bd      	mov	sp, r7
 8003b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3e:	4770      	bx	lr

08003b40 <HAL_FDCAN_TT_TimeMarkCallback>:
  * @param  TTTimeMarkITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTTimeMark_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_TimeMarkCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTTimeMarkITs)
{
 8003b40:	b480      	push	{r7}
 8003b42:	b083      	sub	sp, #12
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	6078      	str	r0, [r7, #4]
 8003b48:	6039      	str	r1, [r7, #0]
  UNUSED(TTTimeMarkITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_TimeMarkCallback could be implemented in the user file
   */
}
 8003b4a:	bf00      	nop
 8003b4c:	370c      	adds	r7, #12
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b54:	4770      	bx	lr

08003b56 <HAL_FDCAN_TT_StopWatchCallback>:
  * @param  SWCycleCount Cycle count value captured together with SWTime.
  *         This parameter is a number between 0 and 0x3F.
  * @retval None
  */
__weak void HAL_FDCAN_TT_StopWatchCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t SWTime, uint32_t SWCycleCount)
{
 8003b56:	b480      	push	{r7}
 8003b58:	b085      	sub	sp, #20
 8003b5a:	af00      	add	r7, sp, #0
 8003b5c:	60f8      	str	r0, [r7, #12]
 8003b5e:	60b9      	str	r1, [r7, #8]
 8003b60:	607a      	str	r2, [r7, #4]
  UNUSED(SWCycleCount);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_StopWatchCallback could be implemented in the user file
   */
}
 8003b62:	bf00      	nop
 8003b64:	3714      	adds	r7, #20
 8003b66:	46bd      	mov	sp, r7
 8003b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6c:	4770      	bx	lr

08003b6e <HAL_FDCAN_TT_GlobalTimeCallback>:
  * @param  TTGlobTimeITs indicates which TT Global Time interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTGlobalTime_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_GlobalTimeCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTGlobTimeITs)
{
 8003b6e:	b480      	push	{r7}
 8003b70:	b083      	sub	sp, #12
 8003b72:	af00      	add	r7, sp, #0
 8003b74:	6078      	str	r0, [r7, #4]
 8003b76:	6039      	str	r1, [r7, #0]
  UNUSED(TTGlobTimeITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_GlobalTimeCallback could be implemented in the user file
   */
}
 8003b78:	bf00      	nop
 8003b7a:	370c      	adds	r7, #12
 8003b7c:	46bd      	mov	sp, r7
 8003b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b82:	4770      	bx	lr

08003b84 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8003b84:	b480      	push	{r7}
 8003b86:	b085      	sub	sp, #20
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b90:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8003b9a:	4ba7      	ldr	r3, [pc, #668]	; (8003e38 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8003b9c:	4013      	ands	r3, r2
 8003b9e:	68ba      	ldr	r2, [r7, #8]
 8003ba0:	0091      	lsls	r1, r2, #2
 8003ba2:	687a      	ldr	r2, [r7, #4]
 8003ba4:	6812      	ldr	r2, [r2, #0]
 8003ba6:	430b      	orrs	r3, r1
 8003ba8:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003bb4:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bbc:	041a      	lsls	r2, r3, #16
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	430a      	orrs	r2, r1
 8003bc4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bcc:	68ba      	ldr	r2, [r7, #8]
 8003bce:	4413      	add	r3, r2
 8003bd0:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003bda:	4b97      	ldr	r3, [pc, #604]	; (8003e38 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8003bdc:	4013      	ands	r3, r2
 8003bde:	68ba      	ldr	r2, [r7, #8]
 8003be0:	0091      	lsls	r1, r2, #2
 8003be2:	687a      	ldr	r2, [r7, #4]
 8003be4:	6812      	ldr	r2, [r2, #0]
 8003be6:	430b      	orrs	r3, r1
 8003be8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bf4:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bfc:	041a      	lsls	r2, r3, #16
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	430a      	orrs	r2, r1
 8003c04:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c0c:	005b      	lsls	r3, r3, #1
 8003c0e:	68ba      	ldr	r2, [r7, #8]
 8003c10:	4413      	add	r3, r2
 8003c12:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8003c1c:	4b86      	ldr	r3, [pc, #536]	; (8003e38 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8003c1e:	4013      	ands	r3, r2
 8003c20:	68ba      	ldr	r2, [r7, #8]
 8003c22:	0091      	lsls	r1, r2, #2
 8003c24:	687a      	ldr	r2, [r7, #4]
 8003c26:	6812      	ldr	r2, [r2, #0]
 8003c28:	430b      	orrs	r3, r1
 8003c2a:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003c36:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c3e:	041a      	lsls	r2, r3, #16
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	430a      	orrs	r2, r1
 8003c46:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c4e:	687a      	ldr	r2, [r7, #4]
 8003c50:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8003c52:	fb02 f303 	mul.w	r3, r2, r3
 8003c56:	68ba      	ldr	r2, [r7, #8]
 8003c58:	4413      	add	r3, r2
 8003c5a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8003c64:	4b74      	ldr	r3, [pc, #464]	; (8003e38 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8003c66:	4013      	ands	r3, r2
 8003c68:	68ba      	ldr	r2, [r7, #8]
 8003c6a:	0091      	lsls	r1, r2, #2
 8003c6c:	687a      	ldr	r2, [r7, #4]
 8003c6e:	6812      	ldr	r2, [r2, #0]
 8003c70:	430b      	orrs	r3, r1
 8003c72:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003c7e:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c86:	041a      	lsls	r2, r3, #16
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	430a      	orrs	r2, r1
 8003c8e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c96:	687a      	ldr	r2, [r7, #4]
 8003c98:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8003c9a:	fb02 f303 	mul.w	r3, r2, r3
 8003c9e:	68ba      	ldr	r2, [r7, #8]
 8003ca0:	4413      	add	r3, r2
 8003ca2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8003cac:	4b62      	ldr	r3, [pc, #392]	; (8003e38 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8003cae:	4013      	ands	r3, r2
 8003cb0:	68ba      	ldr	r2, [r7, #8]
 8003cb2:	0091      	lsls	r1, r2, #2
 8003cb4:	687a      	ldr	r2, [r7, #4]
 8003cb6:	6812      	ldr	r2, [r2, #0]
 8003cb8:	430b      	orrs	r3, r1
 8003cba:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003cc2:	687a      	ldr	r2, [r7, #4]
 8003cc4:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8003cc6:	fb02 f303 	mul.w	r3, r2, r3
 8003cca:	68ba      	ldr	r2, [r7, #8]
 8003ccc:	4413      	add	r3, r2
 8003cce:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8003cd8:	4b57      	ldr	r3, [pc, #348]	; (8003e38 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8003cda:	4013      	ands	r3, r2
 8003cdc:	68ba      	ldr	r2, [r7, #8]
 8003cde:	0091      	lsls	r1, r2, #2
 8003ce0:	687a      	ldr	r2, [r7, #4]
 8003ce2:	6812      	ldr	r2, [r2, #0]
 8003ce4:	430b      	orrs	r3, r1
 8003ce6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003cf2:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cfa:	041a      	lsls	r2, r3, #16
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	430a      	orrs	r2, r1
 8003d02:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d0a:	005b      	lsls	r3, r3, #1
 8003d0c:	68ba      	ldr	r2, [r7, #8]
 8003d0e:	4413      	add	r3, r2
 8003d10:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8003d1a:	4b47      	ldr	r3, [pc, #284]	; (8003e38 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8003d1c:	4013      	ands	r3, r2
 8003d1e:	68ba      	ldr	r2, [r7, #8]
 8003d20:	0091      	lsls	r1, r2, #2
 8003d22:	687a      	ldr	r2, [r7, #4]
 8003d24:	6812      	ldr	r2, [r2, #0]
 8003d26:	430b      	orrs	r3, r1
 8003d28:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8003d34:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d3c:	041a      	lsls	r2, r3, #16
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	430a      	orrs	r2, r1
 8003d44:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8003d50:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d58:	061a      	lsls	r2, r3, #24
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	430a      	orrs	r2, r1
 8003d60:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003d68:	4b34      	ldr	r3, [pc, #208]	; (8003e3c <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 8003d6a:	4413      	add	r3, r2
 8003d6c:	009a      	lsls	r2, r3, #2
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d7a:	009b      	lsls	r3, r3, #2
 8003d7c:	441a      	add	r2, r3
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d8a:	00db      	lsls	r3, r3, #3
 8003d8c:	441a      	add	r2, r3
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d9a:	6879      	ldr	r1, [r7, #4]
 8003d9c:	6c49      	ldr	r1, [r1, #68]	; 0x44
 8003d9e:	fb01 f303 	mul.w	r3, r1, r3
 8003da2:	009b      	lsls	r3, r3, #2
 8003da4:	441a      	add	r2, r3
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003db2:	6879      	ldr	r1, [r7, #4]
 8003db4:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 8003db6:	fb01 f303 	mul.w	r3, r1, r3
 8003dba:	009b      	lsls	r3, r3, #2
 8003dbc:	441a      	add	r2, r3
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003dca:	6879      	ldr	r1, [r7, #4]
 8003dcc:	6d49      	ldr	r1, [r1, #84]	; 0x54
 8003dce:	fb01 f303 	mul.w	r3, r1, r3
 8003dd2:	009b      	lsls	r3, r3, #2
 8003dd4:	441a      	add	r2, r3
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003de6:	00db      	lsls	r3, r3, #3
 8003de8:	441a      	add	r2, r3
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003dfa:	6879      	ldr	r1, [r7, #4]
 8003dfc:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8003dfe:	fb01 f303 	mul.w	r3, r1, r3
 8003e02:	009b      	lsls	r3, r3, #2
 8003e04:	441a      	add	r2, r3
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e16:	6879      	ldr	r1, [r7, #4]
 8003e18:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8003e1a:	fb01 f303 	mul.w	r3, r1, r3
 8003e1e:	009b      	lsls	r3, r3, #2
 8003e20:	441a      	add	r2, r3
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e2e:	4a04      	ldr	r2, [pc, #16]	; (8003e40 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8003e30:	4293      	cmp	r3, r2
 8003e32:	d915      	bls.n	8003e60 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8003e34:	e006      	b.n	8003e44 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 8003e36:	bf00      	nop
 8003e38:	ffff0003 	.word	0xffff0003
 8003e3c:	10002b00 	.word	0x10002b00
 8003e40:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003e4a:	f043 0220 	orr.w	r2, r3, #32
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	2203      	movs	r2, #3
 8003e58:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 8003e5c:	2301      	movs	r3, #1
 8003e5e:	e010      	b.n	8003e82 <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003e64:	60fb      	str	r3, [r7, #12]
 8003e66:	e005      	b.n	8003e74 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	2200      	movs	r2, #0
 8003e6c:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	3304      	adds	r3, #4
 8003e72:	60fb      	str	r3, [r7, #12]
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e7a:	68fa      	ldr	r2, [r7, #12]
 8003e7c:	429a      	cmp	r2, r3
 8003e7e:	d3f3      	bcc.n	8003e68 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8003e80:	2300      	movs	r3, #0
}
 8003e82:	4618      	mov	r0, r3
 8003e84:	3714      	adds	r7, #20
 8003e86:	46bd      	mov	sp, r7
 8003e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8c:	4770      	bx	lr
 8003e8e:	bf00      	nop

08003e90 <FDCAN_CopyMessageToRAM>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @param  BufferIndex index of the buffer to be configured.
  * @retval HAL status
 */
static void FDCAN_CopyMessageToRAM(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData, uint32_t BufferIndex)
{
 8003e90:	b480      	push	{r7}
 8003e92:	b089      	sub	sp, #36	; 0x24
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	60f8      	str	r0, [r7, #12]
 8003e98:	60b9      	str	r1, [r7, #8]
 8003e9a:	607a      	str	r2, [r7, #4]
 8003e9c:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8003e9e:	68bb      	ldr	r3, [r7, #8]
 8003ea0:	685b      	ldr	r3, [r3, #4]
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d10a      	bne.n	8003ebc <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8003ea6:	68bb      	ldr	r3, [r7, #8]
 8003ea8:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 8003eaa:	68bb      	ldr	r3, [r7, #8]
 8003eac:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 8003eae:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18));
 8003eb0:	68bb      	ldr	r3, [r7, #8]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8003eb6:	4313      	orrs	r3, r2
 8003eb8:	61fb      	str	r3, [r7, #28]
 8003eba:	e00a      	b.n	8003ed2 <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8003ebc:	68bb      	ldr	r3, [r7, #8]
 8003ebe:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8003ec0:	68bb      	ldr	r3, [r7, #8]
 8003ec2:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8003ec4:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 8003ec6:	68bb      	ldr	r3, [r7, #8]
 8003ec8:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 8003eca:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8003ecc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003ed0:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
 8003ed2:	68bb      	ldr	r3, [r7, #8]
 8003ed4:	6a1b      	ldr	r3, [r3, #32]
 8003ed6:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 8003ed8:	68bb      	ldr	r3, [r7, #8]
 8003eda:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
 8003edc:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 8003ede:	68bb      	ldr	r3, [r7, #8]
 8003ee0:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 8003ee2:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 8003ee4:	68bb      	ldr	r3, [r7, #8]
 8003ee6:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 8003ee8:	431a      	orrs	r2, r3
                 pTxHeader->DataLength);
 8003eea:	68bb      	ldr	r3, [r7, #8]
 8003eec:	68db      	ldr	r3, [r3, #12]
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
 8003eee:	4313      	orrs	r3, r2
 8003ef0:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxBufferSA + (BufferIndex * hfdcan->Init.TxElmtSize * 4U));
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003efc:	6839      	ldr	r1, [r7, #0]
 8003efe:	fb01 f303 	mul.w	r3, r1, r3
 8003f02:	009b      	lsls	r3, r3, #2
 8003f04:	4413      	add	r3, r2
 8003f06:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 8003f08:	69bb      	ldr	r3, [r7, #24]
 8003f0a:	69fa      	ldr	r2, [r7, #28]
 8003f0c:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8003f0e:	69bb      	ldr	r3, [r7, #24]
 8003f10:	3304      	adds	r3, #4
 8003f12:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 8003f14:	69bb      	ldr	r3, [r7, #24]
 8003f16:	693a      	ldr	r2, [r7, #16]
 8003f18:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8003f1a:	69bb      	ldr	r3, [r7, #24]
 8003f1c:	3304      	adds	r3, #4
 8003f1e:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16]; ByteCounter += 4U)
 8003f20:	2300      	movs	r3, #0
 8003f22:	617b      	str	r3, [r7, #20]
 8003f24:	e020      	b.n	8003f68 <FDCAN_CopyMessageToRAM+0xd8>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
 8003f26:	697b      	ldr	r3, [r7, #20]
 8003f28:	3303      	adds	r3, #3
 8003f2a:	687a      	ldr	r2, [r7, #4]
 8003f2c:	4413      	add	r3, r2
 8003f2e:	781b      	ldrb	r3, [r3, #0]
 8003f30:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16) |
 8003f32:	697b      	ldr	r3, [r7, #20]
 8003f34:	3302      	adds	r3, #2
 8003f36:	6879      	ldr	r1, [r7, #4]
 8003f38:	440b      	add	r3, r1
 8003f3a:	781b      	ldrb	r3, [r3, #0]
 8003f3c:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
 8003f3e:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8) |
 8003f40:	697b      	ldr	r3, [r7, #20]
 8003f42:	3301      	adds	r3, #1
 8003f44:	6879      	ldr	r1, [r7, #4]
 8003f46:	440b      	add	r3, r1
 8003f48:	781b      	ldrb	r3, [r3, #0]
 8003f4a:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16) |
 8003f4c:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 8003f4e:	6879      	ldr	r1, [r7, #4]
 8003f50:	697a      	ldr	r2, [r7, #20]
 8003f52:	440a      	add	r2, r1
 8003f54:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8) |
 8003f56:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
 8003f58:	69bb      	ldr	r3, [r7, #24]
 8003f5a:	601a      	str	r2, [r3, #0]
    TxAddress++;
 8003f5c:	69bb      	ldr	r3, [r7, #24]
 8003f5e:	3304      	adds	r3, #4
 8003f60:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16]; ByteCounter += 4U)
 8003f62:	697b      	ldr	r3, [r7, #20]
 8003f64:	3304      	adds	r3, #4
 8003f66:	617b      	str	r3, [r7, #20]
 8003f68:	68bb      	ldr	r3, [r7, #8]
 8003f6a:	68db      	ldr	r3, [r3, #12]
 8003f6c:	0c1b      	lsrs	r3, r3, #16
 8003f6e:	4a06      	ldr	r2, [pc, #24]	; (8003f88 <FDCAN_CopyMessageToRAM+0xf8>)
 8003f70:	5cd3      	ldrb	r3, [r2, r3]
 8003f72:	461a      	mov	r2, r3
 8003f74:	697b      	ldr	r3, [r7, #20]
 8003f76:	4293      	cmp	r3, r2
 8003f78:	d3d5      	bcc.n	8003f26 <FDCAN_CopyMessageToRAM+0x96>
  }
}
 8003f7a:	bf00      	nop
 8003f7c:	bf00      	nop
 8003f7e:	3724      	adds	r7, #36	; 0x24
 8003f80:	46bd      	mov	sp, r7
 8003f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f86:	4770      	bx	lr
 8003f88:	08008194 	.word	0x08008194

08003f8c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003f8c:	b480      	push	{r7}
 8003f8e:	b089      	sub	sp, #36	; 0x24
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	6078      	str	r0, [r7, #4]
 8003f94:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003f96:	2300      	movs	r3, #0
 8003f98:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8003f9a:	4b89      	ldr	r3, [pc, #548]	; (80041c0 <HAL_GPIO_Init+0x234>)
 8003f9c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003f9e:	e194      	b.n	80042ca <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003fa0:	683b      	ldr	r3, [r7, #0]
 8003fa2:	681a      	ldr	r2, [r3, #0]
 8003fa4:	2101      	movs	r1, #1
 8003fa6:	69fb      	ldr	r3, [r7, #28]
 8003fa8:	fa01 f303 	lsl.w	r3, r1, r3
 8003fac:	4013      	ands	r3, r2
 8003fae:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8003fb0:	693b      	ldr	r3, [r7, #16]
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	f000 8186 	beq.w	80042c4 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003fb8:	683b      	ldr	r3, [r7, #0]
 8003fba:	685b      	ldr	r3, [r3, #4]
 8003fbc:	2b01      	cmp	r3, #1
 8003fbe:	d00b      	beq.n	8003fd8 <HAL_GPIO_Init+0x4c>
 8003fc0:	683b      	ldr	r3, [r7, #0]
 8003fc2:	685b      	ldr	r3, [r3, #4]
 8003fc4:	2b02      	cmp	r3, #2
 8003fc6:	d007      	beq.n	8003fd8 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003fc8:	683b      	ldr	r3, [r7, #0]
 8003fca:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003fcc:	2b11      	cmp	r3, #17
 8003fce:	d003      	beq.n	8003fd8 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003fd0:	683b      	ldr	r3, [r7, #0]
 8003fd2:	685b      	ldr	r3, [r3, #4]
 8003fd4:	2b12      	cmp	r3, #18
 8003fd6:	d130      	bne.n	800403a <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	689b      	ldr	r3, [r3, #8]
 8003fdc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003fde:	69fb      	ldr	r3, [r7, #28]
 8003fe0:	005b      	lsls	r3, r3, #1
 8003fe2:	2203      	movs	r2, #3
 8003fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8003fe8:	43db      	mvns	r3, r3
 8003fea:	69ba      	ldr	r2, [r7, #24]
 8003fec:	4013      	ands	r3, r2
 8003fee:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003ff0:	683b      	ldr	r3, [r7, #0]
 8003ff2:	68da      	ldr	r2, [r3, #12]
 8003ff4:	69fb      	ldr	r3, [r7, #28]
 8003ff6:	005b      	lsls	r3, r3, #1
 8003ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8003ffc:	69ba      	ldr	r2, [r7, #24]
 8003ffe:	4313      	orrs	r3, r2
 8004000:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	69ba      	ldr	r2, [r7, #24]
 8004006:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	685b      	ldr	r3, [r3, #4]
 800400c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800400e:	2201      	movs	r2, #1
 8004010:	69fb      	ldr	r3, [r7, #28]
 8004012:	fa02 f303 	lsl.w	r3, r2, r3
 8004016:	43db      	mvns	r3, r3
 8004018:	69ba      	ldr	r2, [r7, #24]
 800401a:	4013      	ands	r3, r2
 800401c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800401e:	683b      	ldr	r3, [r7, #0]
 8004020:	685b      	ldr	r3, [r3, #4]
 8004022:	091b      	lsrs	r3, r3, #4
 8004024:	f003 0201 	and.w	r2, r3, #1
 8004028:	69fb      	ldr	r3, [r7, #28]
 800402a:	fa02 f303 	lsl.w	r3, r2, r3
 800402e:	69ba      	ldr	r2, [r7, #24]
 8004030:	4313      	orrs	r3, r2
 8004032:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	69ba      	ldr	r2, [r7, #24]
 8004038:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	68db      	ldr	r3, [r3, #12]
 800403e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004040:	69fb      	ldr	r3, [r7, #28]
 8004042:	005b      	lsls	r3, r3, #1
 8004044:	2203      	movs	r2, #3
 8004046:	fa02 f303 	lsl.w	r3, r2, r3
 800404a:	43db      	mvns	r3, r3
 800404c:	69ba      	ldr	r2, [r7, #24]
 800404e:	4013      	ands	r3, r2
 8004050:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004052:	683b      	ldr	r3, [r7, #0]
 8004054:	689a      	ldr	r2, [r3, #8]
 8004056:	69fb      	ldr	r3, [r7, #28]
 8004058:	005b      	lsls	r3, r3, #1
 800405a:	fa02 f303 	lsl.w	r3, r2, r3
 800405e:	69ba      	ldr	r2, [r7, #24]
 8004060:	4313      	orrs	r3, r2
 8004062:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	69ba      	ldr	r2, [r7, #24]
 8004068:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800406a:	683b      	ldr	r3, [r7, #0]
 800406c:	685b      	ldr	r3, [r3, #4]
 800406e:	2b02      	cmp	r3, #2
 8004070:	d003      	beq.n	800407a <HAL_GPIO_Init+0xee>
 8004072:	683b      	ldr	r3, [r7, #0]
 8004074:	685b      	ldr	r3, [r3, #4]
 8004076:	2b12      	cmp	r3, #18
 8004078:	d123      	bne.n	80040c2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800407a:	69fb      	ldr	r3, [r7, #28]
 800407c:	08da      	lsrs	r2, r3, #3
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	3208      	adds	r2, #8
 8004082:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004086:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004088:	69fb      	ldr	r3, [r7, #28]
 800408a:	f003 0307 	and.w	r3, r3, #7
 800408e:	009b      	lsls	r3, r3, #2
 8004090:	220f      	movs	r2, #15
 8004092:	fa02 f303 	lsl.w	r3, r2, r3
 8004096:	43db      	mvns	r3, r3
 8004098:	69ba      	ldr	r2, [r7, #24]
 800409a:	4013      	ands	r3, r2
 800409c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800409e:	683b      	ldr	r3, [r7, #0]
 80040a0:	691a      	ldr	r2, [r3, #16]
 80040a2:	69fb      	ldr	r3, [r7, #28]
 80040a4:	f003 0307 	and.w	r3, r3, #7
 80040a8:	009b      	lsls	r3, r3, #2
 80040aa:	fa02 f303 	lsl.w	r3, r2, r3
 80040ae:	69ba      	ldr	r2, [r7, #24]
 80040b0:	4313      	orrs	r3, r2
 80040b2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80040b4:	69fb      	ldr	r3, [r7, #28]
 80040b6:	08da      	lsrs	r2, r3, #3
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	3208      	adds	r2, #8
 80040bc:	69b9      	ldr	r1, [r7, #24]
 80040be:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80040c8:	69fb      	ldr	r3, [r7, #28]
 80040ca:	005b      	lsls	r3, r3, #1
 80040cc:	2203      	movs	r2, #3
 80040ce:	fa02 f303 	lsl.w	r3, r2, r3
 80040d2:	43db      	mvns	r3, r3
 80040d4:	69ba      	ldr	r2, [r7, #24]
 80040d6:	4013      	ands	r3, r2
 80040d8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80040da:	683b      	ldr	r3, [r7, #0]
 80040dc:	685b      	ldr	r3, [r3, #4]
 80040de:	f003 0203 	and.w	r2, r3, #3
 80040e2:	69fb      	ldr	r3, [r7, #28]
 80040e4:	005b      	lsls	r3, r3, #1
 80040e6:	fa02 f303 	lsl.w	r3, r2, r3
 80040ea:	69ba      	ldr	r2, [r7, #24]
 80040ec:	4313      	orrs	r3, r2
 80040ee:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	69ba      	ldr	r2, [r7, #24]
 80040f4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80040f6:	683b      	ldr	r3, [r7, #0]
 80040f8:	685b      	ldr	r3, [r3, #4]
 80040fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040fe:	2b00      	cmp	r3, #0
 8004100:	f000 80e0 	beq.w	80042c4 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004104:	4b2f      	ldr	r3, [pc, #188]	; (80041c4 <HAL_GPIO_Init+0x238>)
 8004106:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800410a:	4a2e      	ldr	r2, [pc, #184]	; (80041c4 <HAL_GPIO_Init+0x238>)
 800410c:	f043 0302 	orr.w	r3, r3, #2
 8004110:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8004114:	4b2b      	ldr	r3, [pc, #172]	; (80041c4 <HAL_GPIO_Init+0x238>)
 8004116:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800411a:	f003 0302 	and.w	r3, r3, #2
 800411e:	60fb      	str	r3, [r7, #12]
 8004120:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004122:	4a29      	ldr	r2, [pc, #164]	; (80041c8 <HAL_GPIO_Init+0x23c>)
 8004124:	69fb      	ldr	r3, [r7, #28]
 8004126:	089b      	lsrs	r3, r3, #2
 8004128:	3302      	adds	r3, #2
 800412a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800412e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004130:	69fb      	ldr	r3, [r7, #28]
 8004132:	f003 0303 	and.w	r3, r3, #3
 8004136:	009b      	lsls	r3, r3, #2
 8004138:	220f      	movs	r2, #15
 800413a:	fa02 f303 	lsl.w	r3, r2, r3
 800413e:	43db      	mvns	r3, r3
 8004140:	69ba      	ldr	r2, [r7, #24]
 8004142:	4013      	ands	r3, r2
 8004144:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	4a20      	ldr	r2, [pc, #128]	; (80041cc <HAL_GPIO_Init+0x240>)
 800414a:	4293      	cmp	r3, r2
 800414c:	d052      	beq.n	80041f4 <HAL_GPIO_Init+0x268>
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	4a1f      	ldr	r2, [pc, #124]	; (80041d0 <HAL_GPIO_Init+0x244>)
 8004152:	4293      	cmp	r3, r2
 8004154:	d031      	beq.n	80041ba <HAL_GPIO_Init+0x22e>
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	4a1e      	ldr	r2, [pc, #120]	; (80041d4 <HAL_GPIO_Init+0x248>)
 800415a:	4293      	cmp	r3, r2
 800415c:	d02b      	beq.n	80041b6 <HAL_GPIO_Init+0x22a>
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	4a1d      	ldr	r2, [pc, #116]	; (80041d8 <HAL_GPIO_Init+0x24c>)
 8004162:	4293      	cmp	r3, r2
 8004164:	d025      	beq.n	80041b2 <HAL_GPIO_Init+0x226>
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	4a1c      	ldr	r2, [pc, #112]	; (80041dc <HAL_GPIO_Init+0x250>)
 800416a:	4293      	cmp	r3, r2
 800416c:	d01f      	beq.n	80041ae <HAL_GPIO_Init+0x222>
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	4a1b      	ldr	r2, [pc, #108]	; (80041e0 <HAL_GPIO_Init+0x254>)
 8004172:	4293      	cmp	r3, r2
 8004174:	d019      	beq.n	80041aa <HAL_GPIO_Init+0x21e>
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	4a1a      	ldr	r2, [pc, #104]	; (80041e4 <HAL_GPIO_Init+0x258>)
 800417a:	4293      	cmp	r3, r2
 800417c:	d013      	beq.n	80041a6 <HAL_GPIO_Init+0x21a>
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	4a19      	ldr	r2, [pc, #100]	; (80041e8 <HAL_GPIO_Init+0x25c>)
 8004182:	4293      	cmp	r3, r2
 8004184:	d00d      	beq.n	80041a2 <HAL_GPIO_Init+0x216>
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	4a18      	ldr	r2, [pc, #96]	; (80041ec <HAL_GPIO_Init+0x260>)
 800418a:	4293      	cmp	r3, r2
 800418c:	d007      	beq.n	800419e <HAL_GPIO_Init+0x212>
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	4a17      	ldr	r2, [pc, #92]	; (80041f0 <HAL_GPIO_Init+0x264>)
 8004192:	4293      	cmp	r3, r2
 8004194:	d101      	bne.n	800419a <HAL_GPIO_Init+0x20e>
 8004196:	2309      	movs	r3, #9
 8004198:	e02d      	b.n	80041f6 <HAL_GPIO_Init+0x26a>
 800419a:	230a      	movs	r3, #10
 800419c:	e02b      	b.n	80041f6 <HAL_GPIO_Init+0x26a>
 800419e:	2308      	movs	r3, #8
 80041a0:	e029      	b.n	80041f6 <HAL_GPIO_Init+0x26a>
 80041a2:	2307      	movs	r3, #7
 80041a4:	e027      	b.n	80041f6 <HAL_GPIO_Init+0x26a>
 80041a6:	2306      	movs	r3, #6
 80041a8:	e025      	b.n	80041f6 <HAL_GPIO_Init+0x26a>
 80041aa:	2305      	movs	r3, #5
 80041ac:	e023      	b.n	80041f6 <HAL_GPIO_Init+0x26a>
 80041ae:	2304      	movs	r3, #4
 80041b0:	e021      	b.n	80041f6 <HAL_GPIO_Init+0x26a>
 80041b2:	2303      	movs	r3, #3
 80041b4:	e01f      	b.n	80041f6 <HAL_GPIO_Init+0x26a>
 80041b6:	2302      	movs	r3, #2
 80041b8:	e01d      	b.n	80041f6 <HAL_GPIO_Init+0x26a>
 80041ba:	2301      	movs	r3, #1
 80041bc:	e01b      	b.n	80041f6 <HAL_GPIO_Init+0x26a>
 80041be:	bf00      	nop
 80041c0:	58000080 	.word	0x58000080
 80041c4:	58024400 	.word	0x58024400
 80041c8:	58000400 	.word	0x58000400
 80041cc:	58020000 	.word	0x58020000
 80041d0:	58020400 	.word	0x58020400
 80041d4:	58020800 	.word	0x58020800
 80041d8:	58020c00 	.word	0x58020c00
 80041dc:	58021000 	.word	0x58021000
 80041e0:	58021400 	.word	0x58021400
 80041e4:	58021800 	.word	0x58021800
 80041e8:	58021c00 	.word	0x58021c00
 80041ec:	58022000 	.word	0x58022000
 80041f0:	58022400 	.word	0x58022400
 80041f4:	2300      	movs	r3, #0
 80041f6:	69fa      	ldr	r2, [r7, #28]
 80041f8:	f002 0203 	and.w	r2, r2, #3
 80041fc:	0092      	lsls	r2, r2, #2
 80041fe:	4093      	lsls	r3, r2
 8004200:	69ba      	ldr	r2, [r7, #24]
 8004202:	4313      	orrs	r3, r2
 8004204:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004206:	4938      	ldr	r1, [pc, #224]	; (80042e8 <HAL_GPIO_Init+0x35c>)
 8004208:	69fb      	ldr	r3, [r7, #28]
 800420a:	089b      	lsrs	r3, r3, #2
 800420c:	3302      	adds	r3, #2
 800420e:	69ba      	ldr	r2, [r7, #24]
 8004210:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8004214:	697b      	ldr	r3, [r7, #20]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800421a:	693b      	ldr	r3, [r7, #16]
 800421c:	43db      	mvns	r3, r3
 800421e:	69ba      	ldr	r2, [r7, #24]
 8004220:	4013      	ands	r3, r2
 8004222:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004224:	683b      	ldr	r3, [r7, #0]
 8004226:	685b      	ldr	r3, [r3, #4]
 8004228:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800422c:	2b00      	cmp	r3, #0
 800422e:	d003      	beq.n	8004238 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004230:	69ba      	ldr	r2, [r7, #24]
 8004232:	693b      	ldr	r3, [r7, #16]
 8004234:	4313      	orrs	r3, r2
 8004236:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8004238:	697b      	ldr	r3, [r7, #20]
 800423a:	69ba      	ldr	r2, [r7, #24]
 800423c:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 800423e:	697b      	ldr	r3, [r7, #20]
 8004240:	685b      	ldr	r3, [r3, #4]
 8004242:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004244:	693b      	ldr	r3, [r7, #16]
 8004246:	43db      	mvns	r3, r3
 8004248:	69ba      	ldr	r2, [r7, #24]
 800424a:	4013      	ands	r3, r2
 800424c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800424e:	683b      	ldr	r3, [r7, #0]
 8004250:	685b      	ldr	r3, [r3, #4]
 8004252:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004256:	2b00      	cmp	r3, #0
 8004258:	d003      	beq.n	8004262 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800425a:	69ba      	ldr	r2, [r7, #24]
 800425c:	693b      	ldr	r3, [r7, #16]
 800425e:	4313      	orrs	r3, r2
 8004260:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8004262:	697b      	ldr	r3, [r7, #20]
 8004264:	69ba      	ldr	r2, [r7, #24]
 8004266:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004268:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004270:	693b      	ldr	r3, [r7, #16]
 8004272:	43db      	mvns	r3, r3
 8004274:	69ba      	ldr	r2, [r7, #24]
 8004276:	4013      	ands	r3, r2
 8004278:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800427a:	683b      	ldr	r3, [r7, #0]
 800427c:	685b      	ldr	r3, [r3, #4]
 800427e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004282:	2b00      	cmp	r3, #0
 8004284:	d003      	beq.n	800428e <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8004286:	69ba      	ldr	r2, [r7, #24]
 8004288:	693b      	ldr	r3, [r7, #16]
 800428a:	4313      	orrs	r3, r2
 800428c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800428e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004292:	69bb      	ldr	r3, [r7, #24]
 8004294:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8004296:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800429a:	685b      	ldr	r3, [r3, #4]
 800429c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800429e:	693b      	ldr	r3, [r7, #16]
 80042a0:	43db      	mvns	r3, r3
 80042a2:	69ba      	ldr	r2, [r7, #24]
 80042a4:	4013      	ands	r3, r2
 80042a6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80042a8:	683b      	ldr	r3, [r7, #0]
 80042aa:	685b      	ldr	r3, [r3, #4]
 80042ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d003      	beq.n	80042bc <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 80042b4:	69ba      	ldr	r2, [r7, #24]
 80042b6:	693b      	ldr	r3, [r7, #16]
 80042b8:	4313      	orrs	r3, r2
 80042ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80042bc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80042c0:	69bb      	ldr	r3, [r7, #24]
 80042c2:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 80042c4:	69fb      	ldr	r3, [r7, #28]
 80042c6:	3301      	adds	r3, #1
 80042c8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80042ca:	683b      	ldr	r3, [r7, #0]
 80042cc:	681a      	ldr	r2, [r3, #0]
 80042ce:	69fb      	ldr	r3, [r7, #28]
 80042d0:	fa22 f303 	lsr.w	r3, r2, r3
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	f47f ae63 	bne.w	8003fa0 <HAL_GPIO_Init+0x14>
  }
}
 80042da:	bf00      	nop
 80042dc:	bf00      	nop
 80042de:	3724      	adds	r7, #36	; 0x24
 80042e0:	46bd      	mov	sp, r7
 80042e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e6:	4770      	bx	lr
 80042e8:	58000400 	.word	0x58000400

080042ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80042ec:	b480      	push	{r7}
 80042ee:	b083      	sub	sp, #12
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	6078      	str	r0, [r7, #4]
 80042f4:	460b      	mov	r3, r1
 80042f6:	807b      	strh	r3, [r7, #2]
 80042f8:	4613      	mov	r3, r2
 80042fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80042fc:	787b      	ldrb	r3, [r7, #1]
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d003      	beq.n	800430a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004302:	887a      	ldrh	r2, [r7, #2]
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8004308:	e003      	b.n	8004312 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800430a:	887b      	ldrh	r3, [r7, #2]
 800430c:	041a      	lsls	r2, r3, #16
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	619a      	str	r2, [r3, #24]
}
 8004312:	bf00      	nop
 8004314:	370c      	adds	r7, #12
 8004316:	46bd      	mov	sp, r7
 8004318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431c:	4770      	bx	lr

0800431e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800431e:	b480      	push	{r7}
 8004320:	b085      	sub	sp, #20
 8004322:	af00      	add	r7, sp, #0
 8004324:	6078      	str	r0, [r7, #4]
 8004326:	460b      	mov	r3, r1
 8004328:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	695b      	ldr	r3, [r3, #20]
 800432e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004330:	887a      	ldrh	r2, [r7, #2]
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	4013      	ands	r3, r2
 8004336:	041a      	lsls	r2, r3, #16
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	43d9      	mvns	r1, r3
 800433c:	887b      	ldrh	r3, [r7, #2]
 800433e:	400b      	ands	r3, r1
 8004340:	431a      	orrs	r2, r3
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	619a      	str	r2, [r3, #24]
}
 8004346:	bf00      	nop
 8004348:	3714      	adds	r7, #20
 800434a:	46bd      	mov	sp, r7
 800434c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004350:	4770      	bx	lr
	...

08004354 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8004354:	b580      	push	{r7, lr}
 8004356:	b084      	sub	sp, #16
 8004358:	af00      	add	r7, sp, #0
 800435a:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 800435c:	4b29      	ldr	r3, [pc, #164]	; (8004404 <HAL_PWREx_ConfigSupply+0xb0>)
 800435e:	68db      	ldr	r3, [r3, #12]
 8004360:	f003 0307 	and.w	r3, r3, #7
 8004364:	2b06      	cmp	r3, #6
 8004366:	d00a      	beq.n	800437e <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8004368:	4b26      	ldr	r3, [pc, #152]	; (8004404 <HAL_PWREx_ConfigSupply+0xb0>)
 800436a:	68db      	ldr	r3, [r3, #12]
 800436c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004370:	687a      	ldr	r2, [r7, #4]
 8004372:	429a      	cmp	r2, r3
 8004374:	d001      	beq.n	800437a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8004376:	2301      	movs	r3, #1
 8004378:	e040      	b.n	80043fc <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800437a:	2300      	movs	r3, #0
 800437c:	e03e      	b.n	80043fc <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800437e:	4b21      	ldr	r3, [pc, #132]	; (8004404 <HAL_PWREx_ConfigSupply+0xb0>)
 8004380:	68db      	ldr	r3, [r3, #12]
 8004382:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8004386:	491f      	ldr	r1, [pc, #124]	; (8004404 <HAL_PWREx_ConfigSupply+0xb0>)
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	4313      	orrs	r3, r2
 800438c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800438e:	f7fc fdff 	bl	8000f90 <HAL_GetTick>
 8004392:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004394:	e009      	b.n	80043aa <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8004396:	f7fc fdfb 	bl	8000f90 <HAL_GetTick>
 800439a:	4602      	mov	r2, r0
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	1ad3      	subs	r3, r2, r3
 80043a0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80043a4:	d901      	bls.n	80043aa <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80043a6:	2301      	movs	r3, #1
 80043a8:	e028      	b.n	80043fc <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80043aa:	4b16      	ldr	r3, [pc, #88]	; (8004404 <HAL_PWREx_ConfigSupply+0xb0>)
 80043ac:	685b      	ldr	r3, [r3, #4]
 80043ae:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80043b2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80043b6:	d1ee      	bne.n	8004396 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	2b1e      	cmp	r3, #30
 80043bc:	d008      	beq.n	80043d0 <HAL_PWREx_ConfigSupply+0x7c>
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	2b2e      	cmp	r3, #46	; 0x2e
 80043c2:	d005      	beq.n	80043d0 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	2b1d      	cmp	r3, #29
 80043c8:	d002      	beq.n	80043d0 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	2b2d      	cmp	r3, #45	; 0x2d
 80043ce:	d114      	bne.n	80043fa <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 80043d0:	f7fc fdde 	bl	8000f90 <HAL_GetTick>
 80043d4:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80043d6:	e009      	b.n	80043ec <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80043d8:	f7fc fdda 	bl	8000f90 <HAL_GetTick>
 80043dc:	4602      	mov	r2, r0
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	1ad3      	subs	r3, r2, r3
 80043e2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80043e6:	d901      	bls.n	80043ec <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 80043e8:	2301      	movs	r3, #1
 80043ea:	e007      	b.n	80043fc <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80043ec:	4b05      	ldr	r3, [pc, #20]	; (8004404 <HAL_PWREx_ConfigSupply+0xb0>)
 80043ee:	68db      	ldr	r3, [r3, #12]
 80043f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80043f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043f8:	d1ee      	bne.n	80043d8 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80043fa:	2300      	movs	r3, #0
}
 80043fc:	4618      	mov	r0, r3
 80043fe:	3710      	adds	r7, #16
 8004400:	46bd      	mov	sp, r7
 8004402:	bd80      	pop	{r7, pc}
 8004404:	58024800 	.word	0x58024800

08004408 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004408:	b580      	push	{r7, lr}
 800440a:	b08c      	sub	sp, #48	; 0x30
 800440c:	af00      	add	r7, sp, #0
 800440e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	2b00      	cmp	r3, #0
 8004414:	d101      	bne.n	800441a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004416:	2301      	movs	r3, #1
 8004418:	e3fd      	b.n	8004c16 <HAL_RCC_OscConfig+0x80e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f003 0301 	and.w	r3, r3, #1
 8004422:	2b00      	cmp	r3, #0
 8004424:	f000 8087 	beq.w	8004536 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004428:	4b99      	ldr	r3, [pc, #612]	; (8004690 <HAL_RCC_OscConfig+0x288>)
 800442a:	691b      	ldr	r3, [r3, #16]
 800442c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004430:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004432:	4b97      	ldr	r3, [pc, #604]	; (8004690 <HAL_RCC_OscConfig+0x288>)
 8004434:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004436:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8004438:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800443a:	2b10      	cmp	r3, #16
 800443c:	d007      	beq.n	800444e <HAL_RCC_OscConfig+0x46>
 800443e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004440:	2b18      	cmp	r3, #24
 8004442:	d110      	bne.n	8004466 <HAL_RCC_OscConfig+0x5e>
 8004444:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004446:	f003 0303 	and.w	r3, r3, #3
 800444a:	2b02      	cmp	r3, #2
 800444c:	d10b      	bne.n	8004466 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800444e:	4b90      	ldr	r3, [pc, #576]	; (8004690 <HAL_RCC_OscConfig+0x288>)
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004456:	2b00      	cmp	r3, #0
 8004458:	d06c      	beq.n	8004534 <HAL_RCC_OscConfig+0x12c>
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	685b      	ldr	r3, [r3, #4]
 800445e:	2b00      	cmp	r3, #0
 8004460:	d168      	bne.n	8004534 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004462:	2301      	movs	r3, #1
 8004464:	e3d7      	b.n	8004c16 <HAL_RCC_OscConfig+0x80e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	685b      	ldr	r3, [r3, #4]
 800446a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800446e:	d106      	bne.n	800447e <HAL_RCC_OscConfig+0x76>
 8004470:	4b87      	ldr	r3, [pc, #540]	; (8004690 <HAL_RCC_OscConfig+0x288>)
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	4a86      	ldr	r2, [pc, #536]	; (8004690 <HAL_RCC_OscConfig+0x288>)
 8004476:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800447a:	6013      	str	r3, [r2, #0]
 800447c:	e02e      	b.n	80044dc <HAL_RCC_OscConfig+0xd4>
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	685b      	ldr	r3, [r3, #4]
 8004482:	2b00      	cmp	r3, #0
 8004484:	d10c      	bne.n	80044a0 <HAL_RCC_OscConfig+0x98>
 8004486:	4b82      	ldr	r3, [pc, #520]	; (8004690 <HAL_RCC_OscConfig+0x288>)
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	4a81      	ldr	r2, [pc, #516]	; (8004690 <HAL_RCC_OscConfig+0x288>)
 800448c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004490:	6013      	str	r3, [r2, #0]
 8004492:	4b7f      	ldr	r3, [pc, #508]	; (8004690 <HAL_RCC_OscConfig+0x288>)
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	4a7e      	ldr	r2, [pc, #504]	; (8004690 <HAL_RCC_OscConfig+0x288>)
 8004498:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800449c:	6013      	str	r3, [r2, #0]
 800449e:	e01d      	b.n	80044dc <HAL_RCC_OscConfig+0xd4>
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	685b      	ldr	r3, [r3, #4]
 80044a4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80044a8:	d10c      	bne.n	80044c4 <HAL_RCC_OscConfig+0xbc>
 80044aa:	4b79      	ldr	r3, [pc, #484]	; (8004690 <HAL_RCC_OscConfig+0x288>)
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	4a78      	ldr	r2, [pc, #480]	; (8004690 <HAL_RCC_OscConfig+0x288>)
 80044b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80044b4:	6013      	str	r3, [r2, #0]
 80044b6:	4b76      	ldr	r3, [pc, #472]	; (8004690 <HAL_RCC_OscConfig+0x288>)
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	4a75      	ldr	r2, [pc, #468]	; (8004690 <HAL_RCC_OscConfig+0x288>)
 80044bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80044c0:	6013      	str	r3, [r2, #0]
 80044c2:	e00b      	b.n	80044dc <HAL_RCC_OscConfig+0xd4>
 80044c4:	4b72      	ldr	r3, [pc, #456]	; (8004690 <HAL_RCC_OscConfig+0x288>)
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	4a71      	ldr	r2, [pc, #452]	; (8004690 <HAL_RCC_OscConfig+0x288>)
 80044ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80044ce:	6013      	str	r3, [r2, #0]
 80044d0:	4b6f      	ldr	r3, [pc, #444]	; (8004690 <HAL_RCC_OscConfig+0x288>)
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	4a6e      	ldr	r2, [pc, #440]	; (8004690 <HAL_RCC_OscConfig+0x288>)
 80044d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80044da:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	685b      	ldr	r3, [r3, #4]
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d013      	beq.n	800450c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044e4:	f7fc fd54 	bl	8000f90 <HAL_GetTick>
 80044e8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80044ea:	e008      	b.n	80044fe <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80044ec:	f7fc fd50 	bl	8000f90 <HAL_GetTick>
 80044f0:	4602      	mov	r2, r0
 80044f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044f4:	1ad3      	subs	r3, r2, r3
 80044f6:	2b64      	cmp	r3, #100	; 0x64
 80044f8:	d901      	bls.n	80044fe <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80044fa:	2303      	movs	r3, #3
 80044fc:	e38b      	b.n	8004c16 <HAL_RCC_OscConfig+0x80e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80044fe:	4b64      	ldr	r3, [pc, #400]	; (8004690 <HAL_RCC_OscConfig+0x288>)
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004506:	2b00      	cmp	r3, #0
 8004508:	d0f0      	beq.n	80044ec <HAL_RCC_OscConfig+0xe4>
 800450a:	e014      	b.n	8004536 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800450c:	f7fc fd40 	bl	8000f90 <HAL_GetTick>
 8004510:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004512:	e008      	b.n	8004526 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004514:	f7fc fd3c 	bl	8000f90 <HAL_GetTick>
 8004518:	4602      	mov	r2, r0
 800451a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800451c:	1ad3      	subs	r3, r2, r3
 800451e:	2b64      	cmp	r3, #100	; 0x64
 8004520:	d901      	bls.n	8004526 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004522:	2303      	movs	r3, #3
 8004524:	e377      	b.n	8004c16 <HAL_RCC_OscConfig+0x80e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004526:	4b5a      	ldr	r3, [pc, #360]	; (8004690 <HAL_RCC_OscConfig+0x288>)
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800452e:	2b00      	cmp	r3, #0
 8004530:	d1f0      	bne.n	8004514 <HAL_RCC_OscConfig+0x10c>
 8004532:	e000      	b.n	8004536 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004534:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f003 0302 	and.w	r3, r3, #2
 800453e:	2b00      	cmp	r3, #0
 8004540:	f000 80ae 	beq.w	80046a0 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004544:	4b52      	ldr	r3, [pc, #328]	; (8004690 <HAL_RCC_OscConfig+0x288>)
 8004546:	691b      	ldr	r3, [r3, #16]
 8004548:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800454c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800454e:	4b50      	ldr	r3, [pc, #320]	; (8004690 <HAL_RCC_OscConfig+0x288>)
 8004550:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004552:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8004554:	6a3b      	ldr	r3, [r7, #32]
 8004556:	2b00      	cmp	r3, #0
 8004558:	d007      	beq.n	800456a <HAL_RCC_OscConfig+0x162>
 800455a:	6a3b      	ldr	r3, [r7, #32]
 800455c:	2b18      	cmp	r3, #24
 800455e:	d13a      	bne.n	80045d6 <HAL_RCC_OscConfig+0x1ce>
 8004560:	69fb      	ldr	r3, [r7, #28]
 8004562:	f003 0303 	and.w	r3, r3, #3
 8004566:	2b00      	cmp	r3, #0
 8004568:	d135      	bne.n	80045d6 <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800456a:	4b49      	ldr	r3, [pc, #292]	; (8004690 <HAL_RCC_OscConfig+0x288>)
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f003 0304 	and.w	r3, r3, #4
 8004572:	2b00      	cmp	r3, #0
 8004574:	d005      	beq.n	8004582 <HAL_RCC_OscConfig+0x17a>
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	68db      	ldr	r3, [r3, #12]
 800457a:	2b00      	cmp	r3, #0
 800457c:	d101      	bne.n	8004582 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800457e:	2301      	movs	r3, #1
 8004580:	e349      	b.n	8004c16 <HAL_RCC_OscConfig+0x80e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004582:	f7fc fd35 	bl	8000ff0 <HAL_GetREVID>
 8004586:	4603      	mov	r3, r0
 8004588:	f241 0203 	movw	r2, #4099	; 0x1003
 800458c:	4293      	cmp	r3, r2
 800458e:	d817      	bhi.n	80045c0 <HAL_RCC_OscConfig+0x1b8>
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	691b      	ldr	r3, [r3, #16]
 8004594:	2b40      	cmp	r3, #64	; 0x40
 8004596:	d108      	bne.n	80045aa <HAL_RCC_OscConfig+0x1a2>
 8004598:	4b3d      	ldr	r3, [pc, #244]	; (8004690 <HAL_RCC_OscConfig+0x288>)
 800459a:	685b      	ldr	r3, [r3, #4]
 800459c:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80045a0:	4a3b      	ldr	r2, [pc, #236]	; (8004690 <HAL_RCC_OscConfig+0x288>)
 80045a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80045a6:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80045a8:	e07a      	b.n	80046a0 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045aa:	4b39      	ldr	r3, [pc, #228]	; (8004690 <HAL_RCC_OscConfig+0x288>)
 80045ac:	685b      	ldr	r3, [r3, #4]
 80045ae:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	691b      	ldr	r3, [r3, #16]
 80045b6:	031b      	lsls	r3, r3, #12
 80045b8:	4935      	ldr	r1, [pc, #212]	; (8004690 <HAL_RCC_OscConfig+0x288>)
 80045ba:	4313      	orrs	r3, r2
 80045bc:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80045be:	e06f      	b.n	80046a0 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045c0:	4b33      	ldr	r3, [pc, #204]	; (8004690 <HAL_RCC_OscConfig+0x288>)
 80045c2:	685b      	ldr	r3, [r3, #4]
 80045c4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	691b      	ldr	r3, [r3, #16]
 80045cc:	061b      	lsls	r3, r3, #24
 80045ce:	4930      	ldr	r1, [pc, #192]	; (8004690 <HAL_RCC_OscConfig+0x288>)
 80045d0:	4313      	orrs	r3, r2
 80045d2:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80045d4:	e064      	b.n	80046a0 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	68db      	ldr	r3, [r3, #12]
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d045      	beq.n	800466a <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80045de:	4b2c      	ldr	r3, [pc, #176]	; (8004690 <HAL_RCC_OscConfig+0x288>)
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f023 0219 	bic.w	r2, r3, #25
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	68db      	ldr	r3, [r3, #12]
 80045ea:	4929      	ldr	r1, [pc, #164]	; (8004690 <HAL_RCC_OscConfig+0x288>)
 80045ec:	4313      	orrs	r3, r2
 80045ee:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045f0:	f7fc fcce 	bl	8000f90 <HAL_GetTick>
 80045f4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80045f6:	e008      	b.n	800460a <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80045f8:	f7fc fcca 	bl	8000f90 <HAL_GetTick>
 80045fc:	4602      	mov	r2, r0
 80045fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004600:	1ad3      	subs	r3, r2, r3
 8004602:	2b02      	cmp	r3, #2
 8004604:	d901      	bls.n	800460a <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 8004606:	2303      	movs	r3, #3
 8004608:	e305      	b.n	8004c16 <HAL_RCC_OscConfig+0x80e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800460a:	4b21      	ldr	r3, [pc, #132]	; (8004690 <HAL_RCC_OscConfig+0x288>)
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f003 0304 	and.w	r3, r3, #4
 8004612:	2b00      	cmp	r3, #0
 8004614:	d0f0      	beq.n	80045f8 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004616:	f7fc fceb 	bl	8000ff0 <HAL_GetREVID>
 800461a:	4603      	mov	r3, r0
 800461c:	f241 0203 	movw	r2, #4099	; 0x1003
 8004620:	4293      	cmp	r3, r2
 8004622:	d817      	bhi.n	8004654 <HAL_RCC_OscConfig+0x24c>
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	691b      	ldr	r3, [r3, #16]
 8004628:	2b40      	cmp	r3, #64	; 0x40
 800462a:	d108      	bne.n	800463e <HAL_RCC_OscConfig+0x236>
 800462c:	4b18      	ldr	r3, [pc, #96]	; (8004690 <HAL_RCC_OscConfig+0x288>)
 800462e:	685b      	ldr	r3, [r3, #4]
 8004630:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8004634:	4a16      	ldr	r2, [pc, #88]	; (8004690 <HAL_RCC_OscConfig+0x288>)
 8004636:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800463a:	6053      	str	r3, [r2, #4]
 800463c:	e030      	b.n	80046a0 <HAL_RCC_OscConfig+0x298>
 800463e:	4b14      	ldr	r3, [pc, #80]	; (8004690 <HAL_RCC_OscConfig+0x288>)
 8004640:	685b      	ldr	r3, [r3, #4]
 8004642:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	691b      	ldr	r3, [r3, #16]
 800464a:	031b      	lsls	r3, r3, #12
 800464c:	4910      	ldr	r1, [pc, #64]	; (8004690 <HAL_RCC_OscConfig+0x288>)
 800464e:	4313      	orrs	r3, r2
 8004650:	604b      	str	r3, [r1, #4]
 8004652:	e025      	b.n	80046a0 <HAL_RCC_OscConfig+0x298>
 8004654:	4b0e      	ldr	r3, [pc, #56]	; (8004690 <HAL_RCC_OscConfig+0x288>)
 8004656:	685b      	ldr	r3, [r3, #4]
 8004658:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	691b      	ldr	r3, [r3, #16]
 8004660:	061b      	lsls	r3, r3, #24
 8004662:	490b      	ldr	r1, [pc, #44]	; (8004690 <HAL_RCC_OscConfig+0x288>)
 8004664:	4313      	orrs	r3, r2
 8004666:	604b      	str	r3, [r1, #4]
 8004668:	e01a      	b.n	80046a0 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800466a:	4b09      	ldr	r3, [pc, #36]	; (8004690 <HAL_RCC_OscConfig+0x288>)
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	4a08      	ldr	r2, [pc, #32]	; (8004690 <HAL_RCC_OscConfig+0x288>)
 8004670:	f023 0301 	bic.w	r3, r3, #1
 8004674:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004676:	f7fc fc8b 	bl	8000f90 <HAL_GetTick>
 800467a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800467c:	e00a      	b.n	8004694 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800467e:	f7fc fc87 	bl	8000f90 <HAL_GetTick>
 8004682:	4602      	mov	r2, r0
 8004684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004686:	1ad3      	subs	r3, r2, r3
 8004688:	2b02      	cmp	r3, #2
 800468a:	d903      	bls.n	8004694 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 800468c:	2303      	movs	r3, #3
 800468e:	e2c2      	b.n	8004c16 <HAL_RCC_OscConfig+0x80e>
 8004690:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004694:	4b94      	ldr	r3, [pc, #592]	; (80048e8 <HAL_RCC_OscConfig+0x4e0>)
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f003 0304 	and.w	r3, r3, #4
 800469c:	2b00      	cmp	r3, #0
 800469e:	d1ee      	bne.n	800467e <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f003 0310 	and.w	r3, r3, #16
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	f000 80a9 	beq.w	8004800 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80046ae:	4b8e      	ldr	r3, [pc, #568]	; (80048e8 <HAL_RCC_OscConfig+0x4e0>)
 80046b0:	691b      	ldr	r3, [r3, #16]
 80046b2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80046b6:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80046b8:	4b8b      	ldr	r3, [pc, #556]	; (80048e8 <HAL_RCC_OscConfig+0x4e0>)
 80046ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046bc:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80046be:	69bb      	ldr	r3, [r7, #24]
 80046c0:	2b08      	cmp	r3, #8
 80046c2:	d007      	beq.n	80046d4 <HAL_RCC_OscConfig+0x2cc>
 80046c4:	69bb      	ldr	r3, [r7, #24]
 80046c6:	2b18      	cmp	r3, #24
 80046c8:	d13a      	bne.n	8004740 <HAL_RCC_OscConfig+0x338>
 80046ca:	697b      	ldr	r3, [r7, #20]
 80046cc:	f003 0303 	and.w	r3, r3, #3
 80046d0:	2b01      	cmp	r3, #1
 80046d2:	d135      	bne.n	8004740 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80046d4:	4b84      	ldr	r3, [pc, #528]	; (80048e8 <HAL_RCC_OscConfig+0x4e0>)
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d005      	beq.n	80046ec <HAL_RCC_OscConfig+0x2e4>
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	69db      	ldr	r3, [r3, #28]
 80046e4:	2b80      	cmp	r3, #128	; 0x80
 80046e6:	d001      	beq.n	80046ec <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 80046e8:	2301      	movs	r3, #1
 80046ea:	e294      	b.n	8004c16 <HAL_RCC_OscConfig+0x80e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80046ec:	f7fc fc80 	bl	8000ff0 <HAL_GetREVID>
 80046f0:	4603      	mov	r3, r0
 80046f2:	f241 0203 	movw	r2, #4099	; 0x1003
 80046f6:	4293      	cmp	r3, r2
 80046f8:	d817      	bhi.n	800472a <HAL_RCC_OscConfig+0x322>
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	6a1b      	ldr	r3, [r3, #32]
 80046fe:	2b20      	cmp	r3, #32
 8004700:	d108      	bne.n	8004714 <HAL_RCC_OscConfig+0x30c>
 8004702:	4b79      	ldr	r3, [pc, #484]	; (80048e8 <HAL_RCC_OscConfig+0x4e0>)
 8004704:	685b      	ldr	r3, [r3, #4]
 8004706:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800470a:	4a77      	ldr	r2, [pc, #476]	; (80048e8 <HAL_RCC_OscConfig+0x4e0>)
 800470c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004710:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004712:	e075      	b.n	8004800 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004714:	4b74      	ldr	r3, [pc, #464]	; (80048e8 <HAL_RCC_OscConfig+0x4e0>)
 8004716:	685b      	ldr	r3, [r3, #4]
 8004718:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	6a1b      	ldr	r3, [r3, #32]
 8004720:	069b      	lsls	r3, r3, #26
 8004722:	4971      	ldr	r1, [pc, #452]	; (80048e8 <HAL_RCC_OscConfig+0x4e0>)
 8004724:	4313      	orrs	r3, r2
 8004726:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004728:	e06a      	b.n	8004800 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800472a:	4b6f      	ldr	r3, [pc, #444]	; (80048e8 <HAL_RCC_OscConfig+0x4e0>)
 800472c:	68db      	ldr	r3, [r3, #12]
 800472e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	6a1b      	ldr	r3, [r3, #32]
 8004736:	061b      	lsls	r3, r3, #24
 8004738:	496b      	ldr	r1, [pc, #428]	; (80048e8 <HAL_RCC_OscConfig+0x4e0>)
 800473a:	4313      	orrs	r3, r2
 800473c:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800473e:	e05f      	b.n	8004800 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	69db      	ldr	r3, [r3, #28]
 8004744:	2b00      	cmp	r3, #0
 8004746:	d042      	beq.n	80047ce <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8004748:	4b67      	ldr	r3, [pc, #412]	; (80048e8 <HAL_RCC_OscConfig+0x4e0>)
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	4a66      	ldr	r2, [pc, #408]	; (80048e8 <HAL_RCC_OscConfig+0x4e0>)
 800474e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004752:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004754:	f7fc fc1c 	bl	8000f90 <HAL_GetTick>
 8004758:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800475a:	e008      	b.n	800476e <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800475c:	f7fc fc18 	bl	8000f90 <HAL_GetTick>
 8004760:	4602      	mov	r2, r0
 8004762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004764:	1ad3      	subs	r3, r2, r3
 8004766:	2b02      	cmp	r3, #2
 8004768:	d901      	bls.n	800476e <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 800476a:	2303      	movs	r3, #3
 800476c:	e253      	b.n	8004c16 <HAL_RCC_OscConfig+0x80e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800476e:	4b5e      	ldr	r3, [pc, #376]	; (80048e8 <HAL_RCC_OscConfig+0x4e0>)
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004776:	2b00      	cmp	r3, #0
 8004778:	d0f0      	beq.n	800475c <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800477a:	f7fc fc39 	bl	8000ff0 <HAL_GetREVID>
 800477e:	4603      	mov	r3, r0
 8004780:	f241 0203 	movw	r2, #4099	; 0x1003
 8004784:	4293      	cmp	r3, r2
 8004786:	d817      	bhi.n	80047b8 <HAL_RCC_OscConfig+0x3b0>
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	6a1b      	ldr	r3, [r3, #32]
 800478c:	2b20      	cmp	r3, #32
 800478e:	d108      	bne.n	80047a2 <HAL_RCC_OscConfig+0x39a>
 8004790:	4b55      	ldr	r3, [pc, #340]	; (80048e8 <HAL_RCC_OscConfig+0x4e0>)
 8004792:	685b      	ldr	r3, [r3, #4]
 8004794:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8004798:	4a53      	ldr	r2, [pc, #332]	; (80048e8 <HAL_RCC_OscConfig+0x4e0>)
 800479a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800479e:	6053      	str	r3, [r2, #4]
 80047a0:	e02e      	b.n	8004800 <HAL_RCC_OscConfig+0x3f8>
 80047a2:	4b51      	ldr	r3, [pc, #324]	; (80048e8 <HAL_RCC_OscConfig+0x4e0>)
 80047a4:	685b      	ldr	r3, [r3, #4]
 80047a6:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	6a1b      	ldr	r3, [r3, #32]
 80047ae:	069b      	lsls	r3, r3, #26
 80047b0:	494d      	ldr	r1, [pc, #308]	; (80048e8 <HAL_RCC_OscConfig+0x4e0>)
 80047b2:	4313      	orrs	r3, r2
 80047b4:	604b      	str	r3, [r1, #4]
 80047b6:	e023      	b.n	8004800 <HAL_RCC_OscConfig+0x3f8>
 80047b8:	4b4b      	ldr	r3, [pc, #300]	; (80048e8 <HAL_RCC_OscConfig+0x4e0>)
 80047ba:	68db      	ldr	r3, [r3, #12]
 80047bc:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	6a1b      	ldr	r3, [r3, #32]
 80047c4:	061b      	lsls	r3, r3, #24
 80047c6:	4948      	ldr	r1, [pc, #288]	; (80048e8 <HAL_RCC_OscConfig+0x4e0>)
 80047c8:	4313      	orrs	r3, r2
 80047ca:	60cb      	str	r3, [r1, #12]
 80047cc:	e018      	b.n	8004800 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80047ce:	4b46      	ldr	r3, [pc, #280]	; (80048e8 <HAL_RCC_OscConfig+0x4e0>)
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	4a45      	ldr	r2, [pc, #276]	; (80048e8 <HAL_RCC_OscConfig+0x4e0>)
 80047d4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80047d8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047da:	f7fc fbd9 	bl	8000f90 <HAL_GetTick>
 80047de:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80047e0:	e008      	b.n	80047f4 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80047e2:	f7fc fbd5 	bl	8000f90 <HAL_GetTick>
 80047e6:	4602      	mov	r2, r0
 80047e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047ea:	1ad3      	subs	r3, r2, r3
 80047ec:	2b02      	cmp	r3, #2
 80047ee:	d901      	bls.n	80047f4 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 80047f0:	2303      	movs	r3, #3
 80047f2:	e210      	b.n	8004c16 <HAL_RCC_OscConfig+0x80e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80047f4:	4b3c      	ldr	r3, [pc, #240]	; (80048e8 <HAL_RCC_OscConfig+0x4e0>)
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d1f0      	bne.n	80047e2 <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f003 0308 	and.w	r3, r3, #8
 8004808:	2b00      	cmp	r3, #0
 800480a:	d036      	beq.n	800487a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	695b      	ldr	r3, [r3, #20]
 8004810:	2b00      	cmp	r3, #0
 8004812:	d019      	beq.n	8004848 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004814:	4b34      	ldr	r3, [pc, #208]	; (80048e8 <HAL_RCC_OscConfig+0x4e0>)
 8004816:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004818:	4a33      	ldr	r2, [pc, #204]	; (80048e8 <HAL_RCC_OscConfig+0x4e0>)
 800481a:	f043 0301 	orr.w	r3, r3, #1
 800481e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004820:	f7fc fbb6 	bl	8000f90 <HAL_GetTick>
 8004824:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004826:	e008      	b.n	800483a <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004828:	f7fc fbb2 	bl	8000f90 <HAL_GetTick>
 800482c:	4602      	mov	r2, r0
 800482e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004830:	1ad3      	subs	r3, r2, r3
 8004832:	2b02      	cmp	r3, #2
 8004834:	d901      	bls.n	800483a <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 8004836:	2303      	movs	r3, #3
 8004838:	e1ed      	b.n	8004c16 <HAL_RCC_OscConfig+0x80e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800483a:	4b2b      	ldr	r3, [pc, #172]	; (80048e8 <HAL_RCC_OscConfig+0x4e0>)
 800483c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800483e:	f003 0302 	and.w	r3, r3, #2
 8004842:	2b00      	cmp	r3, #0
 8004844:	d0f0      	beq.n	8004828 <HAL_RCC_OscConfig+0x420>
 8004846:	e018      	b.n	800487a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004848:	4b27      	ldr	r3, [pc, #156]	; (80048e8 <HAL_RCC_OscConfig+0x4e0>)
 800484a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800484c:	4a26      	ldr	r2, [pc, #152]	; (80048e8 <HAL_RCC_OscConfig+0x4e0>)
 800484e:	f023 0301 	bic.w	r3, r3, #1
 8004852:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004854:	f7fc fb9c 	bl	8000f90 <HAL_GetTick>
 8004858:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800485a:	e008      	b.n	800486e <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800485c:	f7fc fb98 	bl	8000f90 <HAL_GetTick>
 8004860:	4602      	mov	r2, r0
 8004862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004864:	1ad3      	subs	r3, r2, r3
 8004866:	2b02      	cmp	r3, #2
 8004868:	d901      	bls.n	800486e <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 800486a:	2303      	movs	r3, #3
 800486c:	e1d3      	b.n	8004c16 <HAL_RCC_OscConfig+0x80e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800486e:	4b1e      	ldr	r3, [pc, #120]	; (80048e8 <HAL_RCC_OscConfig+0x4e0>)
 8004870:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004872:	f003 0302 	and.w	r3, r3, #2
 8004876:	2b00      	cmp	r3, #0
 8004878:	d1f0      	bne.n	800485c <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f003 0320 	and.w	r3, r3, #32
 8004882:	2b00      	cmp	r3, #0
 8004884:	d038      	beq.n	80048f8 <HAL_RCC_OscConfig+0x4f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	699b      	ldr	r3, [r3, #24]
 800488a:	2b00      	cmp	r3, #0
 800488c:	d019      	beq.n	80048c2 <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800488e:	4b16      	ldr	r3, [pc, #88]	; (80048e8 <HAL_RCC_OscConfig+0x4e0>)
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	4a15      	ldr	r2, [pc, #84]	; (80048e8 <HAL_RCC_OscConfig+0x4e0>)
 8004894:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004898:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800489a:	f7fc fb79 	bl	8000f90 <HAL_GetTick>
 800489e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80048a0:	e008      	b.n	80048b4 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80048a2:	f7fc fb75 	bl	8000f90 <HAL_GetTick>
 80048a6:	4602      	mov	r2, r0
 80048a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048aa:	1ad3      	subs	r3, r2, r3
 80048ac:	2b02      	cmp	r3, #2
 80048ae:	d901      	bls.n	80048b4 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 80048b0:	2303      	movs	r3, #3
 80048b2:	e1b0      	b.n	8004c16 <HAL_RCC_OscConfig+0x80e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80048b4:	4b0c      	ldr	r3, [pc, #48]	; (80048e8 <HAL_RCC_OscConfig+0x4e0>)
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d0f0      	beq.n	80048a2 <HAL_RCC_OscConfig+0x49a>
 80048c0:	e01a      	b.n	80048f8 <HAL_RCC_OscConfig+0x4f0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80048c2:	4b09      	ldr	r3, [pc, #36]	; (80048e8 <HAL_RCC_OscConfig+0x4e0>)
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	4a08      	ldr	r2, [pc, #32]	; (80048e8 <HAL_RCC_OscConfig+0x4e0>)
 80048c8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80048cc:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80048ce:	f7fc fb5f 	bl	8000f90 <HAL_GetTick>
 80048d2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80048d4:	e00a      	b.n	80048ec <HAL_RCC_OscConfig+0x4e4>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80048d6:	f7fc fb5b 	bl	8000f90 <HAL_GetTick>
 80048da:	4602      	mov	r2, r0
 80048dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048de:	1ad3      	subs	r3, r2, r3
 80048e0:	2b02      	cmp	r3, #2
 80048e2:	d903      	bls.n	80048ec <HAL_RCC_OscConfig+0x4e4>
        {
          return HAL_TIMEOUT;
 80048e4:	2303      	movs	r3, #3
 80048e6:	e196      	b.n	8004c16 <HAL_RCC_OscConfig+0x80e>
 80048e8:	58024400 	.word	0x58024400
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80048ec:	4b99      	ldr	r3, [pc, #612]	; (8004b54 <HAL_RCC_OscConfig+0x74c>)
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d1ee      	bne.n	80048d6 <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f003 0304 	and.w	r3, r3, #4
 8004900:	2b00      	cmp	r3, #0
 8004902:	f000 8081 	beq.w	8004a08 <HAL_RCC_OscConfig+0x600>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004906:	4b94      	ldr	r3, [pc, #592]	; (8004b58 <HAL_RCC_OscConfig+0x750>)
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	4a93      	ldr	r2, [pc, #588]	; (8004b58 <HAL_RCC_OscConfig+0x750>)
 800490c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004910:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004912:	f7fc fb3d 	bl	8000f90 <HAL_GetTick>
 8004916:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004918:	e008      	b.n	800492c <HAL_RCC_OscConfig+0x524>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800491a:	f7fc fb39 	bl	8000f90 <HAL_GetTick>
 800491e:	4602      	mov	r2, r0
 8004920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004922:	1ad3      	subs	r3, r2, r3
 8004924:	2b64      	cmp	r3, #100	; 0x64
 8004926:	d901      	bls.n	800492c <HAL_RCC_OscConfig+0x524>
      {
        return HAL_TIMEOUT;
 8004928:	2303      	movs	r3, #3
 800492a:	e174      	b.n	8004c16 <HAL_RCC_OscConfig+0x80e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800492c:	4b8a      	ldr	r3, [pc, #552]	; (8004b58 <HAL_RCC_OscConfig+0x750>)
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004934:	2b00      	cmp	r3, #0
 8004936:	d0f0      	beq.n	800491a <HAL_RCC_OscConfig+0x512>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	689b      	ldr	r3, [r3, #8]
 800493c:	2b01      	cmp	r3, #1
 800493e:	d106      	bne.n	800494e <HAL_RCC_OscConfig+0x546>
 8004940:	4b84      	ldr	r3, [pc, #528]	; (8004b54 <HAL_RCC_OscConfig+0x74c>)
 8004942:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004944:	4a83      	ldr	r2, [pc, #524]	; (8004b54 <HAL_RCC_OscConfig+0x74c>)
 8004946:	f043 0301 	orr.w	r3, r3, #1
 800494a:	6713      	str	r3, [r2, #112]	; 0x70
 800494c:	e02d      	b.n	80049aa <HAL_RCC_OscConfig+0x5a2>
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	689b      	ldr	r3, [r3, #8]
 8004952:	2b00      	cmp	r3, #0
 8004954:	d10c      	bne.n	8004970 <HAL_RCC_OscConfig+0x568>
 8004956:	4b7f      	ldr	r3, [pc, #508]	; (8004b54 <HAL_RCC_OscConfig+0x74c>)
 8004958:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800495a:	4a7e      	ldr	r2, [pc, #504]	; (8004b54 <HAL_RCC_OscConfig+0x74c>)
 800495c:	f023 0301 	bic.w	r3, r3, #1
 8004960:	6713      	str	r3, [r2, #112]	; 0x70
 8004962:	4b7c      	ldr	r3, [pc, #496]	; (8004b54 <HAL_RCC_OscConfig+0x74c>)
 8004964:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004966:	4a7b      	ldr	r2, [pc, #492]	; (8004b54 <HAL_RCC_OscConfig+0x74c>)
 8004968:	f023 0304 	bic.w	r3, r3, #4
 800496c:	6713      	str	r3, [r2, #112]	; 0x70
 800496e:	e01c      	b.n	80049aa <HAL_RCC_OscConfig+0x5a2>
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	689b      	ldr	r3, [r3, #8]
 8004974:	2b05      	cmp	r3, #5
 8004976:	d10c      	bne.n	8004992 <HAL_RCC_OscConfig+0x58a>
 8004978:	4b76      	ldr	r3, [pc, #472]	; (8004b54 <HAL_RCC_OscConfig+0x74c>)
 800497a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800497c:	4a75      	ldr	r2, [pc, #468]	; (8004b54 <HAL_RCC_OscConfig+0x74c>)
 800497e:	f043 0304 	orr.w	r3, r3, #4
 8004982:	6713      	str	r3, [r2, #112]	; 0x70
 8004984:	4b73      	ldr	r3, [pc, #460]	; (8004b54 <HAL_RCC_OscConfig+0x74c>)
 8004986:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004988:	4a72      	ldr	r2, [pc, #456]	; (8004b54 <HAL_RCC_OscConfig+0x74c>)
 800498a:	f043 0301 	orr.w	r3, r3, #1
 800498e:	6713      	str	r3, [r2, #112]	; 0x70
 8004990:	e00b      	b.n	80049aa <HAL_RCC_OscConfig+0x5a2>
 8004992:	4b70      	ldr	r3, [pc, #448]	; (8004b54 <HAL_RCC_OscConfig+0x74c>)
 8004994:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004996:	4a6f      	ldr	r2, [pc, #444]	; (8004b54 <HAL_RCC_OscConfig+0x74c>)
 8004998:	f023 0301 	bic.w	r3, r3, #1
 800499c:	6713      	str	r3, [r2, #112]	; 0x70
 800499e:	4b6d      	ldr	r3, [pc, #436]	; (8004b54 <HAL_RCC_OscConfig+0x74c>)
 80049a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049a2:	4a6c      	ldr	r2, [pc, #432]	; (8004b54 <HAL_RCC_OscConfig+0x74c>)
 80049a4:	f023 0304 	bic.w	r3, r3, #4
 80049a8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	689b      	ldr	r3, [r3, #8]
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d015      	beq.n	80049de <HAL_RCC_OscConfig+0x5d6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049b2:	f7fc faed 	bl	8000f90 <HAL_GetTick>
 80049b6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80049b8:	e00a      	b.n	80049d0 <HAL_RCC_OscConfig+0x5c8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80049ba:	f7fc fae9 	bl	8000f90 <HAL_GetTick>
 80049be:	4602      	mov	r2, r0
 80049c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049c2:	1ad3      	subs	r3, r2, r3
 80049c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80049c8:	4293      	cmp	r3, r2
 80049ca:	d901      	bls.n	80049d0 <HAL_RCC_OscConfig+0x5c8>
        {
          return HAL_TIMEOUT;
 80049cc:	2303      	movs	r3, #3
 80049ce:	e122      	b.n	8004c16 <HAL_RCC_OscConfig+0x80e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80049d0:	4b60      	ldr	r3, [pc, #384]	; (8004b54 <HAL_RCC_OscConfig+0x74c>)
 80049d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049d4:	f003 0302 	and.w	r3, r3, #2
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d0ee      	beq.n	80049ba <HAL_RCC_OscConfig+0x5b2>
 80049dc:	e014      	b.n	8004a08 <HAL_RCC_OscConfig+0x600>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049de:	f7fc fad7 	bl	8000f90 <HAL_GetTick>
 80049e2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80049e4:	e00a      	b.n	80049fc <HAL_RCC_OscConfig+0x5f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80049e6:	f7fc fad3 	bl	8000f90 <HAL_GetTick>
 80049ea:	4602      	mov	r2, r0
 80049ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049ee:	1ad3      	subs	r3, r2, r3
 80049f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80049f4:	4293      	cmp	r3, r2
 80049f6:	d901      	bls.n	80049fc <HAL_RCC_OscConfig+0x5f4>
        {
          return HAL_TIMEOUT;
 80049f8:	2303      	movs	r3, #3
 80049fa:	e10c      	b.n	8004c16 <HAL_RCC_OscConfig+0x80e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80049fc:	4b55      	ldr	r3, [pc, #340]	; (8004b54 <HAL_RCC_OscConfig+0x74c>)
 80049fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a00:	f003 0302 	and.w	r3, r3, #2
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d1ee      	bne.n	80049e6 <HAL_RCC_OscConfig+0x5de>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	f000 8101 	beq.w	8004c14 <HAL_RCC_OscConfig+0x80c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8004a12:	4b50      	ldr	r3, [pc, #320]	; (8004b54 <HAL_RCC_OscConfig+0x74c>)
 8004a14:	691b      	ldr	r3, [r3, #16]
 8004a16:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004a1a:	2b18      	cmp	r3, #24
 8004a1c:	f000 80bc 	beq.w	8004b98 <HAL_RCC_OscConfig+0x790>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a24:	2b02      	cmp	r3, #2
 8004a26:	f040 809d 	bne.w	8004b64 <HAL_RCC_OscConfig+0x75c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a2a:	4b4a      	ldr	r3, [pc, #296]	; (8004b54 <HAL_RCC_OscConfig+0x74c>)
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	4a49      	ldr	r2, [pc, #292]	; (8004b54 <HAL_RCC_OscConfig+0x74c>)
 8004a30:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004a34:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a36:	f7fc faab 	bl	8000f90 <HAL_GetTick>
 8004a3a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004a3c:	e008      	b.n	8004a50 <HAL_RCC_OscConfig+0x648>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004a3e:	f7fc faa7 	bl	8000f90 <HAL_GetTick>
 8004a42:	4602      	mov	r2, r0
 8004a44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a46:	1ad3      	subs	r3, r2, r3
 8004a48:	2b02      	cmp	r3, #2
 8004a4a:	d901      	bls.n	8004a50 <HAL_RCC_OscConfig+0x648>
          {
            return HAL_TIMEOUT;
 8004a4c:	2303      	movs	r3, #3
 8004a4e:	e0e2      	b.n	8004c16 <HAL_RCC_OscConfig+0x80e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004a50:	4b40      	ldr	r3, [pc, #256]	; (8004b54 <HAL_RCC_OscConfig+0x74c>)
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d1f0      	bne.n	8004a3e <HAL_RCC_OscConfig+0x636>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004a5c:	4b3d      	ldr	r3, [pc, #244]	; (8004b54 <HAL_RCC_OscConfig+0x74c>)
 8004a5e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004a60:	4b3e      	ldr	r3, [pc, #248]	; (8004b5c <HAL_RCC_OscConfig+0x754>)
 8004a62:	4013      	ands	r3, r2
 8004a64:	687a      	ldr	r2, [r7, #4]
 8004a66:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8004a68:	687a      	ldr	r2, [r7, #4]
 8004a6a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004a6c:	0112      	lsls	r2, r2, #4
 8004a6e:	430a      	orrs	r2, r1
 8004a70:	4938      	ldr	r1, [pc, #224]	; (8004b54 <HAL_RCC_OscConfig+0x74c>)
 8004a72:	4313      	orrs	r3, r2
 8004a74:	628b      	str	r3, [r1, #40]	; 0x28
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a7a:	3b01      	subs	r3, #1
 8004a7c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a84:	3b01      	subs	r3, #1
 8004a86:	025b      	lsls	r3, r3, #9
 8004a88:	b29b      	uxth	r3, r3
 8004a8a:	431a      	orrs	r2, r3
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a90:	3b01      	subs	r3, #1
 8004a92:	041b      	lsls	r3, r3, #16
 8004a94:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004a98:	431a      	orrs	r2, r3
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a9e:	3b01      	subs	r3, #1
 8004aa0:	061b      	lsls	r3, r3, #24
 8004aa2:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004aa6:	492b      	ldr	r1, [pc, #172]	; (8004b54 <HAL_RCC_OscConfig+0x74c>)
 8004aa8:	4313      	orrs	r3, r2
 8004aaa:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8004aac:	4b29      	ldr	r3, [pc, #164]	; (8004b54 <HAL_RCC_OscConfig+0x74c>)
 8004aae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ab0:	4a28      	ldr	r2, [pc, #160]	; (8004b54 <HAL_RCC_OscConfig+0x74c>)
 8004ab2:	f023 0301 	bic.w	r3, r3, #1
 8004ab6:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004ab8:	4b26      	ldr	r3, [pc, #152]	; (8004b54 <HAL_RCC_OscConfig+0x74c>)
 8004aba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004abc:	4b28      	ldr	r3, [pc, #160]	; (8004b60 <HAL_RCC_OscConfig+0x758>)
 8004abe:	4013      	ands	r3, r2
 8004ac0:	687a      	ldr	r2, [r7, #4]
 8004ac2:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004ac4:	00d2      	lsls	r2, r2, #3
 8004ac6:	4923      	ldr	r1, [pc, #140]	; (8004b54 <HAL_RCC_OscConfig+0x74c>)
 8004ac8:	4313      	orrs	r3, r2
 8004aca:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8004acc:	4b21      	ldr	r3, [pc, #132]	; (8004b54 <HAL_RCC_OscConfig+0x74c>)
 8004ace:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ad0:	f023 020c 	bic.w	r2, r3, #12
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ad8:	491e      	ldr	r1, [pc, #120]	; (8004b54 <HAL_RCC_OscConfig+0x74c>)
 8004ada:	4313      	orrs	r3, r2
 8004adc:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8004ade:	4b1d      	ldr	r3, [pc, #116]	; (8004b54 <HAL_RCC_OscConfig+0x74c>)
 8004ae0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ae2:	f023 0202 	bic.w	r2, r3, #2
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004aea:	491a      	ldr	r1, [pc, #104]	; (8004b54 <HAL_RCC_OscConfig+0x74c>)
 8004aec:	4313      	orrs	r3, r2
 8004aee:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004af0:	4b18      	ldr	r3, [pc, #96]	; (8004b54 <HAL_RCC_OscConfig+0x74c>)
 8004af2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004af4:	4a17      	ldr	r2, [pc, #92]	; (8004b54 <HAL_RCC_OscConfig+0x74c>)
 8004af6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004afa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004afc:	4b15      	ldr	r3, [pc, #84]	; (8004b54 <HAL_RCC_OscConfig+0x74c>)
 8004afe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b00:	4a14      	ldr	r2, [pc, #80]	; (8004b54 <HAL_RCC_OscConfig+0x74c>)
 8004b02:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004b06:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8004b08:	4b12      	ldr	r3, [pc, #72]	; (8004b54 <HAL_RCC_OscConfig+0x74c>)
 8004b0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b0c:	4a11      	ldr	r2, [pc, #68]	; (8004b54 <HAL_RCC_OscConfig+0x74c>)
 8004b0e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004b12:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8004b14:	4b0f      	ldr	r3, [pc, #60]	; (8004b54 <HAL_RCC_OscConfig+0x74c>)
 8004b16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b18:	4a0e      	ldr	r2, [pc, #56]	; (8004b54 <HAL_RCC_OscConfig+0x74c>)
 8004b1a:	f043 0301 	orr.w	r3, r3, #1
 8004b1e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004b20:	4b0c      	ldr	r3, [pc, #48]	; (8004b54 <HAL_RCC_OscConfig+0x74c>)
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	4a0b      	ldr	r2, [pc, #44]	; (8004b54 <HAL_RCC_OscConfig+0x74c>)
 8004b26:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004b2a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b2c:	f7fc fa30 	bl	8000f90 <HAL_GetTick>
 8004b30:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004b32:	e008      	b.n	8004b46 <HAL_RCC_OscConfig+0x73e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004b34:	f7fc fa2c 	bl	8000f90 <HAL_GetTick>
 8004b38:	4602      	mov	r2, r0
 8004b3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b3c:	1ad3      	subs	r3, r2, r3
 8004b3e:	2b02      	cmp	r3, #2
 8004b40:	d901      	bls.n	8004b46 <HAL_RCC_OscConfig+0x73e>
          {
            return HAL_TIMEOUT;
 8004b42:	2303      	movs	r3, #3
 8004b44:	e067      	b.n	8004c16 <HAL_RCC_OscConfig+0x80e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004b46:	4b03      	ldr	r3, [pc, #12]	; (8004b54 <HAL_RCC_OscConfig+0x74c>)
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d0f0      	beq.n	8004b34 <HAL_RCC_OscConfig+0x72c>
 8004b52:	e05f      	b.n	8004c14 <HAL_RCC_OscConfig+0x80c>
 8004b54:	58024400 	.word	0x58024400
 8004b58:	58024800 	.word	0x58024800
 8004b5c:	fffffc0c 	.word	0xfffffc0c
 8004b60:	ffff0007 	.word	0xffff0007
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b64:	4b2e      	ldr	r3, [pc, #184]	; (8004c20 <HAL_RCC_OscConfig+0x818>)
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	4a2d      	ldr	r2, [pc, #180]	; (8004c20 <HAL_RCC_OscConfig+0x818>)
 8004b6a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004b6e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b70:	f7fc fa0e 	bl	8000f90 <HAL_GetTick>
 8004b74:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004b76:	e008      	b.n	8004b8a <HAL_RCC_OscConfig+0x782>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004b78:	f7fc fa0a 	bl	8000f90 <HAL_GetTick>
 8004b7c:	4602      	mov	r2, r0
 8004b7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b80:	1ad3      	subs	r3, r2, r3
 8004b82:	2b02      	cmp	r3, #2
 8004b84:	d901      	bls.n	8004b8a <HAL_RCC_OscConfig+0x782>
          {
            return HAL_TIMEOUT;
 8004b86:	2303      	movs	r3, #3
 8004b88:	e045      	b.n	8004c16 <HAL_RCC_OscConfig+0x80e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004b8a:	4b25      	ldr	r3, [pc, #148]	; (8004c20 <HAL_RCC_OscConfig+0x818>)
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d1f0      	bne.n	8004b78 <HAL_RCC_OscConfig+0x770>
 8004b96:	e03d      	b.n	8004c14 <HAL_RCC_OscConfig+0x80c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8004b98:	4b21      	ldr	r3, [pc, #132]	; (8004c20 <HAL_RCC_OscConfig+0x818>)
 8004b9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b9c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8004b9e:	4b20      	ldr	r3, [pc, #128]	; (8004c20 <HAL_RCC_OscConfig+0x818>)
 8004ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ba2:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ba8:	2b01      	cmp	r3, #1
 8004baa:	d031      	beq.n	8004c10 <HAL_RCC_OscConfig+0x808>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004bac:	693b      	ldr	r3, [r7, #16]
 8004bae:	f003 0203 	and.w	r2, r3, #3
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004bb6:	429a      	cmp	r2, r3
 8004bb8:	d12a      	bne.n	8004c10 <HAL_RCC_OscConfig+0x808>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004bba:	693b      	ldr	r3, [r7, #16]
 8004bbc:	091b      	lsrs	r3, r3, #4
 8004bbe:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004bc6:	429a      	cmp	r2, r3
 8004bc8:	d122      	bne.n	8004c10 <HAL_RCC_OscConfig+0x808>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bd4:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004bd6:	429a      	cmp	r2, r3
 8004bd8:	d11a      	bne.n	8004c10 <HAL_RCC_OscConfig+0x808>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	0a5b      	lsrs	r3, r3, #9
 8004bde:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004be6:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004be8:	429a      	cmp	r2, r3
 8004bea:	d111      	bne.n	8004c10 <HAL_RCC_OscConfig+0x808>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	0c1b      	lsrs	r3, r3, #16
 8004bf0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bf8:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004bfa:	429a      	cmp	r2, r3
 8004bfc:	d108      	bne.n	8004c10 <HAL_RCC_OscConfig+0x808>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	0e1b      	lsrs	r3, r3, #24
 8004c02:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c0a:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004c0c:	429a      	cmp	r2, r3
 8004c0e:	d001      	beq.n	8004c14 <HAL_RCC_OscConfig+0x80c>
      {
        return HAL_ERROR;
 8004c10:	2301      	movs	r3, #1
 8004c12:	e000      	b.n	8004c16 <HAL_RCC_OscConfig+0x80e>
      }
    }
  }
  return HAL_OK;
 8004c14:	2300      	movs	r3, #0
}
 8004c16:	4618      	mov	r0, r3
 8004c18:	3730      	adds	r7, #48	; 0x30
 8004c1a:	46bd      	mov	sp, r7
 8004c1c:	bd80      	pop	{r7, pc}
 8004c1e:	bf00      	nop
 8004c20:	58024400 	.word	0x58024400

08004c24 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004c24:	b580      	push	{r7, lr}
 8004c26:	b086      	sub	sp, #24
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	6078      	str	r0, [r7, #4]
 8004c2c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d101      	bne.n	8004c38 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004c34:	2301      	movs	r3, #1
 8004c36:	e19c      	b.n	8004f72 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004c38:	4b8a      	ldr	r3, [pc, #552]	; (8004e64 <HAL_RCC_ClockConfig+0x240>)
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	f003 030f 	and.w	r3, r3, #15
 8004c40:	683a      	ldr	r2, [r7, #0]
 8004c42:	429a      	cmp	r2, r3
 8004c44:	d910      	bls.n	8004c68 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c46:	4b87      	ldr	r3, [pc, #540]	; (8004e64 <HAL_RCC_ClockConfig+0x240>)
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	f023 020f 	bic.w	r2, r3, #15
 8004c4e:	4985      	ldr	r1, [pc, #532]	; (8004e64 <HAL_RCC_ClockConfig+0x240>)
 8004c50:	683b      	ldr	r3, [r7, #0]
 8004c52:	4313      	orrs	r3, r2
 8004c54:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c56:	4b83      	ldr	r3, [pc, #524]	; (8004e64 <HAL_RCC_ClockConfig+0x240>)
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f003 030f 	and.w	r3, r3, #15
 8004c5e:	683a      	ldr	r2, [r7, #0]
 8004c60:	429a      	cmp	r2, r3
 8004c62:	d001      	beq.n	8004c68 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004c64:	2301      	movs	r3, #1
 8004c66:	e184      	b.n	8004f72 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f003 0304 	and.w	r3, r3, #4
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d010      	beq.n	8004c96 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	691a      	ldr	r2, [r3, #16]
 8004c78:	4b7b      	ldr	r3, [pc, #492]	; (8004e68 <HAL_RCC_ClockConfig+0x244>)
 8004c7a:	699b      	ldr	r3, [r3, #24]
 8004c7c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004c80:	429a      	cmp	r2, r3
 8004c82:	d908      	bls.n	8004c96 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004c84:	4b78      	ldr	r3, [pc, #480]	; (8004e68 <HAL_RCC_ClockConfig+0x244>)
 8004c86:	699b      	ldr	r3, [r3, #24]
 8004c88:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	691b      	ldr	r3, [r3, #16]
 8004c90:	4975      	ldr	r1, [pc, #468]	; (8004e68 <HAL_RCC_ClockConfig+0x244>)
 8004c92:	4313      	orrs	r3, r2
 8004c94:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f003 0308 	and.w	r3, r3, #8
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d010      	beq.n	8004cc4 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	695a      	ldr	r2, [r3, #20]
 8004ca6:	4b70      	ldr	r3, [pc, #448]	; (8004e68 <HAL_RCC_ClockConfig+0x244>)
 8004ca8:	69db      	ldr	r3, [r3, #28]
 8004caa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004cae:	429a      	cmp	r2, r3
 8004cb0:	d908      	bls.n	8004cc4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004cb2:	4b6d      	ldr	r3, [pc, #436]	; (8004e68 <HAL_RCC_ClockConfig+0x244>)
 8004cb4:	69db      	ldr	r3, [r3, #28]
 8004cb6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	695b      	ldr	r3, [r3, #20]
 8004cbe:	496a      	ldr	r1, [pc, #424]	; (8004e68 <HAL_RCC_ClockConfig+0x244>)
 8004cc0:	4313      	orrs	r3, r2
 8004cc2:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	f003 0310 	and.w	r3, r3, #16
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d010      	beq.n	8004cf2 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	699a      	ldr	r2, [r3, #24]
 8004cd4:	4b64      	ldr	r3, [pc, #400]	; (8004e68 <HAL_RCC_ClockConfig+0x244>)
 8004cd6:	69db      	ldr	r3, [r3, #28]
 8004cd8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004cdc:	429a      	cmp	r2, r3
 8004cde:	d908      	bls.n	8004cf2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004ce0:	4b61      	ldr	r3, [pc, #388]	; (8004e68 <HAL_RCC_ClockConfig+0x244>)
 8004ce2:	69db      	ldr	r3, [r3, #28]
 8004ce4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	699b      	ldr	r3, [r3, #24]
 8004cec:	495e      	ldr	r1, [pc, #376]	; (8004e68 <HAL_RCC_ClockConfig+0x244>)
 8004cee:	4313      	orrs	r3, r2
 8004cf0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	f003 0320 	and.w	r3, r3, #32
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d010      	beq.n	8004d20 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	69da      	ldr	r2, [r3, #28]
 8004d02:	4b59      	ldr	r3, [pc, #356]	; (8004e68 <HAL_RCC_ClockConfig+0x244>)
 8004d04:	6a1b      	ldr	r3, [r3, #32]
 8004d06:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004d0a:	429a      	cmp	r2, r3
 8004d0c:	d908      	bls.n	8004d20 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8004d0e:	4b56      	ldr	r3, [pc, #344]	; (8004e68 <HAL_RCC_ClockConfig+0x244>)
 8004d10:	6a1b      	ldr	r3, [r3, #32]
 8004d12:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	69db      	ldr	r3, [r3, #28]
 8004d1a:	4953      	ldr	r1, [pc, #332]	; (8004e68 <HAL_RCC_ClockConfig+0x244>)
 8004d1c:	4313      	orrs	r3, r2
 8004d1e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f003 0302 	and.w	r3, r3, #2
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d010      	beq.n	8004d4e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	68da      	ldr	r2, [r3, #12]
 8004d30:	4b4d      	ldr	r3, [pc, #308]	; (8004e68 <HAL_RCC_ClockConfig+0x244>)
 8004d32:	699b      	ldr	r3, [r3, #24]
 8004d34:	f003 030f 	and.w	r3, r3, #15
 8004d38:	429a      	cmp	r2, r3
 8004d3a:	d908      	bls.n	8004d4e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004d3c:	4b4a      	ldr	r3, [pc, #296]	; (8004e68 <HAL_RCC_ClockConfig+0x244>)
 8004d3e:	699b      	ldr	r3, [r3, #24]
 8004d40:	f023 020f 	bic.w	r2, r3, #15
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	68db      	ldr	r3, [r3, #12]
 8004d48:	4947      	ldr	r1, [pc, #284]	; (8004e68 <HAL_RCC_ClockConfig+0x244>)
 8004d4a:	4313      	orrs	r3, r2
 8004d4c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	f003 0301 	and.w	r3, r3, #1
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d055      	beq.n	8004e06 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8004d5a:	4b43      	ldr	r3, [pc, #268]	; (8004e68 <HAL_RCC_ClockConfig+0x244>)
 8004d5c:	699b      	ldr	r3, [r3, #24]
 8004d5e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	689b      	ldr	r3, [r3, #8]
 8004d66:	4940      	ldr	r1, [pc, #256]	; (8004e68 <HAL_RCC_ClockConfig+0x244>)
 8004d68:	4313      	orrs	r3, r2
 8004d6a:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	685b      	ldr	r3, [r3, #4]
 8004d70:	2b02      	cmp	r3, #2
 8004d72:	d107      	bne.n	8004d84 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004d74:	4b3c      	ldr	r3, [pc, #240]	; (8004e68 <HAL_RCC_ClockConfig+0x244>)
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d121      	bne.n	8004dc4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004d80:	2301      	movs	r3, #1
 8004d82:	e0f6      	b.n	8004f72 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	685b      	ldr	r3, [r3, #4]
 8004d88:	2b03      	cmp	r3, #3
 8004d8a:	d107      	bne.n	8004d9c <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004d8c:	4b36      	ldr	r3, [pc, #216]	; (8004e68 <HAL_RCC_ClockConfig+0x244>)
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d115      	bne.n	8004dc4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004d98:	2301      	movs	r3, #1
 8004d9a:	e0ea      	b.n	8004f72 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	685b      	ldr	r3, [r3, #4]
 8004da0:	2b01      	cmp	r3, #1
 8004da2:	d107      	bne.n	8004db4 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004da4:	4b30      	ldr	r3, [pc, #192]	; (8004e68 <HAL_RCC_ClockConfig+0x244>)
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d109      	bne.n	8004dc4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004db0:	2301      	movs	r3, #1
 8004db2:	e0de      	b.n	8004f72 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004db4:	4b2c      	ldr	r3, [pc, #176]	; (8004e68 <HAL_RCC_ClockConfig+0x244>)
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	f003 0304 	and.w	r3, r3, #4
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d101      	bne.n	8004dc4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004dc0:	2301      	movs	r3, #1
 8004dc2:	e0d6      	b.n	8004f72 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004dc4:	4b28      	ldr	r3, [pc, #160]	; (8004e68 <HAL_RCC_ClockConfig+0x244>)
 8004dc6:	691b      	ldr	r3, [r3, #16]
 8004dc8:	f023 0207 	bic.w	r2, r3, #7
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	685b      	ldr	r3, [r3, #4]
 8004dd0:	4925      	ldr	r1, [pc, #148]	; (8004e68 <HAL_RCC_ClockConfig+0x244>)
 8004dd2:	4313      	orrs	r3, r2
 8004dd4:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004dd6:	f7fc f8db 	bl	8000f90 <HAL_GetTick>
 8004dda:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ddc:	e00a      	b.n	8004df4 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004dde:	f7fc f8d7 	bl	8000f90 <HAL_GetTick>
 8004de2:	4602      	mov	r2, r0
 8004de4:	697b      	ldr	r3, [r7, #20]
 8004de6:	1ad3      	subs	r3, r2, r3
 8004de8:	f241 3288 	movw	r2, #5000	; 0x1388
 8004dec:	4293      	cmp	r3, r2
 8004dee:	d901      	bls.n	8004df4 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8004df0:	2303      	movs	r3, #3
 8004df2:	e0be      	b.n	8004f72 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004df4:	4b1c      	ldr	r3, [pc, #112]	; (8004e68 <HAL_RCC_ClockConfig+0x244>)
 8004df6:	691b      	ldr	r3, [r3, #16]
 8004df8:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	685b      	ldr	r3, [r3, #4]
 8004e00:	00db      	lsls	r3, r3, #3
 8004e02:	429a      	cmp	r2, r3
 8004e04:	d1eb      	bne.n	8004dde <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	f003 0302 	and.w	r3, r3, #2
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d010      	beq.n	8004e34 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	68da      	ldr	r2, [r3, #12]
 8004e16:	4b14      	ldr	r3, [pc, #80]	; (8004e68 <HAL_RCC_ClockConfig+0x244>)
 8004e18:	699b      	ldr	r3, [r3, #24]
 8004e1a:	f003 030f 	and.w	r3, r3, #15
 8004e1e:	429a      	cmp	r2, r3
 8004e20:	d208      	bcs.n	8004e34 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004e22:	4b11      	ldr	r3, [pc, #68]	; (8004e68 <HAL_RCC_ClockConfig+0x244>)
 8004e24:	699b      	ldr	r3, [r3, #24]
 8004e26:	f023 020f 	bic.w	r2, r3, #15
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	68db      	ldr	r3, [r3, #12]
 8004e2e:	490e      	ldr	r1, [pc, #56]	; (8004e68 <HAL_RCC_ClockConfig+0x244>)
 8004e30:	4313      	orrs	r3, r2
 8004e32:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004e34:	4b0b      	ldr	r3, [pc, #44]	; (8004e64 <HAL_RCC_ClockConfig+0x240>)
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	f003 030f 	and.w	r3, r3, #15
 8004e3c:	683a      	ldr	r2, [r7, #0]
 8004e3e:	429a      	cmp	r2, r3
 8004e40:	d214      	bcs.n	8004e6c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e42:	4b08      	ldr	r3, [pc, #32]	; (8004e64 <HAL_RCC_ClockConfig+0x240>)
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	f023 020f 	bic.w	r2, r3, #15
 8004e4a:	4906      	ldr	r1, [pc, #24]	; (8004e64 <HAL_RCC_ClockConfig+0x240>)
 8004e4c:	683b      	ldr	r3, [r7, #0]
 8004e4e:	4313      	orrs	r3, r2
 8004e50:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e52:	4b04      	ldr	r3, [pc, #16]	; (8004e64 <HAL_RCC_ClockConfig+0x240>)
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	f003 030f 	and.w	r3, r3, #15
 8004e5a:	683a      	ldr	r2, [r7, #0]
 8004e5c:	429a      	cmp	r2, r3
 8004e5e:	d005      	beq.n	8004e6c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8004e60:	2301      	movs	r3, #1
 8004e62:	e086      	b.n	8004f72 <HAL_RCC_ClockConfig+0x34e>
 8004e64:	52002000 	.word	0x52002000
 8004e68:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	f003 0304 	and.w	r3, r3, #4
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d010      	beq.n	8004e9a <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	691a      	ldr	r2, [r3, #16]
 8004e7c:	4b3f      	ldr	r3, [pc, #252]	; (8004f7c <HAL_RCC_ClockConfig+0x358>)
 8004e7e:	699b      	ldr	r3, [r3, #24]
 8004e80:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004e84:	429a      	cmp	r2, r3
 8004e86:	d208      	bcs.n	8004e9a <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004e88:	4b3c      	ldr	r3, [pc, #240]	; (8004f7c <HAL_RCC_ClockConfig+0x358>)
 8004e8a:	699b      	ldr	r3, [r3, #24]
 8004e8c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	691b      	ldr	r3, [r3, #16]
 8004e94:	4939      	ldr	r1, [pc, #228]	; (8004f7c <HAL_RCC_ClockConfig+0x358>)
 8004e96:	4313      	orrs	r3, r2
 8004e98:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	f003 0308 	and.w	r3, r3, #8
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d010      	beq.n	8004ec8 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	695a      	ldr	r2, [r3, #20]
 8004eaa:	4b34      	ldr	r3, [pc, #208]	; (8004f7c <HAL_RCC_ClockConfig+0x358>)
 8004eac:	69db      	ldr	r3, [r3, #28]
 8004eae:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004eb2:	429a      	cmp	r2, r3
 8004eb4:	d208      	bcs.n	8004ec8 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004eb6:	4b31      	ldr	r3, [pc, #196]	; (8004f7c <HAL_RCC_ClockConfig+0x358>)
 8004eb8:	69db      	ldr	r3, [r3, #28]
 8004eba:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	695b      	ldr	r3, [r3, #20]
 8004ec2:	492e      	ldr	r1, [pc, #184]	; (8004f7c <HAL_RCC_ClockConfig+0x358>)
 8004ec4:	4313      	orrs	r3, r2
 8004ec6:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	f003 0310 	and.w	r3, r3, #16
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d010      	beq.n	8004ef6 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	699a      	ldr	r2, [r3, #24]
 8004ed8:	4b28      	ldr	r3, [pc, #160]	; (8004f7c <HAL_RCC_ClockConfig+0x358>)
 8004eda:	69db      	ldr	r3, [r3, #28]
 8004edc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004ee0:	429a      	cmp	r2, r3
 8004ee2:	d208      	bcs.n	8004ef6 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004ee4:	4b25      	ldr	r3, [pc, #148]	; (8004f7c <HAL_RCC_ClockConfig+0x358>)
 8004ee6:	69db      	ldr	r3, [r3, #28]
 8004ee8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	699b      	ldr	r3, [r3, #24]
 8004ef0:	4922      	ldr	r1, [pc, #136]	; (8004f7c <HAL_RCC_ClockConfig+0x358>)
 8004ef2:	4313      	orrs	r3, r2
 8004ef4:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	f003 0320 	and.w	r3, r3, #32
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d010      	beq.n	8004f24 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	69da      	ldr	r2, [r3, #28]
 8004f06:	4b1d      	ldr	r3, [pc, #116]	; (8004f7c <HAL_RCC_ClockConfig+0x358>)
 8004f08:	6a1b      	ldr	r3, [r3, #32]
 8004f0a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004f0e:	429a      	cmp	r2, r3
 8004f10:	d208      	bcs.n	8004f24 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8004f12:	4b1a      	ldr	r3, [pc, #104]	; (8004f7c <HAL_RCC_ClockConfig+0x358>)
 8004f14:	6a1b      	ldr	r3, [r3, #32]
 8004f16:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	69db      	ldr	r3, [r3, #28]
 8004f1e:	4917      	ldr	r1, [pc, #92]	; (8004f7c <HAL_RCC_ClockConfig+0x358>)
 8004f20:	4313      	orrs	r3, r2
 8004f22:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004f24:	f000 f834 	bl	8004f90 <HAL_RCC_GetSysClockFreq>
 8004f28:	4602      	mov	r2, r0
 8004f2a:	4b14      	ldr	r3, [pc, #80]	; (8004f7c <HAL_RCC_ClockConfig+0x358>)
 8004f2c:	699b      	ldr	r3, [r3, #24]
 8004f2e:	0a1b      	lsrs	r3, r3, #8
 8004f30:	f003 030f 	and.w	r3, r3, #15
 8004f34:	4912      	ldr	r1, [pc, #72]	; (8004f80 <HAL_RCC_ClockConfig+0x35c>)
 8004f36:	5ccb      	ldrb	r3, [r1, r3]
 8004f38:	f003 031f 	and.w	r3, r3, #31
 8004f3c:	fa22 f303 	lsr.w	r3, r2, r3
 8004f40:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004f42:	4b0e      	ldr	r3, [pc, #56]	; (8004f7c <HAL_RCC_ClockConfig+0x358>)
 8004f44:	699b      	ldr	r3, [r3, #24]
 8004f46:	f003 030f 	and.w	r3, r3, #15
 8004f4a:	4a0d      	ldr	r2, [pc, #52]	; (8004f80 <HAL_RCC_ClockConfig+0x35c>)
 8004f4c:	5cd3      	ldrb	r3, [r2, r3]
 8004f4e:	f003 031f 	and.w	r3, r3, #31
 8004f52:	693a      	ldr	r2, [r7, #16]
 8004f54:	fa22 f303 	lsr.w	r3, r2, r3
 8004f58:	4a0a      	ldr	r2, [pc, #40]	; (8004f84 <HAL_RCC_ClockConfig+0x360>)
 8004f5a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004f5c:	4a0a      	ldr	r2, [pc, #40]	; (8004f88 <HAL_RCC_ClockConfig+0x364>)
 8004f5e:	693b      	ldr	r3, [r7, #16]
 8004f60:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8004f62:	4b0a      	ldr	r3, [pc, #40]	; (8004f8c <HAL_RCC_ClockConfig+0x368>)
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	4618      	mov	r0, r3
 8004f68:	f7fb ffc8 	bl	8000efc <HAL_InitTick>
 8004f6c:	4603      	mov	r3, r0
 8004f6e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8004f70:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f72:	4618      	mov	r0, r3
 8004f74:	3718      	adds	r7, #24
 8004f76:	46bd      	mov	sp, r7
 8004f78:	bd80      	pop	{r7, pc}
 8004f7a:	bf00      	nop
 8004f7c:	58024400 	.word	0x58024400
 8004f80:	08008184 	.word	0x08008184
 8004f84:	24000004 	.word	0x24000004
 8004f88:	24000000 	.word	0x24000000
 8004f8c:	24000008 	.word	0x24000008

08004f90 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004f90:	b480      	push	{r7}
 8004f92:	b089      	sub	sp, #36	; 0x24
 8004f94:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004f96:	4bb3      	ldr	r3, [pc, #716]	; (8005264 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004f98:	691b      	ldr	r3, [r3, #16]
 8004f9a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004f9e:	2b18      	cmp	r3, #24
 8004fa0:	f200 8155 	bhi.w	800524e <HAL_RCC_GetSysClockFreq+0x2be>
 8004fa4:	a201      	add	r2, pc, #4	; (adr r2, 8004fac <HAL_RCC_GetSysClockFreq+0x1c>)
 8004fa6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004faa:	bf00      	nop
 8004fac:	08005011 	.word	0x08005011
 8004fb0:	0800524f 	.word	0x0800524f
 8004fb4:	0800524f 	.word	0x0800524f
 8004fb8:	0800524f 	.word	0x0800524f
 8004fbc:	0800524f 	.word	0x0800524f
 8004fc0:	0800524f 	.word	0x0800524f
 8004fc4:	0800524f 	.word	0x0800524f
 8004fc8:	0800524f 	.word	0x0800524f
 8004fcc:	08005037 	.word	0x08005037
 8004fd0:	0800524f 	.word	0x0800524f
 8004fd4:	0800524f 	.word	0x0800524f
 8004fd8:	0800524f 	.word	0x0800524f
 8004fdc:	0800524f 	.word	0x0800524f
 8004fe0:	0800524f 	.word	0x0800524f
 8004fe4:	0800524f 	.word	0x0800524f
 8004fe8:	0800524f 	.word	0x0800524f
 8004fec:	0800503d 	.word	0x0800503d
 8004ff0:	0800524f 	.word	0x0800524f
 8004ff4:	0800524f 	.word	0x0800524f
 8004ff8:	0800524f 	.word	0x0800524f
 8004ffc:	0800524f 	.word	0x0800524f
 8005000:	0800524f 	.word	0x0800524f
 8005004:	0800524f 	.word	0x0800524f
 8005008:	0800524f 	.word	0x0800524f
 800500c:	08005043 	.word	0x08005043
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005010:	4b94      	ldr	r3, [pc, #592]	; (8005264 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	f003 0320 	and.w	r3, r3, #32
 8005018:	2b00      	cmp	r3, #0
 800501a:	d009      	beq.n	8005030 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800501c:	4b91      	ldr	r3, [pc, #580]	; (8005264 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	08db      	lsrs	r3, r3, #3
 8005022:	f003 0303 	and.w	r3, r3, #3
 8005026:	4a90      	ldr	r2, [pc, #576]	; (8005268 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005028:	fa22 f303 	lsr.w	r3, r2, r3
 800502c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800502e:	e111      	b.n	8005254 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8005030:	4b8d      	ldr	r3, [pc, #564]	; (8005268 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005032:	61bb      	str	r3, [r7, #24]
    break;
 8005034:	e10e      	b.n	8005254 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8005036:	4b8d      	ldr	r3, [pc, #564]	; (800526c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005038:	61bb      	str	r3, [r7, #24]
    break;
 800503a:	e10b      	b.n	8005254 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 800503c:	4b8c      	ldr	r3, [pc, #560]	; (8005270 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800503e:	61bb      	str	r3, [r7, #24]
    break;
 8005040:	e108      	b.n	8005254 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005042:	4b88      	ldr	r3, [pc, #544]	; (8005264 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005044:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005046:	f003 0303 	and.w	r3, r3, #3
 800504a:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 800504c:	4b85      	ldr	r3, [pc, #532]	; (8005264 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800504e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005050:	091b      	lsrs	r3, r3, #4
 8005052:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005056:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8005058:	4b82      	ldr	r3, [pc, #520]	; (8005264 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800505a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800505c:	f003 0301 	and.w	r3, r3, #1
 8005060:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8005062:	4b80      	ldr	r3, [pc, #512]	; (8005264 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005064:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005066:	08db      	lsrs	r3, r3, #3
 8005068:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800506c:	68fa      	ldr	r2, [r7, #12]
 800506e:	fb02 f303 	mul.w	r3, r2, r3
 8005072:	ee07 3a90 	vmov	s15, r3
 8005076:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800507a:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800507e:	693b      	ldr	r3, [r7, #16]
 8005080:	2b00      	cmp	r3, #0
 8005082:	f000 80e1 	beq.w	8005248 <HAL_RCC_GetSysClockFreq+0x2b8>
 8005086:	697b      	ldr	r3, [r7, #20]
 8005088:	2b02      	cmp	r3, #2
 800508a:	f000 8083 	beq.w	8005194 <HAL_RCC_GetSysClockFreq+0x204>
 800508e:	697b      	ldr	r3, [r7, #20]
 8005090:	2b02      	cmp	r3, #2
 8005092:	f200 80a1 	bhi.w	80051d8 <HAL_RCC_GetSysClockFreq+0x248>
 8005096:	697b      	ldr	r3, [r7, #20]
 8005098:	2b00      	cmp	r3, #0
 800509a:	d003      	beq.n	80050a4 <HAL_RCC_GetSysClockFreq+0x114>
 800509c:	697b      	ldr	r3, [r7, #20]
 800509e:	2b01      	cmp	r3, #1
 80050a0:	d056      	beq.n	8005150 <HAL_RCC_GetSysClockFreq+0x1c0>
 80050a2:	e099      	b.n	80051d8 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80050a4:	4b6f      	ldr	r3, [pc, #444]	; (8005264 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	f003 0320 	and.w	r3, r3, #32
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d02d      	beq.n	800510c <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80050b0:	4b6c      	ldr	r3, [pc, #432]	; (8005264 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	08db      	lsrs	r3, r3, #3
 80050b6:	f003 0303 	and.w	r3, r3, #3
 80050ba:	4a6b      	ldr	r2, [pc, #428]	; (8005268 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80050bc:	fa22 f303 	lsr.w	r3, r2, r3
 80050c0:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	ee07 3a90 	vmov	s15, r3
 80050c8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80050cc:	693b      	ldr	r3, [r7, #16]
 80050ce:	ee07 3a90 	vmov	s15, r3
 80050d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80050d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80050da:	4b62      	ldr	r3, [pc, #392]	; (8005264 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80050dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80050e2:	ee07 3a90 	vmov	s15, r3
 80050e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80050ea:	ed97 6a02 	vldr	s12, [r7, #8]
 80050ee:	eddf 5a61 	vldr	s11, [pc, #388]	; 8005274 <HAL_RCC_GetSysClockFreq+0x2e4>
 80050f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80050f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80050fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80050fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005102:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005106:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800510a:	e087      	b.n	800521c <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800510c:	693b      	ldr	r3, [r7, #16]
 800510e:	ee07 3a90 	vmov	s15, r3
 8005112:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005116:	eddf 6a58 	vldr	s13, [pc, #352]	; 8005278 <HAL_RCC_GetSysClockFreq+0x2e8>
 800511a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800511e:	4b51      	ldr	r3, [pc, #324]	; (8005264 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005122:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005126:	ee07 3a90 	vmov	s15, r3
 800512a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800512e:	ed97 6a02 	vldr	s12, [r7, #8]
 8005132:	eddf 5a50 	vldr	s11, [pc, #320]	; 8005274 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005136:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800513a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800513e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005142:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005146:	ee67 7a27 	vmul.f32	s15, s14, s15
 800514a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800514e:	e065      	b.n	800521c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005150:	693b      	ldr	r3, [r7, #16]
 8005152:	ee07 3a90 	vmov	s15, r3
 8005156:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800515a:	eddf 6a48 	vldr	s13, [pc, #288]	; 800527c <HAL_RCC_GetSysClockFreq+0x2ec>
 800515e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005162:	4b40      	ldr	r3, [pc, #256]	; (8005264 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005164:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005166:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800516a:	ee07 3a90 	vmov	s15, r3
 800516e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005172:	ed97 6a02 	vldr	s12, [r7, #8]
 8005176:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8005274 <HAL_RCC_GetSysClockFreq+0x2e4>
 800517a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800517e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005182:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005186:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800518a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800518e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005192:	e043      	b.n	800521c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005194:	693b      	ldr	r3, [r7, #16]
 8005196:	ee07 3a90 	vmov	s15, r3
 800519a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800519e:	eddf 6a38 	vldr	s13, [pc, #224]	; 8005280 <HAL_RCC_GetSysClockFreq+0x2f0>
 80051a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80051a6:	4b2f      	ldr	r3, [pc, #188]	; (8005264 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80051a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80051ae:	ee07 3a90 	vmov	s15, r3
 80051b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80051b6:	ed97 6a02 	vldr	s12, [r7, #8]
 80051ba:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8005274 <HAL_RCC_GetSysClockFreq+0x2e4>
 80051be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80051c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80051c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80051ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80051ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80051d2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80051d6:	e021      	b.n	800521c <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80051d8:	693b      	ldr	r3, [r7, #16]
 80051da:	ee07 3a90 	vmov	s15, r3
 80051de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80051e2:	eddf 6a26 	vldr	s13, [pc, #152]	; 800527c <HAL_RCC_GetSysClockFreq+0x2ec>
 80051e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80051ea:	4b1e      	ldr	r3, [pc, #120]	; (8005264 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80051ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80051f2:	ee07 3a90 	vmov	s15, r3
 80051f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80051fa:	ed97 6a02 	vldr	s12, [r7, #8]
 80051fe:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8005274 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005202:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005206:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800520a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800520e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005212:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005216:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800521a:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 800521c:	4b11      	ldr	r3, [pc, #68]	; (8005264 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800521e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005220:	0a5b      	lsrs	r3, r3, #9
 8005222:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005226:	3301      	adds	r3, #1
 8005228:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800522a:	683b      	ldr	r3, [r7, #0]
 800522c:	ee07 3a90 	vmov	s15, r3
 8005230:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005234:	edd7 6a07 	vldr	s13, [r7, #28]
 8005238:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800523c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005240:	ee17 3a90 	vmov	r3, s15
 8005244:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8005246:	e005      	b.n	8005254 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8005248:	2300      	movs	r3, #0
 800524a:	61bb      	str	r3, [r7, #24]
    break;
 800524c:	e002      	b.n	8005254 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 800524e:	4b07      	ldr	r3, [pc, #28]	; (800526c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005250:	61bb      	str	r3, [r7, #24]
    break;
 8005252:	bf00      	nop
  }

  return sysclockfreq;
 8005254:	69bb      	ldr	r3, [r7, #24]
}
 8005256:	4618      	mov	r0, r3
 8005258:	3724      	adds	r7, #36	; 0x24
 800525a:	46bd      	mov	sp, r7
 800525c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005260:	4770      	bx	lr
 8005262:	bf00      	nop
 8005264:	58024400 	.word	0x58024400
 8005268:	03d09000 	.word	0x03d09000
 800526c:	003d0900 	.word	0x003d0900
 8005270:	007a1200 	.word	0x007a1200
 8005274:	46000000 	.word	0x46000000
 8005278:	4c742400 	.word	0x4c742400
 800527c:	4a742400 	.word	0x4a742400
 8005280:	4af42400 	.word	0x4af42400

08005284 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005284:	b580      	push	{r7, lr}
 8005286:	b082      	sub	sp, #8
 8005288:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800528a:	f7ff fe81 	bl	8004f90 <HAL_RCC_GetSysClockFreq>
 800528e:	4602      	mov	r2, r0
 8005290:	4b10      	ldr	r3, [pc, #64]	; (80052d4 <HAL_RCC_GetHCLKFreq+0x50>)
 8005292:	699b      	ldr	r3, [r3, #24]
 8005294:	0a1b      	lsrs	r3, r3, #8
 8005296:	f003 030f 	and.w	r3, r3, #15
 800529a:	490f      	ldr	r1, [pc, #60]	; (80052d8 <HAL_RCC_GetHCLKFreq+0x54>)
 800529c:	5ccb      	ldrb	r3, [r1, r3]
 800529e:	f003 031f 	and.w	r3, r3, #31
 80052a2:	fa22 f303 	lsr.w	r3, r2, r3
 80052a6:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80052a8:	4b0a      	ldr	r3, [pc, #40]	; (80052d4 <HAL_RCC_GetHCLKFreq+0x50>)
 80052aa:	699b      	ldr	r3, [r3, #24]
 80052ac:	f003 030f 	and.w	r3, r3, #15
 80052b0:	4a09      	ldr	r2, [pc, #36]	; (80052d8 <HAL_RCC_GetHCLKFreq+0x54>)
 80052b2:	5cd3      	ldrb	r3, [r2, r3]
 80052b4:	f003 031f 	and.w	r3, r3, #31
 80052b8:	687a      	ldr	r2, [r7, #4]
 80052ba:	fa22 f303 	lsr.w	r3, r2, r3
 80052be:	4a07      	ldr	r2, [pc, #28]	; (80052dc <HAL_RCC_GetHCLKFreq+0x58>)
 80052c0:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80052c2:	4a07      	ldr	r2, [pc, #28]	; (80052e0 <HAL_RCC_GetHCLKFreq+0x5c>)
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80052c8:	4b04      	ldr	r3, [pc, #16]	; (80052dc <HAL_RCC_GetHCLKFreq+0x58>)
 80052ca:	681b      	ldr	r3, [r3, #0]
}
 80052cc:	4618      	mov	r0, r3
 80052ce:	3708      	adds	r7, #8
 80052d0:	46bd      	mov	sp, r7
 80052d2:	bd80      	pop	{r7, pc}
 80052d4:	58024400 	.word	0x58024400
 80052d8:	08008184 	.word	0x08008184
 80052dc:	24000004 	.word	0x24000004
 80052e0:	24000000 	.word	0x24000000

080052e4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80052e4:	b580      	push	{r7, lr}
 80052e6:	b086      	sub	sp, #24
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80052ec:	2300      	movs	r3, #0
 80052ee:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80052f0:	2300      	movs	r3, #0
 80052f2:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d03f      	beq.n	8005380 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005304:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005308:	d02a      	beq.n	8005360 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800530a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800530e:	d824      	bhi.n	800535a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005310:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005314:	d018      	beq.n	8005348 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005316:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800531a:	d81e      	bhi.n	800535a <HAL_RCCEx_PeriphCLKConfig+0x76>
 800531c:	2b00      	cmp	r3, #0
 800531e:	d003      	beq.n	8005328 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8005320:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005324:	d007      	beq.n	8005336 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8005326:	e018      	b.n	800535a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005328:	4ba3      	ldr	r3, [pc, #652]	; (80055b8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800532a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800532c:	4aa2      	ldr	r2, [pc, #648]	; (80055b8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800532e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005332:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8005334:	e015      	b.n	8005362 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	3304      	adds	r3, #4
 800533a:	2102      	movs	r1, #2
 800533c:	4618      	mov	r0, r3
 800533e:	f001 fff9 	bl	8007334 <RCCEx_PLL2_Config>
 8005342:	4603      	mov	r3, r0
 8005344:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8005346:	e00c      	b.n	8005362 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	3324      	adds	r3, #36	; 0x24
 800534c:	2102      	movs	r1, #2
 800534e:	4618      	mov	r0, r3
 8005350:	f002 f8a2 	bl	8007498 <RCCEx_PLL3_Config>
 8005354:	4603      	mov	r3, r0
 8005356:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8005358:	e003      	b.n	8005362 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800535a:	2301      	movs	r3, #1
 800535c:	75fb      	strb	r3, [r7, #23]
      break;
 800535e:	e000      	b.n	8005362 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8005360:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005362:	7dfb      	ldrb	r3, [r7, #23]
 8005364:	2b00      	cmp	r3, #0
 8005366:	d109      	bne.n	800537c <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8005368:	4b93      	ldr	r3, [pc, #588]	; (80055b8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800536a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800536c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005374:	4990      	ldr	r1, [pc, #576]	; (80055b8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005376:	4313      	orrs	r3, r2
 8005378:	650b      	str	r3, [r1, #80]	; 0x50
 800537a:	e001      	b.n	8005380 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800537c:	7dfb      	ldrb	r3, [r7, #23]
 800537e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005388:	2b00      	cmp	r3, #0
 800538a:	d03d      	beq.n	8005408 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005390:	2b04      	cmp	r3, #4
 8005392:	d826      	bhi.n	80053e2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8005394:	a201      	add	r2, pc, #4	; (adr r2, 800539c <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8005396:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800539a:	bf00      	nop
 800539c:	080053b1 	.word	0x080053b1
 80053a0:	080053bf 	.word	0x080053bf
 80053a4:	080053d1 	.word	0x080053d1
 80053a8:	080053e9 	.word	0x080053e9
 80053ac:	080053e9 	.word	0x080053e9
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80053b0:	4b81      	ldr	r3, [pc, #516]	; (80055b8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80053b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053b4:	4a80      	ldr	r2, [pc, #512]	; (80055b8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80053b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80053ba:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80053bc:	e015      	b.n	80053ea <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	3304      	adds	r3, #4
 80053c2:	2100      	movs	r1, #0
 80053c4:	4618      	mov	r0, r3
 80053c6:	f001 ffb5 	bl	8007334 <RCCEx_PLL2_Config>
 80053ca:	4603      	mov	r3, r0
 80053cc:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80053ce:	e00c      	b.n	80053ea <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	3324      	adds	r3, #36	; 0x24
 80053d4:	2100      	movs	r1, #0
 80053d6:	4618      	mov	r0, r3
 80053d8:	f002 f85e 	bl	8007498 <RCCEx_PLL3_Config>
 80053dc:	4603      	mov	r3, r0
 80053de:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80053e0:	e003      	b.n	80053ea <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80053e2:	2301      	movs	r3, #1
 80053e4:	75fb      	strb	r3, [r7, #23]
      break;
 80053e6:	e000      	b.n	80053ea <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 80053e8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80053ea:	7dfb      	ldrb	r3, [r7, #23]
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d109      	bne.n	8005404 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80053f0:	4b71      	ldr	r3, [pc, #452]	; (80055b8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80053f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80053f4:	f023 0207 	bic.w	r2, r3, #7
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053fc:	496e      	ldr	r1, [pc, #440]	; (80055b8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80053fe:	4313      	orrs	r3, r2
 8005400:	650b      	str	r3, [r1, #80]	; 0x50
 8005402:	e001      	b.n	8005408 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005404:	7dfb      	ldrb	r3, [r7, #23]
 8005406:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005410:	2b00      	cmp	r3, #0
 8005412:	d042      	beq.n	800549a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005418:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800541c:	d02b      	beq.n	8005476 <HAL_RCCEx_PeriphCLKConfig+0x192>
 800541e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005422:	d825      	bhi.n	8005470 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8005424:	2bc0      	cmp	r3, #192	; 0xc0
 8005426:	d028      	beq.n	800547a <HAL_RCCEx_PeriphCLKConfig+0x196>
 8005428:	2bc0      	cmp	r3, #192	; 0xc0
 800542a:	d821      	bhi.n	8005470 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800542c:	2b80      	cmp	r3, #128	; 0x80
 800542e:	d016      	beq.n	800545e <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8005430:	2b80      	cmp	r3, #128	; 0x80
 8005432:	d81d      	bhi.n	8005470 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8005434:	2b00      	cmp	r3, #0
 8005436:	d002      	beq.n	800543e <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8005438:	2b40      	cmp	r3, #64	; 0x40
 800543a:	d007      	beq.n	800544c <HAL_RCCEx_PeriphCLKConfig+0x168>
 800543c:	e018      	b.n	8005470 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800543e:	4b5e      	ldr	r3, [pc, #376]	; (80055b8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005440:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005442:	4a5d      	ldr	r2, [pc, #372]	; (80055b8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005444:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005448:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800544a:	e017      	b.n	800547c <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	3304      	adds	r3, #4
 8005450:	2100      	movs	r1, #0
 8005452:	4618      	mov	r0, r3
 8005454:	f001 ff6e 	bl	8007334 <RCCEx_PLL2_Config>
 8005458:	4603      	mov	r3, r0
 800545a:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800545c:	e00e      	b.n	800547c <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	3324      	adds	r3, #36	; 0x24
 8005462:	2100      	movs	r1, #0
 8005464:	4618      	mov	r0, r3
 8005466:	f002 f817 	bl	8007498 <RCCEx_PLL3_Config>
 800546a:	4603      	mov	r3, r0
 800546c:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800546e:	e005      	b.n	800547c <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005470:	2301      	movs	r3, #1
 8005472:	75fb      	strb	r3, [r7, #23]
      break;
 8005474:	e002      	b.n	800547c <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8005476:	bf00      	nop
 8005478:	e000      	b.n	800547c <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800547a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800547c:	7dfb      	ldrb	r3, [r7, #23]
 800547e:	2b00      	cmp	r3, #0
 8005480:	d109      	bne.n	8005496 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8005482:	4b4d      	ldr	r3, [pc, #308]	; (80055b8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005484:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005486:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800548e:	494a      	ldr	r1, [pc, #296]	; (80055b8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005490:	4313      	orrs	r3, r2
 8005492:	650b      	str	r3, [r1, #80]	; 0x50
 8005494:	e001      	b.n	800549a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005496:	7dfb      	ldrb	r3, [r7, #23]
 8005498:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d049      	beq.n	800553a <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80054ac:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80054b0:	d030      	beq.n	8005514 <HAL_RCCEx_PeriphCLKConfig+0x230>
 80054b2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80054b6:	d82a      	bhi.n	800550e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80054b8:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80054bc:	d02c      	beq.n	8005518 <HAL_RCCEx_PeriphCLKConfig+0x234>
 80054be:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80054c2:	d824      	bhi.n	800550e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80054c4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80054c8:	d018      	beq.n	80054fc <HAL_RCCEx_PeriphCLKConfig+0x218>
 80054ca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80054ce:	d81e      	bhi.n	800550e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d003      	beq.n	80054dc <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 80054d4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80054d8:	d007      	beq.n	80054ea <HAL_RCCEx_PeriphCLKConfig+0x206>
 80054da:	e018      	b.n	800550e <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80054dc:	4b36      	ldr	r3, [pc, #216]	; (80055b8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80054de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054e0:	4a35      	ldr	r2, [pc, #212]	; (80055b8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80054e2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80054e6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80054e8:	e017      	b.n	800551a <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	3304      	adds	r3, #4
 80054ee:	2100      	movs	r1, #0
 80054f0:	4618      	mov	r0, r3
 80054f2:	f001 ff1f 	bl	8007334 <RCCEx_PLL2_Config>
 80054f6:	4603      	mov	r3, r0
 80054f8:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80054fa:	e00e      	b.n	800551a <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	3324      	adds	r3, #36	; 0x24
 8005500:	2100      	movs	r1, #0
 8005502:	4618      	mov	r0, r3
 8005504:	f001 ffc8 	bl	8007498 <RCCEx_PLL3_Config>
 8005508:	4603      	mov	r3, r0
 800550a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800550c:	e005      	b.n	800551a <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800550e:	2301      	movs	r3, #1
 8005510:	75fb      	strb	r3, [r7, #23]
      break;
 8005512:	e002      	b.n	800551a <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8005514:	bf00      	nop
 8005516:	e000      	b.n	800551a <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8005518:	bf00      	nop
    }

    if(ret == HAL_OK)
 800551a:	7dfb      	ldrb	r3, [r7, #23]
 800551c:	2b00      	cmp	r3, #0
 800551e:	d10a      	bne.n	8005536 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8005520:	4b25      	ldr	r3, [pc, #148]	; (80055b8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005522:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005524:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800552e:	4922      	ldr	r1, [pc, #136]	; (80055b8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005530:	4313      	orrs	r3, r2
 8005532:	658b      	str	r3, [r1, #88]	; 0x58
 8005534:	e001      	b.n	800553a <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005536:	7dfb      	ldrb	r3, [r7, #23]
 8005538:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005542:	2b00      	cmp	r3, #0
 8005544:	d04b      	beq.n	80055de <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800554c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005550:	d030      	beq.n	80055b4 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8005552:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005556:	d82a      	bhi.n	80055ae <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8005558:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800555c:	d02e      	beq.n	80055bc <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 800555e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005562:	d824      	bhi.n	80055ae <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8005564:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005568:	d018      	beq.n	800559c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 800556a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800556e:	d81e      	bhi.n	80055ae <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8005570:	2b00      	cmp	r3, #0
 8005572:	d003      	beq.n	800557c <HAL_RCCEx_PeriphCLKConfig+0x298>
 8005574:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005578:	d007      	beq.n	800558a <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800557a:	e018      	b.n	80055ae <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800557c:	4b0e      	ldr	r3, [pc, #56]	; (80055b8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800557e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005580:	4a0d      	ldr	r2, [pc, #52]	; (80055b8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005582:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005586:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005588:	e019      	b.n	80055be <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	3304      	adds	r3, #4
 800558e:	2100      	movs	r1, #0
 8005590:	4618      	mov	r0, r3
 8005592:	f001 fecf 	bl	8007334 <RCCEx_PLL2_Config>
 8005596:	4603      	mov	r3, r0
 8005598:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800559a:	e010      	b.n	80055be <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	3324      	adds	r3, #36	; 0x24
 80055a0:	2100      	movs	r1, #0
 80055a2:	4618      	mov	r0, r3
 80055a4:	f001 ff78 	bl	8007498 <RCCEx_PLL3_Config>
 80055a8:	4603      	mov	r3, r0
 80055aa:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80055ac:	e007      	b.n	80055be <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80055ae:	2301      	movs	r3, #1
 80055b0:	75fb      	strb	r3, [r7, #23]
      break;
 80055b2:	e004      	b.n	80055be <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 80055b4:	bf00      	nop
 80055b6:	e002      	b.n	80055be <HAL_RCCEx_PeriphCLKConfig+0x2da>
 80055b8:	58024400 	.word	0x58024400
      break;
 80055bc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80055be:	7dfb      	ldrb	r3, [r7, #23]
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d10a      	bne.n	80055da <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80055c4:	4b99      	ldr	r3, [pc, #612]	; (800582c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80055c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055c8:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80055d2:	4996      	ldr	r1, [pc, #600]	; (800582c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80055d4:	4313      	orrs	r3, r2
 80055d6:	658b      	str	r3, [r1, #88]	; 0x58
 80055d8:	e001      	b.n	80055de <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80055da:	7dfb      	ldrb	r3, [r7, #23]
 80055dc:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d032      	beq.n	8005650 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80055ee:	2b30      	cmp	r3, #48	; 0x30
 80055f0:	d01c      	beq.n	800562c <HAL_RCCEx_PeriphCLKConfig+0x348>
 80055f2:	2b30      	cmp	r3, #48	; 0x30
 80055f4:	d817      	bhi.n	8005626 <HAL_RCCEx_PeriphCLKConfig+0x342>
 80055f6:	2b20      	cmp	r3, #32
 80055f8:	d00c      	beq.n	8005614 <HAL_RCCEx_PeriphCLKConfig+0x330>
 80055fa:	2b20      	cmp	r3, #32
 80055fc:	d813      	bhi.n	8005626 <HAL_RCCEx_PeriphCLKConfig+0x342>
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d016      	beq.n	8005630 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8005602:	2b10      	cmp	r3, #16
 8005604:	d10f      	bne.n	8005626 <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005606:	4b89      	ldr	r3, [pc, #548]	; (800582c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005608:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800560a:	4a88      	ldr	r2, [pc, #544]	; (800582c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800560c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005610:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8005612:	e00e      	b.n	8005632 <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	3304      	adds	r3, #4
 8005618:	2102      	movs	r1, #2
 800561a:	4618      	mov	r0, r3
 800561c:	f001 fe8a 	bl	8007334 <RCCEx_PLL2_Config>
 8005620:	4603      	mov	r3, r0
 8005622:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8005624:	e005      	b.n	8005632 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8005626:	2301      	movs	r3, #1
 8005628:	75fb      	strb	r3, [r7, #23]
      break;
 800562a:	e002      	b.n	8005632 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 800562c:	bf00      	nop
 800562e:	e000      	b.n	8005632 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8005630:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005632:	7dfb      	ldrb	r3, [r7, #23]
 8005634:	2b00      	cmp	r3, #0
 8005636:	d109      	bne.n	800564c <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005638:	4b7c      	ldr	r3, [pc, #496]	; (800582c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800563a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800563c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005644:	4979      	ldr	r1, [pc, #484]	; (800582c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005646:	4313      	orrs	r3, r2
 8005648:	64cb      	str	r3, [r1, #76]	; 0x4c
 800564a:	e001      	b.n	8005650 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800564c:	7dfb      	ldrb	r3, [r7, #23]
 800564e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005658:	2b00      	cmp	r3, #0
 800565a:	d047      	beq.n	80056ec <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005660:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005664:	d030      	beq.n	80056c8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8005666:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800566a:	d82a      	bhi.n	80056c2 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 800566c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005670:	d02c      	beq.n	80056cc <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8005672:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005676:	d824      	bhi.n	80056c2 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8005678:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800567c:	d018      	beq.n	80056b0 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 800567e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005682:	d81e      	bhi.n	80056c2 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8005684:	2b00      	cmp	r3, #0
 8005686:	d003      	beq.n	8005690 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 8005688:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800568c:	d007      	beq.n	800569e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 800568e:	e018      	b.n	80056c2 <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005690:	4b66      	ldr	r3, [pc, #408]	; (800582c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005692:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005694:	4a65      	ldr	r2, [pc, #404]	; (800582c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005696:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800569a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800569c:	e017      	b.n	80056ce <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	3304      	adds	r3, #4
 80056a2:	2100      	movs	r1, #0
 80056a4:	4618      	mov	r0, r3
 80056a6:	f001 fe45 	bl	8007334 <RCCEx_PLL2_Config>
 80056aa:	4603      	mov	r3, r0
 80056ac:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80056ae:	e00e      	b.n	80056ce <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	3324      	adds	r3, #36	; 0x24
 80056b4:	2100      	movs	r1, #0
 80056b6:	4618      	mov	r0, r3
 80056b8:	f001 feee 	bl	8007498 <RCCEx_PLL3_Config>
 80056bc:	4603      	mov	r3, r0
 80056be:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80056c0:	e005      	b.n	80056ce <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80056c2:	2301      	movs	r3, #1
 80056c4:	75fb      	strb	r3, [r7, #23]
      break;
 80056c6:	e002      	b.n	80056ce <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 80056c8:	bf00      	nop
 80056ca:	e000      	b.n	80056ce <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 80056cc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80056ce:	7dfb      	ldrb	r3, [r7, #23]
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d109      	bne.n	80056e8 <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80056d4:	4b55      	ldr	r3, [pc, #340]	; (800582c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80056d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80056d8:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80056e0:	4952      	ldr	r1, [pc, #328]	; (800582c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80056e2:	4313      	orrs	r3, r2
 80056e4:	650b      	str	r3, [r1, #80]	; 0x50
 80056e6:	e001      	b.n	80056ec <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80056e8:	7dfb      	ldrb	r3, [r7, #23]
 80056ea:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d049      	beq.n	800578c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80056fc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005700:	d02e      	beq.n	8005760 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8005702:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005706:	d828      	bhi.n	800575a <HAL_RCCEx_PeriphCLKConfig+0x476>
 8005708:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800570c:	d02a      	beq.n	8005764 <HAL_RCCEx_PeriphCLKConfig+0x480>
 800570e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005712:	d822      	bhi.n	800575a <HAL_RCCEx_PeriphCLKConfig+0x476>
 8005714:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005718:	d026      	beq.n	8005768 <HAL_RCCEx_PeriphCLKConfig+0x484>
 800571a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800571e:	d81c      	bhi.n	800575a <HAL_RCCEx_PeriphCLKConfig+0x476>
 8005720:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005724:	d010      	beq.n	8005748 <HAL_RCCEx_PeriphCLKConfig+0x464>
 8005726:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800572a:	d816      	bhi.n	800575a <HAL_RCCEx_PeriphCLKConfig+0x476>
 800572c:	2b00      	cmp	r3, #0
 800572e:	d01d      	beq.n	800576c <HAL_RCCEx_PeriphCLKConfig+0x488>
 8005730:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005734:	d111      	bne.n	800575a <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	3304      	adds	r3, #4
 800573a:	2101      	movs	r1, #1
 800573c:	4618      	mov	r0, r3
 800573e:	f001 fdf9 	bl	8007334 <RCCEx_PLL2_Config>
 8005742:	4603      	mov	r3, r0
 8005744:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8005746:	e012      	b.n	800576e <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	3324      	adds	r3, #36	; 0x24
 800574c:	2101      	movs	r1, #1
 800574e:	4618      	mov	r0, r3
 8005750:	f001 fea2 	bl	8007498 <RCCEx_PLL3_Config>
 8005754:	4603      	mov	r3, r0
 8005756:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8005758:	e009      	b.n	800576e <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800575a:	2301      	movs	r3, #1
 800575c:	75fb      	strb	r3, [r7, #23]
      break;
 800575e:	e006      	b.n	800576e <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8005760:	bf00      	nop
 8005762:	e004      	b.n	800576e <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8005764:	bf00      	nop
 8005766:	e002      	b.n	800576e <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8005768:	bf00      	nop
 800576a:	e000      	b.n	800576e <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 800576c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800576e:	7dfb      	ldrb	r3, [r7, #23]
 8005770:	2b00      	cmp	r3, #0
 8005772:	d109      	bne.n	8005788 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8005774:	4b2d      	ldr	r3, [pc, #180]	; (800582c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005776:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005778:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005780:	492a      	ldr	r1, [pc, #168]	; (800582c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005782:	4313      	orrs	r3, r2
 8005784:	650b      	str	r3, [r1, #80]	; 0x50
 8005786:	e001      	b.n	800578c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005788:	7dfb      	ldrb	r3, [r7, #23]
 800578a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005794:	2b00      	cmp	r3, #0
 8005796:	d04d      	beq.n	8005834 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800579e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80057a2:	d02e      	beq.n	8005802 <HAL_RCCEx_PeriphCLKConfig+0x51e>
 80057a4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80057a8:	d828      	bhi.n	80057fc <HAL_RCCEx_PeriphCLKConfig+0x518>
 80057aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80057ae:	d02a      	beq.n	8005806 <HAL_RCCEx_PeriphCLKConfig+0x522>
 80057b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80057b4:	d822      	bhi.n	80057fc <HAL_RCCEx_PeriphCLKConfig+0x518>
 80057b6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80057ba:	d026      	beq.n	800580a <HAL_RCCEx_PeriphCLKConfig+0x526>
 80057bc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80057c0:	d81c      	bhi.n	80057fc <HAL_RCCEx_PeriphCLKConfig+0x518>
 80057c2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80057c6:	d010      	beq.n	80057ea <HAL_RCCEx_PeriphCLKConfig+0x506>
 80057c8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80057cc:	d816      	bhi.n	80057fc <HAL_RCCEx_PeriphCLKConfig+0x518>
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d01d      	beq.n	800580e <HAL_RCCEx_PeriphCLKConfig+0x52a>
 80057d2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80057d6:	d111      	bne.n	80057fc <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	3304      	adds	r3, #4
 80057dc:	2101      	movs	r1, #1
 80057de:	4618      	mov	r0, r3
 80057e0:	f001 fda8 	bl	8007334 <RCCEx_PLL2_Config>
 80057e4:	4603      	mov	r3, r0
 80057e6:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80057e8:	e012      	b.n	8005810 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	3324      	adds	r3, #36	; 0x24
 80057ee:	2101      	movs	r1, #1
 80057f0:	4618      	mov	r0, r3
 80057f2:	f001 fe51 	bl	8007498 <RCCEx_PLL3_Config>
 80057f6:	4603      	mov	r3, r0
 80057f8:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80057fa:	e009      	b.n	8005810 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 80057fc:	2301      	movs	r3, #1
 80057fe:	75fb      	strb	r3, [r7, #23]
      break;
 8005800:	e006      	b.n	8005810 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8005802:	bf00      	nop
 8005804:	e004      	b.n	8005810 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8005806:	bf00      	nop
 8005808:	e002      	b.n	8005810 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800580a:	bf00      	nop
 800580c:	e000      	b.n	8005810 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800580e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005810:	7dfb      	ldrb	r3, [r7, #23]
 8005812:	2b00      	cmp	r3, #0
 8005814:	d10c      	bne.n	8005830 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8005816:	4b05      	ldr	r3, [pc, #20]	; (800582c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005818:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800581a:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005824:	4901      	ldr	r1, [pc, #4]	; (800582c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005826:	4313      	orrs	r3, r2
 8005828:	658b      	str	r3, [r1, #88]	; 0x58
 800582a:	e003      	b.n	8005834 <HAL_RCCEx_PeriphCLKConfig+0x550>
 800582c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005830:	7dfb      	ldrb	r3, [r7, #23]
 8005832:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800583c:	2b00      	cmp	r3, #0
 800583e:	d02f      	beq.n	80058a0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005844:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005848:	d00e      	beq.n	8005868 <HAL_RCCEx_PeriphCLKConfig+0x584>
 800584a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800584e:	d814      	bhi.n	800587a <HAL_RCCEx_PeriphCLKConfig+0x596>
 8005850:	2b00      	cmp	r3, #0
 8005852:	d015      	beq.n	8005880 <HAL_RCCEx_PeriphCLKConfig+0x59c>
 8005854:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005858:	d10f      	bne.n	800587a <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800585a:	4baf      	ldr	r3, [pc, #700]	; (8005b18 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800585c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800585e:	4aae      	ldr	r2, [pc, #696]	; (8005b18 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005860:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005864:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8005866:	e00c      	b.n	8005882 <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	3304      	adds	r3, #4
 800586c:	2101      	movs	r1, #1
 800586e:	4618      	mov	r0, r3
 8005870:	f001 fd60 	bl	8007334 <RCCEx_PLL2_Config>
 8005874:	4603      	mov	r3, r0
 8005876:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8005878:	e003      	b.n	8005882 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800587a:	2301      	movs	r3, #1
 800587c:	75fb      	strb	r3, [r7, #23]
      break;
 800587e:	e000      	b.n	8005882 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 8005880:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005882:	7dfb      	ldrb	r3, [r7, #23]
 8005884:	2b00      	cmp	r3, #0
 8005886:	d109      	bne.n	800589c <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005888:	4ba3      	ldr	r3, [pc, #652]	; (8005b18 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800588a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800588c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005894:	49a0      	ldr	r1, [pc, #640]	; (8005b18 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005896:	4313      	orrs	r3, r2
 8005898:	650b      	str	r3, [r1, #80]	; 0x50
 800589a:	e001      	b.n	80058a0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800589c:	7dfb      	ldrb	r3, [r7, #23]
 800589e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d032      	beq.n	8005912 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058b0:	2b03      	cmp	r3, #3
 80058b2:	d81b      	bhi.n	80058ec <HAL_RCCEx_PeriphCLKConfig+0x608>
 80058b4:	a201      	add	r2, pc, #4	; (adr r2, 80058bc <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 80058b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058ba:	bf00      	nop
 80058bc:	080058f3 	.word	0x080058f3
 80058c0:	080058cd 	.word	0x080058cd
 80058c4:	080058db 	.word	0x080058db
 80058c8:	080058f3 	.word	0x080058f3
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80058cc:	4b92      	ldr	r3, [pc, #584]	; (8005b18 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80058ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058d0:	4a91      	ldr	r2, [pc, #580]	; (8005b18 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80058d2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80058d6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 80058d8:	e00c      	b.n	80058f4 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	3304      	adds	r3, #4
 80058de:	2102      	movs	r1, #2
 80058e0:	4618      	mov	r0, r3
 80058e2:	f001 fd27 	bl	8007334 <RCCEx_PLL2_Config>
 80058e6:	4603      	mov	r3, r0
 80058e8:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 80058ea:	e003      	b.n	80058f4 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80058ec:	2301      	movs	r3, #1
 80058ee:	75fb      	strb	r3, [r7, #23]
      break;
 80058f0:	e000      	b.n	80058f4 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 80058f2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80058f4:	7dfb      	ldrb	r3, [r7, #23]
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d109      	bne.n	800590e <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80058fa:	4b87      	ldr	r3, [pc, #540]	; (8005b18 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80058fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80058fe:	f023 0203 	bic.w	r2, r3, #3
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005906:	4984      	ldr	r1, [pc, #528]	; (8005b18 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005908:	4313      	orrs	r3, r2
 800590a:	64cb      	str	r3, [r1, #76]	; 0x4c
 800590c:	e001      	b.n	8005912 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800590e:	7dfb      	ldrb	r3, [r7, #23]
 8005910:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800591a:	2b00      	cmp	r3, #0
 800591c:	f000 8086 	beq.w	8005a2c <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005920:	4b7e      	ldr	r3, [pc, #504]	; (8005b1c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	4a7d      	ldr	r2, [pc, #500]	; (8005b1c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8005926:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800592a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800592c:	f7fb fb30 	bl	8000f90 <HAL_GetTick>
 8005930:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005932:	e009      	b.n	8005948 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005934:	f7fb fb2c 	bl	8000f90 <HAL_GetTick>
 8005938:	4602      	mov	r2, r0
 800593a:	693b      	ldr	r3, [r7, #16]
 800593c:	1ad3      	subs	r3, r2, r3
 800593e:	2b64      	cmp	r3, #100	; 0x64
 8005940:	d902      	bls.n	8005948 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8005942:	2303      	movs	r3, #3
 8005944:	75fb      	strb	r3, [r7, #23]
        break;
 8005946:	e005      	b.n	8005954 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005948:	4b74      	ldr	r3, [pc, #464]	; (8005b1c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005950:	2b00      	cmp	r3, #0
 8005952:	d0ef      	beq.n	8005934 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8005954:	7dfb      	ldrb	r3, [r7, #23]
 8005956:	2b00      	cmp	r3, #0
 8005958:	d166      	bne.n	8005a28 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800595a:	4b6f      	ldr	r3, [pc, #444]	; (8005b18 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800595c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005964:	4053      	eors	r3, r2
 8005966:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800596a:	2b00      	cmp	r3, #0
 800596c:	d013      	beq.n	8005996 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800596e:	4b6a      	ldr	r3, [pc, #424]	; (8005b18 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005970:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005972:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005976:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005978:	4b67      	ldr	r3, [pc, #412]	; (8005b18 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800597a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800597c:	4a66      	ldr	r2, [pc, #408]	; (8005b18 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800597e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005982:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005984:	4b64      	ldr	r3, [pc, #400]	; (8005b18 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005986:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005988:	4a63      	ldr	r2, [pc, #396]	; (8005b18 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800598a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800598e:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8005990:	4a61      	ldr	r2, [pc, #388]	; (8005b18 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800599c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80059a0:	d115      	bne.n	80059ce <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059a2:	f7fb faf5 	bl	8000f90 <HAL_GetTick>
 80059a6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80059a8:	e00b      	b.n	80059c2 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80059aa:	f7fb faf1 	bl	8000f90 <HAL_GetTick>
 80059ae:	4602      	mov	r2, r0
 80059b0:	693b      	ldr	r3, [r7, #16]
 80059b2:	1ad3      	subs	r3, r2, r3
 80059b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80059b8:	4293      	cmp	r3, r2
 80059ba:	d902      	bls.n	80059c2 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 80059bc:	2303      	movs	r3, #3
 80059be:	75fb      	strb	r3, [r7, #23]
            break;
 80059c0:	e005      	b.n	80059ce <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80059c2:	4b55      	ldr	r3, [pc, #340]	; (8005b18 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80059c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059c6:	f003 0302 	and.w	r3, r3, #2
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d0ed      	beq.n	80059aa <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 80059ce:	7dfb      	ldrb	r3, [r7, #23]
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d126      	bne.n	8005a22 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80059da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80059de:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80059e2:	d10d      	bne.n	8005a00 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 80059e4:	4b4c      	ldr	r3, [pc, #304]	; (8005b18 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80059e6:	691b      	ldr	r3, [r3, #16]
 80059e8:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80059f2:	0919      	lsrs	r1, r3, #4
 80059f4:	4b4a      	ldr	r3, [pc, #296]	; (8005b20 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 80059f6:	400b      	ands	r3, r1
 80059f8:	4947      	ldr	r1, [pc, #284]	; (8005b18 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80059fa:	4313      	orrs	r3, r2
 80059fc:	610b      	str	r3, [r1, #16]
 80059fe:	e005      	b.n	8005a0c <HAL_RCCEx_PeriphCLKConfig+0x728>
 8005a00:	4b45      	ldr	r3, [pc, #276]	; (8005b18 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005a02:	691b      	ldr	r3, [r3, #16]
 8005a04:	4a44      	ldr	r2, [pc, #272]	; (8005b18 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005a06:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8005a0a:	6113      	str	r3, [r2, #16]
 8005a0c:	4b42      	ldr	r3, [pc, #264]	; (8005b18 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005a0e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005a16:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005a1a:	493f      	ldr	r1, [pc, #252]	; (8005b18 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005a1c:	4313      	orrs	r3, r2
 8005a1e:	670b      	str	r3, [r1, #112]	; 0x70
 8005a20:	e004      	b.n	8005a2c <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005a22:	7dfb      	ldrb	r3, [r7, #23]
 8005a24:	75bb      	strb	r3, [r7, #22]
 8005a26:	e001      	b.n	8005a2c <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a28:	7dfb      	ldrb	r3, [r7, #23]
 8005a2a:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	f003 0301 	and.w	r3, r3, #1
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	f000 8085 	beq.w	8005b44 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005a3e:	2b28      	cmp	r3, #40	; 0x28
 8005a40:	d866      	bhi.n	8005b10 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8005a42:	a201      	add	r2, pc, #4	; (adr r2, 8005a48 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8005a44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a48:	08005b25 	.word	0x08005b25
 8005a4c:	08005b11 	.word	0x08005b11
 8005a50:	08005b11 	.word	0x08005b11
 8005a54:	08005b11 	.word	0x08005b11
 8005a58:	08005b11 	.word	0x08005b11
 8005a5c:	08005b11 	.word	0x08005b11
 8005a60:	08005b11 	.word	0x08005b11
 8005a64:	08005b11 	.word	0x08005b11
 8005a68:	08005aed 	.word	0x08005aed
 8005a6c:	08005b11 	.word	0x08005b11
 8005a70:	08005b11 	.word	0x08005b11
 8005a74:	08005b11 	.word	0x08005b11
 8005a78:	08005b11 	.word	0x08005b11
 8005a7c:	08005b11 	.word	0x08005b11
 8005a80:	08005b11 	.word	0x08005b11
 8005a84:	08005b11 	.word	0x08005b11
 8005a88:	08005aff 	.word	0x08005aff
 8005a8c:	08005b11 	.word	0x08005b11
 8005a90:	08005b11 	.word	0x08005b11
 8005a94:	08005b11 	.word	0x08005b11
 8005a98:	08005b11 	.word	0x08005b11
 8005a9c:	08005b11 	.word	0x08005b11
 8005aa0:	08005b11 	.word	0x08005b11
 8005aa4:	08005b11 	.word	0x08005b11
 8005aa8:	08005b25 	.word	0x08005b25
 8005aac:	08005b11 	.word	0x08005b11
 8005ab0:	08005b11 	.word	0x08005b11
 8005ab4:	08005b11 	.word	0x08005b11
 8005ab8:	08005b11 	.word	0x08005b11
 8005abc:	08005b11 	.word	0x08005b11
 8005ac0:	08005b11 	.word	0x08005b11
 8005ac4:	08005b11 	.word	0x08005b11
 8005ac8:	08005b25 	.word	0x08005b25
 8005acc:	08005b11 	.word	0x08005b11
 8005ad0:	08005b11 	.word	0x08005b11
 8005ad4:	08005b11 	.word	0x08005b11
 8005ad8:	08005b11 	.word	0x08005b11
 8005adc:	08005b11 	.word	0x08005b11
 8005ae0:	08005b11 	.word	0x08005b11
 8005ae4:	08005b11 	.word	0x08005b11
 8005ae8:	08005b25 	.word	0x08005b25
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	3304      	adds	r3, #4
 8005af0:	2101      	movs	r1, #1
 8005af2:	4618      	mov	r0, r3
 8005af4:	f001 fc1e 	bl	8007334 <RCCEx_PLL2_Config>
 8005af8:	4603      	mov	r3, r0
 8005afa:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8005afc:	e013      	b.n	8005b26 <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	3324      	adds	r3, #36	; 0x24
 8005b02:	2101      	movs	r1, #1
 8005b04:	4618      	mov	r0, r3
 8005b06:	f001 fcc7 	bl	8007498 <RCCEx_PLL3_Config>
 8005b0a:	4603      	mov	r3, r0
 8005b0c:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8005b0e:	e00a      	b.n	8005b26 <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005b10:	2301      	movs	r3, #1
 8005b12:	75fb      	strb	r3, [r7, #23]
      break;
 8005b14:	e007      	b.n	8005b26 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8005b16:	bf00      	nop
 8005b18:	58024400 	.word	0x58024400
 8005b1c:	58024800 	.word	0x58024800
 8005b20:	00ffffcf 	.word	0x00ffffcf
      break;
 8005b24:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005b26:	7dfb      	ldrb	r3, [r7, #23]
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d109      	bne.n	8005b40 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8005b2c:	4b96      	ldr	r3, [pc, #600]	; (8005d88 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8005b2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b30:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005b38:	4993      	ldr	r1, [pc, #588]	; (8005d88 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8005b3a:	4313      	orrs	r3, r2
 8005b3c:	654b      	str	r3, [r1, #84]	; 0x54
 8005b3e:	e001      	b.n	8005b44 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b40:	7dfb      	ldrb	r3, [r7, #23]
 8005b42:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	f003 0302 	and.w	r3, r3, #2
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d038      	beq.n	8005bc2 <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005b54:	2b05      	cmp	r3, #5
 8005b56:	d821      	bhi.n	8005b9c <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 8005b58:	a201      	add	r2, pc, #4	; (adr r2, 8005b60 <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 8005b5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b5e:	bf00      	nop
 8005b60:	08005ba3 	.word	0x08005ba3
 8005b64:	08005b79 	.word	0x08005b79
 8005b68:	08005b8b 	.word	0x08005b8b
 8005b6c:	08005ba3 	.word	0x08005ba3
 8005b70:	08005ba3 	.word	0x08005ba3
 8005b74:	08005ba3 	.word	0x08005ba3
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	3304      	adds	r3, #4
 8005b7c:	2101      	movs	r1, #1
 8005b7e:	4618      	mov	r0, r3
 8005b80:	f001 fbd8 	bl	8007334 <RCCEx_PLL2_Config>
 8005b84:	4603      	mov	r3, r0
 8005b86:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8005b88:	e00c      	b.n	8005ba4 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	3324      	adds	r3, #36	; 0x24
 8005b8e:	2101      	movs	r1, #1
 8005b90:	4618      	mov	r0, r3
 8005b92:	f001 fc81 	bl	8007498 <RCCEx_PLL3_Config>
 8005b96:	4603      	mov	r3, r0
 8005b98:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8005b9a:	e003      	b.n	8005ba4 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005b9c:	2301      	movs	r3, #1
 8005b9e:	75fb      	strb	r3, [r7, #23]
      break;
 8005ba0:	e000      	b.n	8005ba4 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 8005ba2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005ba4:	7dfb      	ldrb	r3, [r7, #23]
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d109      	bne.n	8005bbe <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8005baa:	4b77      	ldr	r3, [pc, #476]	; (8005d88 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8005bac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005bae:	f023 0207 	bic.w	r2, r3, #7
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005bb6:	4974      	ldr	r1, [pc, #464]	; (8005d88 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8005bb8:	4313      	orrs	r3, r2
 8005bba:	654b      	str	r3, [r1, #84]	; 0x54
 8005bbc:	e001      	b.n	8005bc2 <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005bbe:	7dfb      	ldrb	r3, [r7, #23]
 8005bc0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	f003 0304 	and.w	r3, r3, #4
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d03a      	beq.n	8005c44 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005bd4:	2b05      	cmp	r3, #5
 8005bd6:	d821      	bhi.n	8005c1c <HAL_RCCEx_PeriphCLKConfig+0x938>
 8005bd8:	a201      	add	r2, pc, #4	; (adr r2, 8005be0 <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 8005bda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bde:	bf00      	nop
 8005be0:	08005c23 	.word	0x08005c23
 8005be4:	08005bf9 	.word	0x08005bf9
 8005be8:	08005c0b 	.word	0x08005c0b
 8005bec:	08005c23 	.word	0x08005c23
 8005bf0:	08005c23 	.word	0x08005c23
 8005bf4:	08005c23 	.word	0x08005c23
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	3304      	adds	r3, #4
 8005bfc:	2101      	movs	r1, #1
 8005bfe:	4618      	mov	r0, r3
 8005c00:	f001 fb98 	bl	8007334 <RCCEx_PLL2_Config>
 8005c04:	4603      	mov	r3, r0
 8005c06:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8005c08:	e00c      	b.n	8005c24 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	3324      	adds	r3, #36	; 0x24
 8005c0e:	2101      	movs	r1, #1
 8005c10:	4618      	mov	r0, r3
 8005c12:	f001 fc41 	bl	8007498 <RCCEx_PLL3_Config>
 8005c16:	4603      	mov	r3, r0
 8005c18:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8005c1a:	e003      	b.n	8005c24 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005c1c:	2301      	movs	r3, #1
 8005c1e:	75fb      	strb	r3, [r7, #23]
      break;
 8005c20:	e000      	b.n	8005c24 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 8005c22:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005c24:	7dfb      	ldrb	r3, [r7, #23]
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d10a      	bne.n	8005c40 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005c2a:	4b57      	ldr	r3, [pc, #348]	; (8005d88 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8005c2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c2e:	f023 0207 	bic.w	r2, r3, #7
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c38:	4953      	ldr	r1, [pc, #332]	; (8005d88 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8005c3a:	4313      	orrs	r3, r2
 8005c3c:	658b      	str	r3, [r1, #88]	; 0x58
 8005c3e:	e001      	b.n	8005c44 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c40:	7dfb      	ldrb	r3, [r7, #23]
 8005c42:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	f003 0320 	and.w	r3, r3, #32
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d04b      	beq.n	8005ce8 <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005c56:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005c5a:	d02e      	beq.n	8005cba <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8005c5c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005c60:	d828      	bhi.n	8005cb4 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8005c62:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c66:	d02a      	beq.n	8005cbe <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8005c68:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c6c:	d822      	bhi.n	8005cb4 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8005c6e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005c72:	d026      	beq.n	8005cc2 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8005c74:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005c78:	d81c      	bhi.n	8005cb4 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8005c7a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005c7e:	d010      	beq.n	8005ca2 <HAL_RCCEx_PeriphCLKConfig+0x9be>
 8005c80:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005c84:	d816      	bhi.n	8005cb4 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d01d      	beq.n	8005cc6 <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 8005c8a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005c8e:	d111      	bne.n	8005cb4 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	3304      	adds	r3, #4
 8005c94:	2100      	movs	r1, #0
 8005c96:	4618      	mov	r0, r3
 8005c98:	f001 fb4c 	bl	8007334 <RCCEx_PLL2_Config>
 8005c9c:	4603      	mov	r3, r0
 8005c9e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8005ca0:	e012      	b.n	8005cc8 <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	3324      	adds	r3, #36	; 0x24
 8005ca6:	2102      	movs	r1, #2
 8005ca8:	4618      	mov	r0, r3
 8005caa:	f001 fbf5 	bl	8007498 <RCCEx_PLL3_Config>
 8005cae:	4603      	mov	r3, r0
 8005cb0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8005cb2:	e009      	b.n	8005cc8 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005cb4:	2301      	movs	r3, #1
 8005cb6:	75fb      	strb	r3, [r7, #23]
      break;
 8005cb8:	e006      	b.n	8005cc8 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8005cba:	bf00      	nop
 8005cbc:	e004      	b.n	8005cc8 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8005cbe:	bf00      	nop
 8005cc0:	e002      	b.n	8005cc8 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8005cc2:	bf00      	nop
 8005cc4:	e000      	b.n	8005cc8 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8005cc6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005cc8:	7dfb      	ldrb	r3, [r7, #23]
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d10a      	bne.n	8005ce4 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005cce:	4b2e      	ldr	r3, [pc, #184]	; (8005d88 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8005cd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005cd2:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005cdc:	492a      	ldr	r1, [pc, #168]	; (8005d88 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8005cde:	4313      	orrs	r3, r2
 8005ce0:	654b      	str	r3, [r1, #84]	; 0x54
 8005ce2:	e001      	b.n	8005ce8 <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ce4:	7dfb      	ldrb	r3, [r7, #23]
 8005ce6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d04d      	beq.n	8005d90 <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005cfa:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8005cfe:	d02e      	beq.n	8005d5e <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8005d00:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8005d04:	d828      	bhi.n	8005d58 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8005d06:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d0a:	d02a      	beq.n	8005d62 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8005d0c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d10:	d822      	bhi.n	8005d58 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8005d12:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005d16:	d026      	beq.n	8005d66 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8005d18:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005d1c:	d81c      	bhi.n	8005d58 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8005d1e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005d22:	d010      	beq.n	8005d46 <HAL_RCCEx_PeriphCLKConfig+0xa62>
 8005d24:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005d28:	d816      	bhi.n	8005d58 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d01d      	beq.n	8005d6a <HAL_RCCEx_PeriphCLKConfig+0xa86>
 8005d2e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d32:	d111      	bne.n	8005d58 <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	3304      	adds	r3, #4
 8005d38:	2100      	movs	r1, #0
 8005d3a:	4618      	mov	r0, r3
 8005d3c:	f001 fafa 	bl	8007334 <RCCEx_PLL2_Config>
 8005d40:	4603      	mov	r3, r0
 8005d42:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8005d44:	e012      	b.n	8005d6c <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	3324      	adds	r3, #36	; 0x24
 8005d4a:	2102      	movs	r1, #2
 8005d4c:	4618      	mov	r0, r3
 8005d4e:	f001 fba3 	bl	8007498 <RCCEx_PLL3_Config>
 8005d52:	4603      	mov	r3, r0
 8005d54:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8005d56:	e009      	b.n	8005d6c <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005d58:	2301      	movs	r3, #1
 8005d5a:	75fb      	strb	r3, [r7, #23]
      break;
 8005d5c:	e006      	b.n	8005d6c <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8005d5e:	bf00      	nop
 8005d60:	e004      	b.n	8005d6c <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8005d62:	bf00      	nop
 8005d64:	e002      	b.n	8005d6c <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8005d66:	bf00      	nop
 8005d68:	e000      	b.n	8005d6c <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8005d6a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005d6c:	7dfb      	ldrb	r3, [r7, #23]
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d10c      	bne.n	8005d8c <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005d72:	4b05      	ldr	r3, [pc, #20]	; (8005d88 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8005d74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d76:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005d80:	4901      	ldr	r1, [pc, #4]	; (8005d88 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8005d82:	4313      	orrs	r3, r2
 8005d84:	658b      	str	r3, [r1, #88]	; 0x58
 8005d86:	e003      	b.n	8005d90 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8005d88:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d8c:	7dfb      	ldrb	r3, [r7, #23]
 8005d8e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d04b      	beq.n	8005e34 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005da2:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8005da6:	d02e      	beq.n	8005e06 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8005da8:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8005dac:	d828      	bhi.n	8005e00 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8005dae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005db2:	d02a      	beq.n	8005e0a <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8005db4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005db8:	d822      	bhi.n	8005e00 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8005dba:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8005dbe:	d026      	beq.n	8005e0e <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 8005dc0:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8005dc4:	d81c      	bhi.n	8005e00 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8005dc6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005dca:	d010      	beq.n	8005dee <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 8005dcc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005dd0:	d816      	bhi.n	8005e00 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d01d      	beq.n	8005e12 <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 8005dd6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005dda:	d111      	bne.n	8005e00 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	3304      	adds	r3, #4
 8005de0:	2100      	movs	r1, #0
 8005de2:	4618      	mov	r0, r3
 8005de4:	f001 faa6 	bl	8007334 <RCCEx_PLL2_Config>
 8005de8:	4603      	mov	r3, r0
 8005dea:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8005dec:	e012      	b.n	8005e14 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	3324      	adds	r3, #36	; 0x24
 8005df2:	2102      	movs	r1, #2
 8005df4:	4618      	mov	r0, r3
 8005df6:	f001 fb4f 	bl	8007498 <RCCEx_PLL3_Config>
 8005dfa:	4603      	mov	r3, r0
 8005dfc:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8005dfe:	e009      	b.n	8005e14 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005e00:	2301      	movs	r3, #1
 8005e02:	75fb      	strb	r3, [r7, #23]
      break;
 8005e04:	e006      	b.n	8005e14 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8005e06:	bf00      	nop
 8005e08:	e004      	b.n	8005e14 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8005e0a:	bf00      	nop
 8005e0c:	e002      	b.n	8005e14 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8005e0e:	bf00      	nop
 8005e10:	e000      	b.n	8005e14 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8005e12:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005e14:	7dfb      	ldrb	r3, [r7, #23]
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d10a      	bne.n	8005e30 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8005e1a:	4b9d      	ldr	r3, [pc, #628]	; (8006090 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005e1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e1e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005e28:	4999      	ldr	r1, [pc, #612]	; (8006090 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005e2a:	4313      	orrs	r3, r2
 8005e2c:	658b      	str	r3, [r1, #88]	; 0x58
 8005e2e:	e001      	b.n	8005e34 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e30:	7dfb      	ldrb	r3, [r7, #23]
 8005e32:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	f003 0308 	and.w	r3, r3, #8
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d01a      	beq.n	8005e76 <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005e46:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e4a:	d10a      	bne.n	8005e62 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	3324      	adds	r3, #36	; 0x24
 8005e50:	2102      	movs	r1, #2
 8005e52:	4618      	mov	r0, r3
 8005e54:	f001 fb20 	bl	8007498 <RCCEx_PLL3_Config>
 8005e58:	4603      	mov	r3, r0
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d001      	beq.n	8005e62 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 8005e5e:	2301      	movs	r3, #1
 8005e60:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8005e62:	4b8b      	ldr	r3, [pc, #556]	; (8006090 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005e64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e66:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005e70:	4987      	ldr	r1, [pc, #540]	; (8006090 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005e72:	4313      	orrs	r3, r2
 8005e74:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	f003 0310 	and.w	r3, r3, #16
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d01a      	beq.n	8005eb8 <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005e88:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005e8c:	d10a      	bne.n	8005ea4 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	3324      	adds	r3, #36	; 0x24
 8005e92:	2102      	movs	r1, #2
 8005e94:	4618      	mov	r0, r3
 8005e96:	f001 faff 	bl	8007498 <RCCEx_PLL3_Config>
 8005e9a:	4603      	mov	r3, r0
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d001      	beq.n	8005ea4 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 8005ea0:	2301      	movs	r3, #1
 8005ea2:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005ea4:	4b7a      	ldr	r3, [pc, #488]	; (8006090 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005ea6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ea8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005eb2:	4977      	ldr	r1, [pc, #476]	; (8006090 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005eb4:	4313      	orrs	r3, r2
 8005eb6:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d034      	beq.n	8005f2e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005eca:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005ece:	d01d      	beq.n	8005f0c <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8005ed0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005ed4:	d817      	bhi.n	8005f06 <HAL_RCCEx_PeriphCLKConfig+0xc22>
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d003      	beq.n	8005ee2 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8005eda:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ede:	d009      	beq.n	8005ef4 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 8005ee0:	e011      	b.n	8005f06 <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	3304      	adds	r3, #4
 8005ee6:	2100      	movs	r1, #0
 8005ee8:	4618      	mov	r0, r3
 8005eea:	f001 fa23 	bl	8007334 <RCCEx_PLL2_Config>
 8005eee:	4603      	mov	r3, r0
 8005ef0:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8005ef2:	e00c      	b.n	8005f0e <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	3324      	adds	r3, #36	; 0x24
 8005ef8:	2102      	movs	r1, #2
 8005efa:	4618      	mov	r0, r3
 8005efc:	f001 facc 	bl	8007498 <RCCEx_PLL3_Config>
 8005f00:	4603      	mov	r3, r0
 8005f02:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8005f04:	e003      	b.n	8005f0e <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005f06:	2301      	movs	r3, #1
 8005f08:	75fb      	strb	r3, [r7, #23]
      break;
 8005f0a:	e000      	b.n	8005f0e <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 8005f0c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005f0e:	7dfb      	ldrb	r3, [r7, #23]
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d10a      	bne.n	8005f2a <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005f14:	4b5e      	ldr	r3, [pc, #376]	; (8006090 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005f16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f18:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005f22:	495b      	ldr	r1, [pc, #364]	; (8006090 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005f24:	4313      	orrs	r3, r2
 8005f26:	658b      	str	r3, [r1, #88]	; 0x58
 8005f28:	e001      	b.n	8005f2e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f2a:	7dfb      	ldrb	r3, [r7, #23]
 8005f2c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d033      	beq.n	8005fa2 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005f40:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005f44:	d01c      	beq.n	8005f80 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 8005f46:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005f4a:	d816      	bhi.n	8005f7a <HAL_RCCEx_PeriphCLKConfig+0xc96>
 8005f4c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005f50:	d003      	beq.n	8005f5a <HAL_RCCEx_PeriphCLKConfig+0xc76>
 8005f52:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005f56:	d007      	beq.n	8005f68 <HAL_RCCEx_PeriphCLKConfig+0xc84>
 8005f58:	e00f      	b.n	8005f7a <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005f5a:	4b4d      	ldr	r3, [pc, #308]	; (8006090 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005f5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f5e:	4a4c      	ldr	r2, [pc, #304]	; (8006090 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005f60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005f64:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8005f66:	e00c      	b.n	8005f82 <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	3324      	adds	r3, #36	; 0x24
 8005f6c:	2101      	movs	r1, #1
 8005f6e:	4618      	mov	r0, r3
 8005f70:	f001 fa92 	bl	8007498 <RCCEx_PLL3_Config>
 8005f74:	4603      	mov	r3, r0
 8005f76:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8005f78:	e003      	b.n	8005f82 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005f7a:	2301      	movs	r3, #1
 8005f7c:	75fb      	strb	r3, [r7, #23]
      break;
 8005f7e:	e000      	b.n	8005f82 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 8005f80:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005f82:	7dfb      	ldrb	r3, [r7, #23]
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d10a      	bne.n	8005f9e <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005f88:	4b41      	ldr	r3, [pc, #260]	; (8006090 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005f8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f8c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005f96:	493e      	ldr	r1, [pc, #248]	; (8006090 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005f98:	4313      	orrs	r3, r2
 8005f9a:	654b      	str	r3, [r1, #84]	; 0x54
 8005f9c:	e001      	b.n	8005fa2 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f9e:	7dfb      	ldrb	r3, [r7, #23]
 8005fa0:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d029      	beq.n	8006002 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d003      	beq.n	8005fbe <HAL_RCCEx_PeriphCLKConfig+0xcda>
 8005fb6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005fba:	d007      	beq.n	8005fcc <HAL_RCCEx_PeriphCLKConfig+0xce8>
 8005fbc:	e00f      	b.n	8005fde <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005fbe:	4b34      	ldr	r3, [pc, #208]	; (8006090 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005fc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fc2:	4a33      	ldr	r2, [pc, #204]	; (8006090 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005fc4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005fc8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8005fca:	e00b      	b.n	8005fe4 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	3304      	adds	r3, #4
 8005fd0:	2102      	movs	r1, #2
 8005fd2:	4618      	mov	r0, r3
 8005fd4:	f001 f9ae 	bl	8007334 <RCCEx_PLL2_Config>
 8005fd8:	4603      	mov	r3, r0
 8005fda:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8005fdc:	e002      	b.n	8005fe4 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 8005fde:	2301      	movs	r3, #1
 8005fe0:	75fb      	strb	r3, [r7, #23]
      break;
 8005fe2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005fe4:	7dfb      	ldrb	r3, [r7, #23]
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d109      	bne.n	8005ffe <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8005fea:	4b29      	ldr	r3, [pc, #164]	; (8006090 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005fec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005fee:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ff6:	4926      	ldr	r1, [pc, #152]	; (8006090 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005ff8:	4313      	orrs	r3, r2
 8005ffa:	64cb      	str	r3, [r1, #76]	; 0x4c
 8005ffc:	e001      	b.n	8006002 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ffe:	7dfb      	ldrb	r3, [r7, #23]
 8006000:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800600a:	2b00      	cmp	r3, #0
 800600c:	d00a      	beq.n	8006024 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	3324      	adds	r3, #36	; 0x24
 8006012:	2102      	movs	r1, #2
 8006014:	4618      	mov	r0, r3
 8006016:	f001 fa3f 	bl	8007498 <RCCEx_PLL3_Config>
 800601a:	4603      	mov	r3, r0
 800601c:	2b00      	cmp	r3, #0
 800601e:	d001      	beq.n	8006024 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 8006020:	2301      	movs	r3, #1
 8006022:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800602c:	2b00      	cmp	r3, #0
 800602e:	d033      	beq.n	8006098 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006034:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006038:	d017      	beq.n	800606a <HAL_RCCEx_PeriphCLKConfig+0xd86>
 800603a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800603e:	d811      	bhi.n	8006064 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8006040:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006044:	d013      	beq.n	800606e <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8006046:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800604a:	d80b      	bhi.n	8006064 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 800604c:	2b00      	cmp	r3, #0
 800604e:	d010      	beq.n	8006072 <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 8006050:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006054:	d106      	bne.n	8006064 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006056:	4b0e      	ldr	r3, [pc, #56]	; (8006090 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006058:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800605a:	4a0d      	ldr	r2, [pc, #52]	; (8006090 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800605c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006060:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8006062:	e007      	b.n	8006074 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006064:	2301      	movs	r3, #1
 8006066:	75fb      	strb	r3, [r7, #23]
      break;
 8006068:	e004      	b.n	8006074 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800606a:	bf00      	nop
 800606c:	e002      	b.n	8006074 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800606e:	bf00      	nop
 8006070:	e000      	b.n	8006074 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8006072:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006074:	7dfb      	ldrb	r3, [r7, #23]
 8006076:	2b00      	cmp	r3, #0
 8006078:	d10c      	bne.n	8006094 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800607a:	4b05      	ldr	r3, [pc, #20]	; (8006090 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800607c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800607e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006086:	4902      	ldr	r1, [pc, #8]	; (8006090 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006088:	4313      	orrs	r3, r2
 800608a:	654b      	str	r3, [r1, #84]	; 0x54
 800608c:	e004      	b.n	8006098 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 800608e:	bf00      	nop
 8006090:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006094:	7dfb      	ldrb	r3, [r7, #23]
 8006096:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d008      	beq.n	80060b6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80060a4:	4b31      	ldr	r3, [pc, #196]	; (800616c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80060a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80060a8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060b0:	492e      	ldr	r1, [pc, #184]	; (800616c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80060b2:	4313      	orrs	r3, r2
 80060b4:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d009      	beq.n	80060d6 <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80060c2:	4b2a      	ldr	r3, [pc, #168]	; (800616c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80060c4:	691b      	ldr	r3, [r3, #16]
 80060c6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80060d0:	4926      	ldr	r1, [pc, #152]	; (800616c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80060d2:	4313      	orrs	r3, r2
 80060d4:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d008      	beq.n	80060f4 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80060e2:	4b22      	ldr	r3, [pc, #136]	; (800616c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80060e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80060e6:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80060ee:	491f      	ldr	r1, [pc, #124]	; (800616c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80060f0:	4313      	orrs	r3, r2
 80060f2:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d00d      	beq.n	800611c <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006100:	4b1a      	ldr	r3, [pc, #104]	; (800616c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8006102:	691b      	ldr	r3, [r3, #16]
 8006104:	4a19      	ldr	r2, [pc, #100]	; (800616c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8006106:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800610a:	6113      	str	r3, [r2, #16]
 800610c:	4b17      	ldr	r3, [pc, #92]	; (800616c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800610e:	691a      	ldr	r2, [r3, #16]
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8006116:	4915      	ldr	r1, [pc, #84]	; (800616c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8006118:	4313      	orrs	r3, r2
 800611a:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	2b00      	cmp	r3, #0
 8006122:	da08      	bge.n	8006136 <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8006124:	4b11      	ldr	r3, [pc, #68]	; (800616c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8006126:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006128:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006130:	490e      	ldr	r1, [pc, #56]	; (800616c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8006132:	4313      	orrs	r3, r2
 8006134:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800613e:	2b00      	cmp	r3, #0
 8006140:	d009      	beq.n	8006156 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006142:	4b0a      	ldr	r3, [pc, #40]	; (800616c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8006144:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006146:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006150:	4906      	ldr	r1, [pc, #24]	; (800616c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8006152:	4313      	orrs	r3, r2
 8006154:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8006156:	7dbb      	ldrb	r3, [r7, #22]
 8006158:	2b00      	cmp	r3, #0
 800615a:	d101      	bne.n	8006160 <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 800615c:	2300      	movs	r3, #0
 800615e:	e000      	b.n	8006162 <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 8006160:	2301      	movs	r3, #1
}
 8006162:	4618      	mov	r0, r3
 8006164:	3718      	adds	r7, #24
 8006166:	46bd      	mov	sp, r7
 8006168:	bd80      	pop	{r7, pc}
 800616a:	bf00      	nop
 800616c:	58024400 	.word	0x58024400

08006170 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8006170:	b580      	push	{r7, lr}
 8006172:	b090      	sub	sp, #64	; 0x40
 8006174:	af00      	add	r7, sp, #0
 8006176:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800617e:	f040 8095 	bne.w	80062ac <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 8006182:	4b97      	ldr	r3, [pc, #604]	; (80063e0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8006184:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006186:	f003 0307 	and.w	r3, r3, #7
 800618a:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800618c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800618e:	2b04      	cmp	r3, #4
 8006190:	f200 8088 	bhi.w	80062a4 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 8006194:	a201      	add	r2, pc, #4	; (adr r2, 800619c <HAL_RCCEx_GetPeriphCLKFreq+0x2c>)
 8006196:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800619a:	bf00      	nop
 800619c:	080061b1 	.word	0x080061b1
 80061a0:	080061d9 	.word	0x080061d9
 80061a4:	08006201 	.word	0x08006201
 80061a8:	0800629d 	.word	0x0800629d
 80061ac:	08006229 	.word	0x08006229
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80061b0:	4b8b      	ldr	r3, [pc, #556]	; (80063e0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80061b8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80061bc:	d108      	bne.n	80061d0 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80061be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80061c2:	4618      	mov	r0, r3
 80061c4:	f000 ff64 	bl	8007090 <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 80061c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061ca:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80061cc:	f000 bc94 	b.w	8006af8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 80061d0:	2300      	movs	r3, #0
 80061d2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80061d4:	f000 bc90 	b.w	8006af8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80061d8:	4b81      	ldr	r3, [pc, #516]	; (80063e0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80061e0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80061e4:	d108      	bne.n	80061f8 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80061e6:	f107 0318 	add.w	r3, r7, #24
 80061ea:	4618      	mov	r0, r3
 80061ec:	f000 fca8 	bl	8006b40 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80061f0:	69bb      	ldr	r3, [r7, #24]
 80061f2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80061f4:	f000 bc80 	b.w	8006af8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 80061f8:	2300      	movs	r3, #0
 80061fa:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80061fc:	f000 bc7c 	b.w	8006af8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006200:	4b77      	ldr	r3, [pc, #476]	; (80063e0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006208:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800620c:	d108      	bne.n	8006220 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800620e:	f107 030c 	add.w	r3, r7, #12
 8006212:	4618      	mov	r0, r3
 8006214:	f000 fde8 	bl	8006de8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800621c:	f000 bc6c 	b.w	8006af8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8006220:	2300      	movs	r3, #0
 8006222:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006224:	f000 bc68 	b.w	8006af8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8006228:	4b6d      	ldr	r3, [pc, #436]	; (80063e0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800622a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800622c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006230:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006232:	4b6b      	ldr	r3, [pc, #428]	; (80063e0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	f003 0304 	and.w	r3, r3, #4
 800623a:	2b04      	cmp	r3, #4
 800623c:	d10c      	bne.n	8006258 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
 800623e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006240:	2b00      	cmp	r3, #0
 8006242:	d109      	bne.n	8006258 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006244:	4b66      	ldr	r3, [pc, #408]	; (80063e0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	08db      	lsrs	r3, r3, #3
 800624a:	f003 0303 	and.w	r3, r3, #3
 800624e:	4a65      	ldr	r2, [pc, #404]	; (80063e4 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8006250:	fa22 f303 	lsr.w	r3, r2, r3
 8006254:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006256:	e01f      	b.n	8006298 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006258:	4b61      	ldr	r3, [pc, #388]	; (80063e0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006260:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006264:	d106      	bne.n	8006274 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 8006266:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006268:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800626c:	d102      	bne.n	8006274 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800626e:	4b5e      	ldr	r3, [pc, #376]	; (80063e8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8006270:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006272:	e011      	b.n	8006298 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006274:	4b5a      	ldr	r3, [pc, #360]	; (80063e0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800627c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006280:	d106      	bne.n	8006290 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 8006282:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006284:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006288:	d102      	bne.n	8006290 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800628a:	4b58      	ldr	r3, [pc, #352]	; (80063ec <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 800628c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800628e:	e003      	b.n	8006298 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8006290:	2300      	movs	r3, #0
 8006292:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8006294:	f000 bc30 	b.w	8006af8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8006298:	f000 bc2e 	b.w	8006af8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800629c:	4b54      	ldr	r3, [pc, #336]	; (80063f0 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 800629e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80062a0:	f000 bc2a 	b.w	8006af8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 80062a4:	2300      	movs	r3, #0
 80062a6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80062a8:	f000 bc26 	b.w	8006af8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80062b2:	f040 809f 	bne.w	80063f4 <HAL_RCCEx_GetPeriphCLKFreq+0x284>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 80062b6:	4b4a      	ldr	r3, [pc, #296]	; (80063e0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80062b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80062ba:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 80062be:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 80062c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80062c6:	d04d      	beq.n	8006364 <HAL_RCCEx_GetPeriphCLKFreq+0x1f4>
 80062c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80062ce:	f200 8084 	bhi.w	80063da <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 80062d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062d4:	2bc0      	cmp	r3, #192	; 0xc0
 80062d6:	d07d      	beq.n	80063d4 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 80062d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062da:	2bc0      	cmp	r3, #192	; 0xc0
 80062dc:	d87d      	bhi.n	80063da <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 80062de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062e0:	2b80      	cmp	r3, #128	; 0x80
 80062e2:	d02d      	beq.n	8006340 <HAL_RCCEx_GetPeriphCLKFreq+0x1d0>
 80062e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062e6:	2b80      	cmp	r3, #128	; 0x80
 80062e8:	d877      	bhi.n	80063da <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 80062ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d003      	beq.n	80062f8 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
 80062f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062f2:	2b40      	cmp	r3, #64	; 0x40
 80062f4:	d012      	beq.n	800631c <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 80062f6:	e070      	b.n	80063da <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
      {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80062f8:	4b39      	ldr	r3, [pc, #228]	; (80063e0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006300:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006304:	d107      	bne.n	8006316 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006306:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800630a:	4618      	mov	r0, r3
 800630c:	f000 fec0 	bl	8007090 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006310:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006312:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006314:	e3f0      	b.n	8006af8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8006316:	2300      	movs	r3, #0
 8006318:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800631a:	e3ed      	b.n	8006af8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800631c:	4b30      	ldr	r3, [pc, #192]	; (80063e0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006324:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006328:	d107      	bne.n	800633a <HAL_RCCEx_GetPeriphCLKFreq+0x1ca>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800632a:	f107 0318 	add.w	r3, r7, #24
 800632e:	4618      	mov	r0, r3
 8006330:	f000 fc06 	bl	8006b40 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006334:	69bb      	ldr	r3, [r7, #24]
 8006336:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006338:	e3de      	b.n	8006af8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800633a:	2300      	movs	r3, #0
 800633c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800633e:	e3db      	b.n	8006af8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006340:	4b27      	ldr	r3, [pc, #156]	; (80063e0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006348:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800634c:	d107      	bne.n	800635e <HAL_RCCEx_GetPeriphCLKFreq+0x1ee>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800634e:	f107 030c 	add.w	r3, r7, #12
 8006352:	4618      	mov	r0, r3
 8006354:	f000 fd48 	bl	8006de8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800635c:	e3cc      	b.n	8006af8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800635e:	2300      	movs	r3, #0
 8006360:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006362:	e3c9      	b.n	8006af8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8006364:	4b1e      	ldr	r3, [pc, #120]	; (80063e0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8006366:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006368:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800636c:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800636e:	4b1c      	ldr	r3, [pc, #112]	; (80063e0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	f003 0304 	and.w	r3, r3, #4
 8006376:	2b04      	cmp	r3, #4
 8006378:	d10c      	bne.n	8006394 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
 800637a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800637c:	2b00      	cmp	r3, #0
 800637e:	d109      	bne.n	8006394 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006380:	4b17      	ldr	r3, [pc, #92]	; (80063e0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	08db      	lsrs	r3, r3, #3
 8006386:	f003 0303 	and.w	r3, r3, #3
 800638a:	4a16      	ldr	r2, [pc, #88]	; (80063e4 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 800638c:	fa22 f303 	lsr.w	r3, r2, r3
 8006390:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006392:	e01e      	b.n	80063d2 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006394:	4b12      	ldr	r3, [pc, #72]	; (80063e0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800639c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80063a0:	d106      	bne.n	80063b0 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
 80063a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063a4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80063a8:	d102      	bne.n	80063b0 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 80063aa:	4b0f      	ldr	r3, [pc, #60]	; (80063e8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80063ac:	63fb      	str	r3, [r7, #60]	; 0x3c
 80063ae:	e010      	b.n	80063d2 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80063b0:	4b0b      	ldr	r3, [pc, #44]	; (80063e0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80063b8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80063bc:	d106      	bne.n	80063cc <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
 80063be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063c0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80063c4:	d102      	bne.n	80063cc <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 80063c6:	4b09      	ldr	r3, [pc, #36]	; (80063ec <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 80063c8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80063ca:	e002      	b.n	80063d2 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 80063cc:	2300      	movs	r3, #0
 80063ce:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 80063d0:	e392      	b.n	8006af8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 80063d2:	e391      	b.n	8006af8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80063d4:	4b06      	ldr	r3, [pc, #24]	; (80063f0 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 80063d6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80063d8:	e38e      	b.n	8006af8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 80063da:	2300      	movs	r3, #0
 80063dc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80063de:	e38b      	b.n	8006af8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 80063e0:	58024400 	.word	0x58024400
 80063e4:	03d09000 	.word	0x03d09000
 80063e8:	003d0900 	.word	0x003d0900
 80063ec:	007a1200 	.word	0x007a1200
 80063f0:	00bb8000 	.word	0x00bb8000
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80063fa:	f040 809c 	bne.w	8006536 <HAL_RCCEx_GetPeriphCLKFreq+0x3c6>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 80063fe:	4b9d      	ldr	r3, [pc, #628]	; (8006674 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8006400:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006402:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8006406:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8006408:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800640a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800640e:	d054      	beq.n	80064ba <HAL_RCCEx_GetPeriphCLKFreq+0x34a>
 8006410:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006412:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006416:	f200 808b 	bhi.w	8006530 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 800641a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800641c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006420:	f000 8083 	beq.w	800652a <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
 8006424:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006426:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800642a:	f200 8081 	bhi.w	8006530 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 800642e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006430:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006434:	d02f      	beq.n	8006496 <HAL_RCCEx_GetPeriphCLKFreq+0x326>
 8006436:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006438:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800643c:	d878      	bhi.n	8006530 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 800643e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006440:	2b00      	cmp	r3, #0
 8006442:	d004      	beq.n	800644e <HAL_RCCEx_GetPeriphCLKFreq+0x2de>
 8006444:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006446:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800644a:	d012      	beq.n	8006472 <HAL_RCCEx_GetPeriphCLKFreq+0x302>
 800644c:	e070      	b.n	8006530 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
      {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800644e:	4b89      	ldr	r3, [pc, #548]	; (8006674 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006456:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800645a:	d107      	bne.n	800646c <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800645c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006460:	4618      	mov	r0, r3
 8006462:	f000 fe15 	bl	8007090 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006466:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006468:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800646a:	e345      	b.n	8006af8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800646c:	2300      	movs	r3, #0
 800646e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006470:	e342      	b.n	8006af8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006472:	4b80      	ldr	r3, [pc, #512]	; (8006674 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800647a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800647e:	d107      	bne.n	8006490 <HAL_RCCEx_GetPeriphCLKFreq+0x320>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006480:	f107 0318 	add.w	r3, r7, #24
 8006484:	4618      	mov	r0, r3
 8006486:	f000 fb5b 	bl	8006b40 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800648a:	69bb      	ldr	r3, [r7, #24]
 800648c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800648e:	e333      	b.n	8006af8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8006490:	2300      	movs	r3, #0
 8006492:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006494:	e330      	b.n	8006af8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006496:	4b77      	ldr	r3, [pc, #476]	; (8006674 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800649e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80064a2:	d107      	bne.n	80064b4 <HAL_RCCEx_GetPeriphCLKFreq+0x344>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80064a4:	f107 030c 	add.w	r3, r7, #12
 80064a8:	4618      	mov	r0, r3
 80064aa:	f000 fc9d 	bl	8006de8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80064b2:	e321      	b.n	8006af8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 80064b4:	2300      	movs	r3, #0
 80064b6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80064b8:	e31e      	b.n	8006af8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80064ba:	4b6e      	ldr	r3, [pc, #440]	; (8006674 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 80064bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80064be:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80064c2:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80064c4:	4b6b      	ldr	r3, [pc, #428]	; (8006674 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	f003 0304 	and.w	r3, r3, #4
 80064cc:	2b04      	cmp	r3, #4
 80064ce:	d10c      	bne.n	80064ea <HAL_RCCEx_GetPeriphCLKFreq+0x37a>
 80064d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d109      	bne.n	80064ea <HAL_RCCEx_GetPeriphCLKFreq+0x37a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80064d6:	4b67      	ldr	r3, [pc, #412]	; (8006674 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	08db      	lsrs	r3, r3, #3
 80064dc:	f003 0303 	and.w	r3, r3, #3
 80064e0:	4a65      	ldr	r2, [pc, #404]	; (8006678 <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 80064e2:	fa22 f303 	lsr.w	r3, r2, r3
 80064e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80064e8:	e01e      	b.n	8006528 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80064ea:	4b62      	ldr	r3, [pc, #392]	; (8006674 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80064f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80064f6:	d106      	bne.n	8006506 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 80064f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064fa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80064fe:	d102      	bne.n	8006506 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8006500:	4b5e      	ldr	r3, [pc, #376]	; (800667c <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 8006502:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006504:	e010      	b.n	8006528 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006506:	4b5b      	ldr	r3, [pc, #364]	; (8006674 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800650e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006512:	d106      	bne.n	8006522 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 8006514:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006516:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800651a:	d102      	bne.n	8006522 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800651c:	4b58      	ldr	r3, [pc, #352]	; (8006680 <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 800651e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006520:	e002      	b.n	8006528 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8006522:	2300      	movs	r3, #0
 8006524:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8006526:	e2e7      	b.n	8006af8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8006528:	e2e6      	b.n	8006af8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800652a:	4b56      	ldr	r3, [pc, #344]	; (8006684 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800652c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800652e:	e2e3      	b.n	8006af8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      default :
        {
          frequency = 0;
 8006530:	2300      	movs	r3, #0
 8006532:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006534:	e2e0      	b.n	8006af8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800653c:	f040 80a7 	bne.w	800668e <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 8006540:	4b4c      	ldr	r3, [pc, #304]	; (8006674 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8006542:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006544:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8006548:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800654a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800654c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006550:	d055      	beq.n	80065fe <HAL_RCCEx_GetPeriphCLKFreq+0x48e>
 8006552:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006554:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006558:	f200 8096 	bhi.w	8006688 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
 800655c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800655e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006562:	f000 8084 	beq.w	800666e <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
 8006566:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006568:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800656c:	f200 808c 	bhi.w	8006688 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
 8006570:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006572:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006576:	d030      	beq.n	80065da <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
 8006578:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800657a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800657e:	f200 8083 	bhi.w	8006688 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
 8006582:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006584:	2b00      	cmp	r3, #0
 8006586:	d004      	beq.n	8006592 <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 8006588:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800658a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800658e:	d012      	beq.n	80065b6 <HAL_RCCEx_GetPeriphCLKFreq+0x446>
 8006590:	e07a      	b.n	8006688 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
      {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006592:	4b38      	ldr	r3, [pc, #224]	; (8006674 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800659a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800659e:	d107      	bne.n	80065b0 <HAL_RCCEx_GetPeriphCLKFreq+0x440>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80065a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80065a4:	4618      	mov	r0, r3
 80065a6:	f000 fd73 	bl	8007090 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80065aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065ac:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80065ae:	e2a3      	b.n	8006af8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 80065b0:	2300      	movs	r3, #0
 80065b2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80065b4:	e2a0      	b.n	8006af8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80065b6:	4b2f      	ldr	r3, [pc, #188]	; (8006674 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80065be:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80065c2:	d107      	bne.n	80065d4 <HAL_RCCEx_GetPeriphCLKFreq+0x464>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80065c4:	f107 0318 	add.w	r3, r7, #24
 80065c8:	4618      	mov	r0, r3
 80065ca:	f000 fab9 	bl	8006b40 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80065ce:	69bb      	ldr	r3, [r7, #24]
 80065d0:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
         else
         {
           frequency = 0;
         }
          break;
 80065d2:	e291      	b.n	8006af8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 80065d4:	2300      	movs	r3, #0
 80065d6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80065d8:	e28e      	b.n	8006af8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80065da:	4b26      	ldr	r3, [pc, #152]	; (8006674 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80065e2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80065e6:	d107      	bne.n	80065f8 <HAL_RCCEx_GetPeriphCLKFreq+0x488>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80065e8:	f107 030c 	add.w	r3, r7, #12
 80065ec:	4618      	mov	r0, r3
 80065ee:	f000 fbfb 	bl	8006de8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80065f6:	e27f      	b.n	8006af8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 80065f8:	2300      	movs	r3, #0
 80065fa:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80065fc:	e27c      	b.n	8006af8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80065fe:	4b1d      	ldr	r3, [pc, #116]	; (8006674 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8006600:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006602:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006606:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006608:	4b1a      	ldr	r3, [pc, #104]	; (8006674 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	f003 0304 	and.w	r3, r3, #4
 8006610:	2b04      	cmp	r3, #4
 8006612:	d10c      	bne.n	800662e <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
 8006614:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006616:	2b00      	cmp	r3, #0
 8006618:	d109      	bne.n	800662e <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800661a:	4b16      	ldr	r3, [pc, #88]	; (8006674 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	08db      	lsrs	r3, r3, #3
 8006620:	f003 0303 	and.w	r3, r3, #3
 8006624:	4a14      	ldr	r2, [pc, #80]	; (8006678 <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 8006626:	fa22 f303 	lsr.w	r3, r2, r3
 800662a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800662c:	e01e      	b.n	800666c <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800662e:	4b11      	ldr	r3, [pc, #68]	; (8006674 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006636:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800663a:	d106      	bne.n	800664a <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
 800663c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800663e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006642:	d102      	bne.n	800664a <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8006644:	4b0d      	ldr	r3, [pc, #52]	; (800667c <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 8006646:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006648:	e010      	b.n	800666c <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800664a:	4b0a      	ldr	r3, [pc, #40]	; (8006674 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006652:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006656:	d106      	bne.n	8006666 <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
 8006658:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800665a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800665e:	d102      	bne.n	8006666 <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8006660:	4b07      	ldr	r3, [pc, #28]	; (8006680 <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 8006662:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006664:	e002      	b.n	800666c <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8006666:	2300      	movs	r3, #0
 8006668:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800666a:	e245      	b.n	8006af8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800666c:	e244      	b.n	8006af8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800666e:	4b05      	ldr	r3, [pc, #20]	; (8006684 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8006670:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006672:	e241      	b.n	8006af8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8006674:	58024400 	.word	0x58024400
 8006678:	03d09000 	.word	0x03d09000
 800667c:	003d0900 	.word	0x003d0900
 8006680:	007a1200 	.word	0x007a1200
 8006684:	00bb8000 	.word	0x00bb8000
        }

      default :
        {
          frequency = 0;
 8006688:	2300      	movs	r3, #0
 800668a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800668c:	e234      	b.n	8006af8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006694:	f040 809c 	bne.w	80067d0 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 8006698:	4b9b      	ldr	r3, [pc, #620]	; (8006908 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800669a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800669c:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 80066a0:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80066a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066a4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80066a8:	d054      	beq.n	8006754 <HAL_RCCEx_GetPeriphCLKFreq+0x5e4>
 80066aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066ac:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80066b0:	f200 808b 	bhi.w	80067ca <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 80066b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066b6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80066ba:	f000 8083 	beq.w	80067c4 <HAL_RCCEx_GetPeriphCLKFreq+0x654>
 80066be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066c0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80066c4:	f200 8081 	bhi.w	80067ca <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 80066c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80066ce:	d02f      	beq.n	8006730 <HAL_RCCEx_GetPeriphCLKFreq+0x5c0>
 80066d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80066d6:	d878      	bhi.n	80067ca <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 80066d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d004      	beq.n	80066e8 <HAL_RCCEx_GetPeriphCLKFreq+0x578>
 80066de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80066e4:	d012      	beq.n	800670c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>
 80066e6:	e070      	b.n	80067ca <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80066e8:	4b87      	ldr	r3, [pc, #540]	; (8006908 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80066f0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80066f4:	d107      	bne.n	8006706 <HAL_RCCEx_GetPeriphCLKFreq+0x596>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80066f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80066fa:	4618      	mov	r0, r3
 80066fc:	f000 fcc8 	bl	8007090 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006700:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006702:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006704:	e1f8      	b.n	8006af8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8006706:	2300      	movs	r3, #0
 8006708:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800670a:	e1f5      	b.n	8006af8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800670c:	4b7e      	ldr	r3, [pc, #504]	; (8006908 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006714:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006718:	d107      	bne.n	800672a <HAL_RCCEx_GetPeriphCLKFreq+0x5ba>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800671a:	f107 0318 	add.w	r3, r7, #24
 800671e:	4618      	mov	r0, r3
 8006720:	f000 fa0e 	bl	8006b40 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006724:	69bb      	ldr	r3, [r7, #24]
 8006726:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006728:	e1e6      	b.n	8006af8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800672a:	2300      	movs	r3, #0
 800672c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800672e:	e1e3      	b.n	8006af8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006730:	4b75      	ldr	r3, [pc, #468]	; (8006908 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006738:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800673c:	d107      	bne.n	800674e <HAL_RCCEx_GetPeriphCLKFreq+0x5de>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800673e:	f107 030c 	add.w	r3, r7, #12
 8006742:	4618      	mov	r0, r3
 8006744:	f000 fb50 	bl	8006de8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800674c:	e1d4      	b.n	8006af8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800674e:	2300      	movs	r3, #0
 8006750:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006752:	e1d1      	b.n	8006af8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8006754:	4b6c      	ldr	r3, [pc, #432]	; (8006908 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8006756:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006758:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800675c:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800675e:	4b6a      	ldr	r3, [pc, #424]	; (8006908 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	f003 0304 	and.w	r3, r3, #4
 8006766:	2b04      	cmp	r3, #4
 8006768:	d10c      	bne.n	8006784 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 800676a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800676c:	2b00      	cmp	r3, #0
 800676e:	d109      	bne.n	8006784 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006770:	4b65      	ldr	r3, [pc, #404]	; (8006908 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	08db      	lsrs	r3, r3, #3
 8006776:	f003 0303 	and.w	r3, r3, #3
 800677a:	4a64      	ldr	r2, [pc, #400]	; (800690c <HAL_RCCEx_GetPeriphCLKFreq+0x79c>)
 800677c:	fa22 f303 	lsr.w	r3, r2, r3
 8006780:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006782:	e01e      	b.n	80067c2 <HAL_RCCEx_GetPeriphCLKFreq+0x652>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006784:	4b60      	ldr	r3, [pc, #384]	; (8006908 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800678c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006790:	d106      	bne.n	80067a0 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
 8006792:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006794:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006798:	d102      	bne.n	80067a0 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800679a:	4b5d      	ldr	r3, [pc, #372]	; (8006910 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>)
 800679c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800679e:	e010      	b.n	80067c2 <HAL_RCCEx_GetPeriphCLKFreq+0x652>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80067a0:	4b59      	ldr	r3, [pc, #356]	; (8006908 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80067a8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80067ac:	d106      	bne.n	80067bc <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 80067ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80067b0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80067b4:	d102      	bne.n	80067bc <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 80067b6:	4b57      	ldr	r3, [pc, #348]	; (8006914 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>)
 80067b8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80067ba:	e002      	b.n	80067c2 <HAL_RCCEx_GetPeriphCLKFreq+0x652>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 80067bc:	2300      	movs	r3, #0
 80067be:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 80067c0:	e19a      	b.n	8006af8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 80067c2:	e199      	b.n	8006af8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80067c4:	4b54      	ldr	r3, [pc, #336]	; (8006918 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80067c6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80067c8:	e196      	b.n	8006af8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 80067ca:	2300      	movs	r3, #0
 80067cc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80067ce:	e193      	b.n	8006af8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80067d6:	d173      	bne.n	80068c0 <HAL_RCCEx_GetPeriphCLKFreq+0x750>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 80067d8:	4b4b      	ldr	r3, [pc, #300]	; (8006908 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 80067da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80067dc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80067e0:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80067e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067e4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80067e8:	d02f      	beq.n	800684a <HAL_RCCEx_GetPeriphCLKFreq+0x6da>
 80067ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067ec:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80067f0:	d863      	bhi.n	80068ba <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
 80067f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d004      	beq.n	8006802 <HAL_RCCEx_GetPeriphCLKFreq+0x692>
 80067f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80067fe:	d012      	beq.n	8006826 <HAL_RCCEx_GetPeriphCLKFreq+0x6b6>
 8006800:	e05b      	b.n	80068ba <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006802:	4b41      	ldr	r3, [pc, #260]	; (8006908 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800680a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800680e:	d107      	bne.n	8006820 <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006810:	f107 0318 	add.w	r3, r7, #24
 8006814:	4618      	mov	r0, r3
 8006816:	f000 f993 	bl	8006b40 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800681a:	69bb      	ldr	r3, [r7, #24]
 800681c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800681e:	e16b      	b.n	8006af8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8006820:	2300      	movs	r3, #0
 8006822:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006824:	e168      	b.n	8006af8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006826:	4b38      	ldr	r3, [pc, #224]	; (8006908 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800682e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006832:	d107      	bne.n	8006844 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006834:	f107 030c 	add.w	r3, r7, #12
 8006838:	4618      	mov	r0, r3
 800683a:	f000 fad5 	bl	8006de8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800683e:	697b      	ldr	r3, [r7, #20]
 8006840:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006842:	e159      	b.n	8006af8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8006844:	2300      	movs	r3, #0
 8006846:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006848:	e156      	b.n	8006af8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800684a:	4b2f      	ldr	r3, [pc, #188]	; (8006908 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800684c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800684e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006852:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006854:	4b2c      	ldr	r3, [pc, #176]	; (8006908 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	f003 0304 	and.w	r3, r3, #4
 800685c:	2b04      	cmp	r3, #4
 800685e:	d10c      	bne.n	800687a <HAL_RCCEx_GetPeriphCLKFreq+0x70a>
 8006860:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006862:	2b00      	cmp	r3, #0
 8006864:	d109      	bne.n	800687a <HAL_RCCEx_GetPeriphCLKFreq+0x70a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006866:	4b28      	ldr	r3, [pc, #160]	; (8006908 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	08db      	lsrs	r3, r3, #3
 800686c:	f003 0303 	and.w	r3, r3, #3
 8006870:	4a26      	ldr	r2, [pc, #152]	; (800690c <HAL_RCCEx_GetPeriphCLKFreq+0x79c>)
 8006872:	fa22 f303 	lsr.w	r3, r2, r3
 8006876:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006878:	e01e      	b.n	80068b8 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800687a:	4b23      	ldr	r3, [pc, #140]	; (8006908 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006882:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006886:	d106      	bne.n	8006896 <HAL_RCCEx_GetPeriphCLKFreq+0x726>
 8006888:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800688a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800688e:	d102      	bne.n	8006896 <HAL_RCCEx_GetPeriphCLKFreq+0x726>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8006890:	4b1f      	ldr	r3, [pc, #124]	; (8006910 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>)
 8006892:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006894:	e010      	b.n	80068b8 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006896:	4b1c      	ldr	r3, [pc, #112]	; (8006908 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800689e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80068a2:	d106      	bne.n	80068b2 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
 80068a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068a6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80068aa:	d102      	bne.n	80068b2 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 80068ac:	4b19      	ldr	r3, [pc, #100]	; (8006914 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>)
 80068ae:	63fb      	str	r3, [r7, #60]	; 0x3c
 80068b0:	e002      	b.n	80068b8 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 80068b2:	2300      	movs	r3, #0
 80068b4:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 80068b6:	e11f      	b.n	8006af8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 80068b8:	e11e      	b.n	8006af8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      default :
        {
          frequency = 0;
 80068ba:	2300      	movs	r3, #0
 80068bc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80068be:	e11b      	b.n	8006af8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80068c6:	d13e      	bne.n	8006946 <HAL_RCCEx_GetPeriphCLKFreq+0x7d6>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 80068c8:	4b0f      	ldr	r3, [pc, #60]	; (8006908 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 80068ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80068cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80068d0:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80068d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d004      	beq.n	80068e2 <HAL_RCCEx_GetPeriphCLKFreq+0x772>
 80068d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80068de:	d01d      	beq.n	800691c <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 80068e0:	e02e      	b.n	8006940 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80068e2:	4b09      	ldr	r3, [pc, #36]	; (8006908 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80068ea:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80068ee:	d107      	bne.n	8006900 <HAL_RCCEx_GetPeriphCLKFreq+0x790>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80068f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80068f4:	4618      	mov	r0, r3
 80068f6:	f000 fbcb 	bl	8007090 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80068fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068fc:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80068fe:	e0fb      	b.n	8006af8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8006900:	2300      	movs	r3, #0
 8006902:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006904:	e0f8      	b.n	8006af8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8006906:	bf00      	nop
 8006908:	58024400 	.word	0x58024400
 800690c:	03d09000 	.word	0x03d09000
 8006910:	003d0900 	.word	0x003d0900
 8006914:	007a1200 	.word	0x007a1200
 8006918:	00bb8000 	.word	0x00bb8000
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800691c:	4b79      	ldr	r3, [pc, #484]	; (8006b04 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006924:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006928:	d107      	bne.n	800693a <HAL_RCCEx_GetPeriphCLKFreq+0x7ca>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800692a:	f107 0318 	add.w	r3, r7, #24
 800692e:	4618      	mov	r0, r3
 8006930:	f000 f906 	bl	8006b40 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8006934:	6a3b      	ldr	r3, [r7, #32]
 8006936:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8006938:	e0de      	b.n	8006af8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800693a:	2300      	movs	r3, #0
 800693c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800693e:	e0db      	b.n	8006af8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      default :
        {
          frequency = 0;
 8006940:	2300      	movs	r3, #0
 8006942:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006944:	e0d8      	b.n	8006af8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800694c:	f040 8085 	bne.w	8006a5a <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 8006950:	4b6c      	ldr	r3, [pc, #432]	; (8006b04 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8006952:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006954:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8006958:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800695a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800695c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006960:	d06b      	beq.n	8006a3a <HAL_RCCEx_GetPeriphCLKFreq+0x8ca>
 8006962:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006964:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006968:	d874      	bhi.n	8006a54 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 800696a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800696c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006970:	d056      	beq.n	8006a20 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
 8006972:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006974:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006978:	d86c      	bhi.n	8006a54 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 800697a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800697c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006980:	d03b      	beq.n	80069fa <HAL_RCCEx_GetPeriphCLKFreq+0x88a>
 8006982:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006984:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006988:	d864      	bhi.n	8006a54 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 800698a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800698c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006990:	d021      	beq.n	80069d6 <HAL_RCCEx_GetPeriphCLKFreq+0x866>
 8006992:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006994:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006998:	d85c      	bhi.n	8006a54 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 800699a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800699c:	2b00      	cmp	r3, #0
 800699e:	d004      	beq.n	80069aa <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 80069a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069a2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80069a6:	d004      	beq.n	80069b2 <HAL_RCCEx_GetPeriphCLKFreq+0x842>
 80069a8:	e054      	b.n	8006a54 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 80069aa:	f000 f8b3 	bl	8006b14 <HAL_RCCEx_GetD3PCLK1Freq>
 80069ae:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 80069b0:	e0a2      	b.n	8006af8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80069b2:	4b54      	ldr	r3, [pc, #336]	; (8006b04 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80069ba:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80069be:	d107      	bne.n	80069d0 <HAL_RCCEx_GetPeriphCLKFreq+0x860>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80069c0:	f107 0318 	add.w	r3, r7, #24
 80069c4:	4618      	mov	r0, r3
 80069c6:	f000 f8bb 	bl	8006b40 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80069ca:	69fb      	ldr	r3, [r7, #28]
 80069cc:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80069ce:	e093      	b.n	8006af8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 80069d0:	2300      	movs	r3, #0
 80069d2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80069d4:	e090      	b.n	8006af8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80069d6:	4b4b      	ldr	r3, [pc, #300]	; (8006b04 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80069de:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80069e2:	d107      	bne.n	80069f4 <HAL_RCCEx_GetPeriphCLKFreq+0x884>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80069e4:	f107 030c 	add.w	r3, r7, #12
 80069e8:	4618      	mov	r0, r3
 80069ea:	f000 f9fd 	bl	8006de8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80069ee:	693b      	ldr	r3, [r7, #16]
 80069f0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80069f2:	e081      	b.n	8006af8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 80069f4:	2300      	movs	r3, #0
 80069f6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80069f8:	e07e      	b.n	8006af8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80069fa:	4b42      	ldr	r3, [pc, #264]	; (8006b04 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	f003 0304 	and.w	r3, r3, #4
 8006a02:	2b04      	cmp	r3, #4
 8006a04:	d109      	bne.n	8006a1a <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006a06:	4b3f      	ldr	r3, [pc, #252]	; (8006b04 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	08db      	lsrs	r3, r3, #3
 8006a0c:	f003 0303 	and.w	r3, r3, #3
 8006a10:	4a3d      	ldr	r2, [pc, #244]	; (8006b08 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 8006a12:	fa22 f303 	lsr.w	r3, r2, r3
 8006a16:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8006a18:	e06e      	b.n	8006af8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8006a1a:	2300      	movs	r3, #0
 8006a1c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006a1e:	e06b      	b.n	8006af8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8006a20:	4b38      	ldr	r3, [pc, #224]	; (8006b04 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a28:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006a2c:	d102      	bne.n	8006a34 <HAL_RCCEx_GetPeriphCLKFreq+0x8c4>
         {
          frequency = CSI_VALUE;
 8006a2e:	4b37      	ldr	r3, [pc, #220]	; (8006b0c <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8006a30:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006a32:	e061      	b.n	8006af8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8006a34:	2300      	movs	r3, #0
 8006a36:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006a38:	e05e      	b.n	8006af8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8006a3a:	4b32      	ldr	r3, [pc, #200]	; (8006b04 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a42:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006a46:	d102      	bne.n	8006a4e <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
         {
          frequency = HSE_VALUE;
 8006a48:	4b31      	ldr	r3, [pc, #196]	; (8006b10 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8006a4a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8006a4c:	e054      	b.n	8006af8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8006a4e:	2300      	movs	r3, #0
 8006a50:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006a52:	e051      	b.n	8006af8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 8006a54:	2300      	movs	r3, #0
 8006a56:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006a58:	e04e      	b.n	8006af8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006a60:	d148      	bne.n	8006af4 <HAL_RCCEx_GetPeriphCLKFreq+0x984>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 8006a62:	4b28      	ldr	r3, [pc, #160]	; (8006b04 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8006a64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a66:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006a6a:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8006a6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a6e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006a72:	d02a      	beq.n	8006aca <HAL_RCCEx_GetPeriphCLKFreq+0x95a>
 8006a74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a76:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006a7a:	d838      	bhi.n	8006aee <HAL_RCCEx_GetPeriphCLKFreq+0x97e>
 8006a7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d004      	beq.n	8006a8c <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
 8006a82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a84:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006a88:	d00d      	beq.n	8006aa6 <HAL_RCCEx_GetPeriphCLKFreq+0x936>
 8006a8a:	e030      	b.n	8006aee <HAL_RCCEx_GetPeriphCLKFreq+0x97e>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8006a8c:	4b1d      	ldr	r3, [pc, #116]	; (8006b04 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a94:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006a98:	d102      	bne.n	8006aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x930>
         {
          frequency = HSE_VALUE;
 8006a9a:	4b1d      	ldr	r3, [pc, #116]	; (8006b10 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8006a9c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8006a9e:	e02b      	b.n	8006af8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8006aa0:	2300      	movs	r3, #0
 8006aa2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006aa4:	e028      	b.n	8006af8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006aa6:	4b17      	ldr	r3, [pc, #92]	; (8006b04 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006aae:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006ab2:	d107      	bne.n	8006ac4 <HAL_RCCEx_GetPeriphCLKFreq+0x954>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006ab4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006ab8:	4618      	mov	r0, r3
 8006aba:	f000 fae9 	bl	8007090 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006abe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ac0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8006ac2:	e019      	b.n	8006af8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8006ac4:	2300      	movs	r3, #0
 8006ac6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006ac8:	e016      	b.n	8006af8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006aca:	4b0e      	ldr	r3, [pc, #56]	; (8006b04 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006ad2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006ad6:	d107      	bne.n	8006ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006ad8:	f107 0318 	add.w	r3, r7, #24
 8006adc:	4618      	mov	r0, r3
 8006ade:	f000 f82f 	bl	8006b40 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006ae2:	69fb      	ldr	r3, [r7, #28]
 8006ae4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8006ae6:	e007      	b.n	8006af8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8006ae8:	2300      	movs	r3, #0
 8006aea:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006aec:	e004      	b.n	8006af8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 8006aee:	2300      	movs	r3, #0
 8006af0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006af2:	e001      	b.n	8006af8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else
    {
      frequency = 0;
 8006af4:	2300      	movs	r3, #0
 8006af6:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 8006af8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8006afa:	4618      	mov	r0, r3
 8006afc:	3740      	adds	r7, #64	; 0x40
 8006afe:	46bd      	mov	sp, r7
 8006b00:	bd80      	pop	{r7, pc}
 8006b02:	bf00      	nop
 8006b04:	58024400 	.word	0x58024400
 8006b08:	03d09000 	.word	0x03d09000
 8006b0c:	003d0900 	.word	0x003d0900
 8006b10:	007a1200 	.word	0x007a1200

08006b14 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8006b14:	b580      	push	{r7, lr}
 8006b16:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8006b18:	f7fe fbb4 	bl	8005284 <HAL_RCC_GetHCLKFreq>
 8006b1c:	4602      	mov	r2, r0
 8006b1e:	4b06      	ldr	r3, [pc, #24]	; (8006b38 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8006b20:	6a1b      	ldr	r3, [r3, #32]
 8006b22:	091b      	lsrs	r3, r3, #4
 8006b24:	f003 0307 	and.w	r3, r3, #7
 8006b28:	4904      	ldr	r1, [pc, #16]	; (8006b3c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8006b2a:	5ccb      	ldrb	r3, [r1, r3]
 8006b2c:	f003 031f 	and.w	r3, r3, #31
 8006b30:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8006b34:	4618      	mov	r0, r3
 8006b36:	bd80      	pop	{r7, pc}
 8006b38:	58024400 	.word	0x58024400
 8006b3c:	08008184 	.word	0x08008184

08006b40 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8006b40:	b480      	push	{r7}
 8006b42:	b089      	sub	sp, #36	; 0x24
 8006b44:	af00      	add	r7, sp, #0
 8006b46:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006b48:	4ba1      	ldr	r3, [pc, #644]	; (8006dd0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006b4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b4c:	f003 0303 	and.w	r3, r3, #3
 8006b50:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8006b52:	4b9f      	ldr	r3, [pc, #636]	; (8006dd0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006b54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b56:	0b1b      	lsrs	r3, r3, #12
 8006b58:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006b5c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8006b5e:	4b9c      	ldr	r3, [pc, #624]	; (8006dd0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006b60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b62:	091b      	lsrs	r3, r3, #4
 8006b64:	f003 0301 	and.w	r3, r3, #1
 8006b68:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8006b6a:	4b99      	ldr	r3, [pc, #612]	; (8006dd0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006b6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b6e:	08db      	lsrs	r3, r3, #3
 8006b70:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006b74:	693a      	ldr	r2, [r7, #16]
 8006b76:	fb02 f303 	mul.w	r3, r2, r3
 8006b7a:	ee07 3a90 	vmov	s15, r3
 8006b7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b82:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8006b86:	697b      	ldr	r3, [r7, #20]
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	f000 8111 	beq.w	8006db0 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8006b8e:	69bb      	ldr	r3, [r7, #24]
 8006b90:	2b02      	cmp	r3, #2
 8006b92:	f000 8083 	beq.w	8006c9c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8006b96:	69bb      	ldr	r3, [r7, #24]
 8006b98:	2b02      	cmp	r3, #2
 8006b9a:	f200 80a1 	bhi.w	8006ce0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8006b9e:	69bb      	ldr	r3, [r7, #24]
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d003      	beq.n	8006bac <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8006ba4:	69bb      	ldr	r3, [r7, #24]
 8006ba6:	2b01      	cmp	r3, #1
 8006ba8:	d056      	beq.n	8006c58 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8006baa:	e099      	b.n	8006ce0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006bac:	4b88      	ldr	r3, [pc, #544]	; (8006dd0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	f003 0320 	and.w	r3, r3, #32
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d02d      	beq.n	8006c14 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006bb8:	4b85      	ldr	r3, [pc, #532]	; (8006dd0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	08db      	lsrs	r3, r3, #3
 8006bbe:	f003 0303 	and.w	r3, r3, #3
 8006bc2:	4a84      	ldr	r2, [pc, #528]	; (8006dd4 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8006bc4:	fa22 f303 	lsr.w	r3, r2, r3
 8006bc8:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006bca:	68bb      	ldr	r3, [r7, #8]
 8006bcc:	ee07 3a90 	vmov	s15, r3
 8006bd0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006bd4:	697b      	ldr	r3, [r7, #20]
 8006bd6:	ee07 3a90 	vmov	s15, r3
 8006bda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006bde:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006be2:	4b7b      	ldr	r3, [pc, #492]	; (8006dd0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006be4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006be6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006bea:	ee07 3a90 	vmov	s15, r3
 8006bee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006bf2:	ed97 6a03 	vldr	s12, [r7, #12]
 8006bf6:	eddf 5a78 	vldr	s11, [pc, #480]	; 8006dd8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006bfa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006bfe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006c02:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006c06:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006c0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c0e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8006c12:	e087      	b.n	8006d24 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006c14:	697b      	ldr	r3, [r7, #20]
 8006c16:	ee07 3a90 	vmov	s15, r3
 8006c1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c1e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8006ddc <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8006c22:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006c26:	4b6a      	ldr	r3, [pc, #424]	; (8006dd0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006c28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c2e:	ee07 3a90 	vmov	s15, r3
 8006c32:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c36:	ed97 6a03 	vldr	s12, [r7, #12]
 8006c3a:	eddf 5a67 	vldr	s11, [pc, #412]	; 8006dd8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006c3e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006c42:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006c46:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006c4a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006c4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c52:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006c56:	e065      	b.n	8006d24 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006c58:	697b      	ldr	r3, [r7, #20]
 8006c5a:	ee07 3a90 	vmov	s15, r3
 8006c5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c62:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8006de0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006c66:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006c6a:	4b59      	ldr	r3, [pc, #356]	; (8006dd0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006c6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c72:	ee07 3a90 	vmov	s15, r3
 8006c76:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c7a:	ed97 6a03 	vldr	s12, [r7, #12]
 8006c7e:	eddf 5a56 	vldr	s11, [pc, #344]	; 8006dd8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006c82:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006c86:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006c8a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006c8e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006c92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c96:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006c9a:	e043      	b.n	8006d24 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006c9c:	697b      	ldr	r3, [r7, #20]
 8006c9e:	ee07 3a90 	vmov	s15, r3
 8006ca2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ca6:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8006de4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8006caa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006cae:	4b48      	ldr	r3, [pc, #288]	; (8006dd0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006cb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cb2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006cb6:	ee07 3a90 	vmov	s15, r3
 8006cba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006cbe:	ed97 6a03 	vldr	s12, [r7, #12]
 8006cc2:	eddf 5a45 	vldr	s11, [pc, #276]	; 8006dd8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006cc6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006cca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006cce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006cd2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006cd6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006cda:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006cde:	e021      	b.n	8006d24 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006ce0:	697b      	ldr	r3, [r7, #20]
 8006ce2:	ee07 3a90 	vmov	s15, r3
 8006ce6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006cea:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8006de0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006cee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006cf2:	4b37      	ldr	r3, [pc, #220]	; (8006dd0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006cf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cf6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006cfa:	ee07 3a90 	vmov	s15, r3
 8006cfe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006d02:	ed97 6a03 	vldr	s12, [r7, #12]
 8006d06:	eddf 5a34 	vldr	s11, [pc, #208]	; 8006dd8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006d0a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006d0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006d12:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006d16:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006d1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006d1e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006d22:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8006d24:	4b2a      	ldr	r3, [pc, #168]	; (8006dd0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006d26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d28:	0a5b      	lsrs	r3, r3, #9
 8006d2a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006d2e:	ee07 3a90 	vmov	s15, r3
 8006d32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d36:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006d3a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006d3e:	edd7 6a07 	vldr	s13, [r7, #28]
 8006d42:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006d46:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006d4a:	ee17 2a90 	vmov	r2, s15
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8006d52:	4b1f      	ldr	r3, [pc, #124]	; (8006dd0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006d54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d56:	0c1b      	lsrs	r3, r3, #16
 8006d58:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006d5c:	ee07 3a90 	vmov	s15, r3
 8006d60:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d64:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006d68:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006d6c:	edd7 6a07 	vldr	s13, [r7, #28]
 8006d70:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006d74:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006d78:	ee17 2a90 	vmov	r2, s15
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8006d80:	4b13      	ldr	r3, [pc, #76]	; (8006dd0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006d82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d84:	0e1b      	lsrs	r3, r3, #24
 8006d86:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006d8a:	ee07 3a90 	vmov	s15, r3
 8006d8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d92:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006d96:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006d9a:	edd7 6a07 	vldr	s13, [r7, #28]
 8006d9e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006da2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006da6:	ee17 2a90 	vmov	r2, s15
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8006dae:	e008      	b.n	8006dc2 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	2200      	movs	r2, #0
 8006db4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	2200      	movs	r2, #0
 8006dba:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	2200      	movs	r2, #0
 8006dc0:	609a      	str	r2, [r3, #8]
}
 8006dc2:	bf00      	nop
 8006dc4:	3724      	adds	r7, #36	; 0x24
 8006dc6:	46bd      	mov	sp, r7
 8006dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dcc:	4770      	bx	lr
 8006dce:	bf00      	nop
 8006dd0:	58024400 	.word	0x58024400
 8006dd4:	03d09000 	.word	0x03d09000
 8006dd8:	46000000 	.word	0x46000000
 8006ddc:	4c742400 	.word	0x4c742400
 8006de0:	4a742400 	.word	0x4a742400
 8006de4:	4af42400 	.word	0x4af42400

08006de8 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8006de8:	b480      	push	{r7}
 8006dea:	b089      	sub	sp, #36	; 0x24
 8006dec:	af00      	add	r7, sp, #0
 8006dee:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006df0:	4ba1      	ldr	r3, [pc, #644]	; (8007078 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006df2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006df4:	f003 0303 	and.w	r3, r3, #3
 8006df8:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8006dfa:	4b9f      	ldr	r3, [pc, #636]	; (8007078 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006dfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006dfe:	0d1b      	lsrs	r3, r3, #20
 8006e00:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006e04:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8006e06:	4b9c      	ldr	r3, [pc, #624]	; (8007078 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006e08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e0a:	0a1b      	lsrs	r3, r3, #8
 8006e0c:	f003 0301 	and.w	r3, r3, #1
 8006e10:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8006e12:	4b99      	ldr	r3, [pc, #612]	; (8007078 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006e14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e16:	08db      	lsrs	r3, r3, #3
 8006e18:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006e1c:	693a      	ldr	r2, [r7, #16]
 8006e1e:	fb02 f303 	mul.w	r3, r2, r3
 8006e22:	ee07 3a90 	vmov	s15, r3
 8006e26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e2a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8006e2e:	697b      	ldr	r3, [r7, #20]
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	f000 8111 	beq.w	8007058 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8006e36:	69bb      	ldr	r3, [r7, #24]
 8006e38:	2b02      	cmp	r3, #2
 8006e3a:	f000 8083 	beq.w	8006f44 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8006e3e:	69bb      	ldr	r3, [r7, #24]
 8006e40:	2b02      	cmp	r3, #2
 8006e42:	f200 80a1 	bhi.w	8006f88 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8006e46:	69bb      	ldr	r3, [r7, #24]
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d003      	beq.n	8006e54 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8006e4c:	69bb      	ldr	r3, [r7, #24]
 8006e4e:	2b01      	cmp	r3, #1
 8006e50:	d056      	beq.n	8006f00 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8006e52:	e099      	b.n	8006f88 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006e54:	4b88      	ldr	r3, [pc, #544]	; (8007078 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	f003 0320 	and.w	r3, r3, #32
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d02d      	beq.n	8006ebc <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006e60:	4b85      	ldr	r3, [pc, #532]	; (8007078 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	08db      	lsrs	r3, r3, #3
 8006e66:	f003 0303 	and.w	r3, r3, #3
 8006e6a:	4a84      	ldr	r2, [pc, #528]	; (800707c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8006e6c:	fa22 f303 	lsr.w	r3, r2, r3
 8006e70:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006e72:	68bb      	ldr	r3, [r7, #8]
 8006e74:	ee07 3a90 	vmov	s15, r3
 8006e78:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006e7c:	697b      	ldr	r3, [r7, #20]
 8006e7e:	ee07 3a90 	vmov	s15, r3
 8006e82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e86:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006e8a:	4b7b      	ldr	r3, [pc, #492]	; (8007078 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006e8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e92:	ee07 3a90 	vmov	s15, r3
 8006e96:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006e9a:	ed97 6a03 	vldr	s12, [r7, #12]
 8006e9e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8007080 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006ea2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006ea6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006eaa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006eae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006eb2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006eb6:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8006eba:	e087      	b.n	8006fcc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006ebc:	697b      	ldr	r3, [r7, #20]
 8006ebe:	ee07 3a90 	vmov	s15, r3
 8006ec2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ec6:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8007084 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8006eca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006ece:	4b6a      	ldr	r3, [pc, #424]	; (8007078 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006ed0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ed2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ed6:	ee07 3a90 	vmov	s15, r3
 8006eda:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006ede:	ed97 6a03 	vldr	s12, [r7, #12]
 8006ee2:	eddf 5a67 	vldr	s11, [pc, #412]	; 8007080 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006ee6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006eea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006eee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006ef2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006ef6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006efa:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006efe:	e065      	b.n	8006fcc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006f00:	697b      	ldr	r3, [r7, #20]
 8006f02:	ee07 3a90 	vmov	s15, r3
 8006f06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f0a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8007088 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006f0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006f12:	4b59      	ldr	r3, [pc, #356]	; (8007078 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f1a:	ee07 3a90 	vmov	s15, r3
 8006f1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f22:	ed97 6a03 	vldr	s12, [r7, #12]
 8006f26:	eddf 5a56 	vldr	s11, [pc, #344]	; 8007080 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006f2a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006f2e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006f32:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006f36:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006f3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f3e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006f42:	e043      	b.n	8006fcc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006f44:	697b      	ldr	r3, [r7, #20]
 8006f46:	ee07 3a90 	vmov	s15, r3
 8006f4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f4e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800708c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8006f52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006f56:	4b48      	ldr	r3, [pc, #288]	; (8007078 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006f58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f5e:	ee07 3a90 	vmov	s15, r3
 8006f62:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f66:	ed97 6a03 	vldr	s12, [r7, #12]
 8006f6a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8007080 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006f6e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006f72:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006f76:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006f7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006f7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f82:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006f86:	e021      	b.n	8006fcc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006f88:	697b      	ldr	r3, [r7, #20]
 8006f8a:	ee07 3a90 	vmov	s15, r3
 8006f8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f92:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8007088 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006f96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006f9a:	4b37      	ldr	r3, [pc, #220]	; (8007078 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006fa2:	ee07 3a90 	vmov	s15, r3
 8006fa6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006faa:	ed97 6a03 	vldr	s12, [r7, #12]
 8006fae:	eddf 5a34 	vldr	s11, [pc, #208]	; 8007080 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006fb2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006fb6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006fba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006fbe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006fc2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006fc6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006fca:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8006fcc:	4b2a      	ldr	r3, [pc, #168]	; (8007078 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006fce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fd0:	0a5b      	lsrs	r3, r3, #9
 8006fd2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006fd6:	ee07 3a90 	vmov	s15, r3
 8006fda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006fde:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006fe2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006fe6:	edd7 6a07 	vldr	s13, [r7, #28]
 8006fea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006fee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006ff2:	ee17 2a90 	vmov	r2, s15
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8006ffa:	4b1f      	ldr	r3, [pc, #124]	; (8007078 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006ffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ffe:	0c1b      	lsrs	r3, r3, #16
 8007000:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007004:	ee07 3a90 	vmov	s15, r3
 8007008:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800700c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007010:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007014:	edd7 6a07 	vldr	s13, [r7, #28]
 8007018:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800701c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007020:	ee17 2a90 	vmov	r2, s15
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8007028:	4b13      	ldr	r3, [pc, #76]	; (8007078 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800702a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800702c:	0e1b      	lsrs	r3, r3, #24
 800702e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007032:	ee07 3a90 	vmov	s15, r3
 8007036:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800703a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800703e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007042:	edd7 6a07 	vldr	s13, [r7, #28]
 8007046:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800704a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800704e:	ee17 2a90 	vmov	r2, s15
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8007056:	e008      	b.n	800706a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	2200      	movs	r2, #0
 800705c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	2200      	movs	r2, #0
 8007062:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	2200      	movs	r2, #0
 8007068:	609a      	str	r2, [r3, #8]
}
 800706a:	bf00      	nop
 800706c:	3724      	adds	r7, #36	; 0x24
 800706e:	46bd      	mov	sp, r7
 8007070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007074:	4770      	bx	lr
 8007076:	bf00      	nop
 8007078:	58024400 	.word	0x58024400
 800707c:	03d09000 	.word	0x03d09000
 8007080:	46000000 	.word	0x46000000
 8007084:	4c742400 	.word	0x4c742400
 8007088:	4a742400 	.word	0x4a742400
 800708c:	4af42400 	.word	0x4af42400

08007090 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 8007090:	b480      	push	{r7}
 8007092:	b089      	sub	sp, #36	; 0x24
 8007094:	af00      	add	r7, sp, #0
 8007096:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007098:	4ba0      	ldr	r3, [pc, #640]	; (800731c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800709a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800709c:	f003 0303 	and.w	r3, r3, #3
 80070a0:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 80070a2:	4b9e      	ldr	r3, [pc, #632]	; (800731c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80070a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070a6:	091b      	lsrs	r3, r3, #4
 80070a8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80070ac:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 80070ae:	4b9b      	ldr	r3, [pc, #620]	; (800731c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80070b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070b2:	f003 0301 	and.w	r3, r3, #1
 80070b6:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80070b8:	4b98      	ldr	r3, [pc, #608]	; (800731c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80070ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80070bc:	08db      	lsrs	r3, r3, #3
 80070be:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80070c2:	693a      	ldr	r2, [r7, #16]
 80070c4:	fb02 f303 	mul.w	r3, r2, r3
 80070c8:	ee07 3a90 	vmov	s15, r3
 80070cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80070d0:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 80070d4:	697b      	ldr	r3, [r7, #20]
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	f000 8111 	beq.w	80072fe <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 80070dc:	69bb      	ldr	r3, [r7, #24]
 80070de:	2b02      	cmp	r3, #2
 80070e0:	f000 8083 	beq.w	80071ea <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 80070e4:	69bb      	ldr	r3, [r7, #24]
 80070e6:	2b02      	cmp	r3, #2
 80070e8:	f200 80a1 	bhi.w	800722e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 80070ec:	69bb      	ldr	r3, [r7, #24]
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d003      	beq.n	80070fa <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 80070f2:	69bb      	ldr	r3, [r7, #24]
 80070f4:	2b01      	cmp	r3, #1
 80070f6:	d056      	beq.n	80071a6 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 80070f8:	e099      	b.n	800722e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80070fa:	4b88      	ldr	r3, [pc, #544]	; (800731c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	f003 0320 	and.w	r3, r3, #32
 8007102:	2b00      	cmp	r3, #0
 8007104:	d02d      	beq.n	8007162 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007106:	4b85      	ldr	r3, [pc, #532]	; (800731c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	08db      	lsrs	r3, r3, #3
 800710c:	f003 0303 	and.w	r3, r3, #3
 8007110:	4a83      	ldr	r2, [pc, #524]	; (8007320 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8007112:	fa22 f303 	lsr.w	r3, r2, r3
 8007116:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007118:	68bb      	ldr	r3, [r7, #8]
 800711a:	ee07 3a90 	vmov	s15, r3
 800711e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007122:	697b      	ldr	r3, [r7, #20]
 8007124:	ee07 3a90 	vmov	s15, r3
 8007128:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800712c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007130:	4b7a      	ldr	r3, [pc, #488]	; (800731c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007132:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007134:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007138:	ee07 3a90 	vmov	s15, r3
 800713c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007140:	ed97 6a03 	vldr	s12, [r7, #12]
 8007144:	eddf 5a77 	vldr	s11, [pc, #476]	; 8007324 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007148:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800714c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007150:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007154:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007158:	ee67 7a27 	vmul.f32	s15, s14, s15
 800715c:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8007160:	e087      	b.n	8007272 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007162:	697b      	ldr	r3, [r7, #20]
 8007164:	ee07 3a90 	vmov	s15, r3
 8007168:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800716c:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8007328 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8007170:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007174:	4b69      	ldr	r3, [pc, #420]	; (800731c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007176:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007178:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800717c:	ee07 3a90 	vmov	s15, r3
 8007180:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007184:	ed97 6a03 	vldr	s12, [r7, #12]
 8007188:	eddf 5a66 	vldr	s11, [pc, #408]	; 8007324 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800718c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007190:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007194:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007198:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800719c:	ee67 7a27 	vmul.f32	s15, s14, s15
 80071a0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80071a4:	e065      	b.n	8007272 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80071a6:	697b      	ldr	r3, [r7, #20]
 80071a8:	ee07 3a90 	vmov	s15, r3
 80071ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071b0:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800732c <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 80071b4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80071b8:	4b58      	ldr	r3, [pc, #352]	; (800731c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80071ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80071c0:	ee07 3a90 	vmov	s15, r3
 80071c4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80071c8:	ed97 6a03 	vldr	s12, [r7, #12]
 80071cc:	eddf 5a55 	vldr	s11, [pc, #340]	; 8007324 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80071d0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80071d4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80071d8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80071dc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80071e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80071e4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80071e8:	e043      	b.n	8007272 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80071ea:	697b      	ldr	r3, [r7, #20]
 80071ec:	ee07 3a90 	vmov	s15, r3
 80071f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071f4:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8007330 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 80071f8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80071fc:	4b47      	ldr	r3, [pc, #284]	; (800731c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80071fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007200:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007204:	ee07 3a90 	vmov	s15, r3
 8007208:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800720c:	ed97 6a03 	vldr	s12, [r7, #12]
 8007210:	eddf 5a44 	vldr	s11, [pc, #272]	; 8007324 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007214:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007218:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800721c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007220:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007224:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007228:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800722c:	e021      	b.n	8007272 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800722e:	697b      	ldr	r3, [r7, #20]
 8007230:	ee07 3a90 	vmov	s15, r3
 8007234:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007238:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8007328 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800723c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007240:	4b36      	ldr	r3, [pc, #216]	; (800731c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007242:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007244:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007248:	ee07 3a90 	vmov	s15, r3
 800724c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007250:	ed97 6a03 	vldr	s12, [r7, #12]
 8007254:	eddf 5a33 	vldr	s11, [pc, #204]	; 8007324 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007258:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800725c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007260:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007264:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007268:	ee67 7a27 	vmul.f32	s15, s14, s15
 800726c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007270:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 8007272:	4b2a      	ldr	r3, [pc, #168]	; (800731c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007276:	0a5b      	lsrs	r3, r3, #9
 8007278:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800727c:	ee07 3a90 	vmov	s15, r3
 8007280:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007284:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007288:	ee37 7a87 	vadd.f32	s14, s15, s14
 800728c:	edd7 6a07 	vldr	s13, [r7, #28]
 8007290:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007294:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007298:	ee17 2a90 	vmov	r2, s15
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 80072a0:	4b1e      	ldr	r3, [pc, #120]	; (800731c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80072a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072a4:	0c1b      	lsrs	r3, r3, #16
 80072a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80072aa:	ee07 3a90 	vmov	s15, r3
 80072ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072b2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80072b6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80072ba:	edd7 6a07 	vldr	s13, [r7, #28]
 80072be:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80072c2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80072c6:	ee17 2a90 	vmov	r2, s15
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 80072ce:	4b13      	ldr	r3, [pc, #76]	; (800731c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80072d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072d2:	0e1b      	lsrs	r3, r3, #24
 80072d4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80072d8:	ee07 3a90 	vmov	s15, r3
 80072dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072e0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80072e4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80072e8:	edd7 6a07 	vldr	s13, [r7, #28]
 80072ec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80072f0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80072f4:	ee17 2a90 	vmov	r2, s15
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 80072fc:	e008      	b.n	8007310 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	2200      	movs	r2, #0
 8007302:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	2200      	movs	r2, #0
 8007308:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	2200      	movs	r2, #0
 800730e:	609a      	str	r2, [r3, #8]
}
 8007310:	bf00      	nop
 8007312:	3724      	adds	r7, #36	; 0x24
 8007314:	46bd      	mov	sp, r7
 8007316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800731a:	4770      	bx	lr
 800731c:	58024400 	.word	0x58024400
 8007320:	03d09000 	.word	0x03d09000
 8007324:	46000000 	.word	0x46000000
 8007328:	4c742400 	.word	0x4c742400
 800732c:	4a742400 	.word	0x4a742400
 8007330:	4af42400 	.word	0x4af42400

08007334 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8007334:	b580      	push	{r7, lr}
 8007336:	b084      	sub	sp, #16
 8007338:	af00      	add	r7, sp, #0
 800733a:	6078      	str	r0, [r7, #4]
 800733c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800733e:	2300      	movs	r3, #0
 8007340:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007342:	4b53      	ldr	r3, [pc, #332]	; (8007490 <RCCEx_PLL2_Config+0x15c>)
 8007344:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007346:	f003 0303 	and.w	r3, r3, #3
 800734a:	2b03      	cmp	r3, #3
 800734c:	d101      	bne.n	8007352 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800734e:	2301      	movs	r3, #1
 8007350:	e099      	b.n	8007486 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8007352:	4b4f      	ldr	r3, [pc, #316]	; (8007490 <RCCEx_PLL2_Config+0x15c>)
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	4a4e      	ldr	r2, [pc, #312]	; (8007490 <RCCEx_PLL2_Config+0x15c>)
 8007358:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800735c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800735e:	f7f9 fe17 	bl	8000f90 <HAL_GetTick>
 8007362:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007364:	e008      	b.n	8007378 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8007366:	f7f9 fe13 	bl	8000f90 <HAL_GetTick>
 800736a:	4602      	mov	r2, r0
 800736c:	68bb      	ldr	r3, [r7, #8]
 800736e:	1ad3      	subs	r3, r2, r3
 8007370:	2b02      	cmp	r3, #2
 8007372:	d901      	bls.n	8007378 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007374:	2303      	movs	r3, #3
 8007376:	e086      	b.n	8007486 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007378:	4b45      	ldr	r3, [pc, #276]	; (8007490 <RCCEx_PLL2_Config+0x15c>)
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007380:	2b00      	cmp	r3, #0
 8007382:	d1f0      	bne.n	8007366 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8007384:	4b42      	ldr	r3, [pc, #264]	; (8007490 <RCCEx_PLL2_Config+0x15c>)
 8007386:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007388:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	031b      	lsls	r3, r3, #12
 8007392:	493f      	ldr	r1, [pc, #252]	; (8007490 <RCCEx_PLL2_Config+0x15c>)
 8007394:	4313      	orrs	r3, r2
 8007396:	628b      	str	r3, [r1, #40]	; 0x28
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	685b      	ldr	r3, [r3, #4]
 800739c:	3b01      	subs	r3, #1
 800739e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	689b      	ldr	r3, [r3, #8]
 80073a6:	3b01      	subs	r3, #1
 80073a8:	025b      	lsls	r3, r3, #9
 80073aa:	b29b      	uxth	r3, r3
 80073ac:	431a      	orrs	r2, r3
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	68db      	ldr	r3, [r3, #12]
 80073b2:	3b01      	subs	r3, #1
 80073b4:	041b      	lsls	r3, r3, #16
 80073b6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80073ba:	431a      	orrs	r2, r3
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	691b      	ldr	r3, [r3, #16]
 80073c0:	3b01      	subs	r3, #1
 80073c2:	061b      	lsls	r3, r3, #24
 80073c4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80073c8:	4931      	ldr	r1, [pc, #196]	; (8007490 <RCCEx_PLL2_Config+0x15c>)
 80073ca:	4313      	orrs	r3, r2
 80073cc:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80073ce:	4b30      	ldr	r3, [pc, #192]	; (8007490 <RCCEx_PLL2_Config+0x15c>)
 80073d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073d2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	695b      	ldr	r3, [r3, #20]
 80073da:	492d      	ldr	r1, [pc, #180]	; (8007490 <RCCEx_PLL2_Config+0x15c>)
 80073dc:	4313      	orrs	r3, r2
 80073de:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80073e0:	4b2b      	ldr	r3, [pc, #172]	; (8007490 <RCCEx_PLL2_Config+0x15c>)
 80073e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073e4:	f023 0220 	bic.w	r2, r3, #32
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	699b      	ldr	r3, [r3, #24]
 80073ec:	4928      	ldr	r1, [pc, #160]	; (8007490 <RCCEx_PLL2_Config+0x15c>)
 80073ee:	4313      	orrs	r3, r2
 80073f0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80073f2:	4b27      	ldr	r3, [pc, #156]	; (8007490 <RCCEx_PLL2_Config+0x15c>)
 80073f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073f6:	4a26      	ldr	r2, [pc, #152]	; (8007490 <RCCEx_PLL2_Config+0x15c>)
 80073f8:	f023 0310 	bic.w	r3, r3, #16
 80073fc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80073fe:	4b24      	ldr	r3, [pc, #144]	; (8007490 <RCCEx_PLL2_Config+0x15c>)
 8007400:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007402:	4b24      	ldr	r3, [pc, #144]	; (8007494 <RCCEx_PLL2_Config+0x160>)
 8007404:	4013      	ands	r3, r2
 8007406:	687a      	ldr	r2, [r7, #4]
 8007408:	69d2      	ldr	r2, [r2, #28]
 800740a:	00d2      	lsls	r2, r2, #3
 800740c:	4920      	ldr	r1, [pc, #128]	; (8007490 <RCCEx_PLL2_Config+0x15c>)
 800740e:	4313      	orrs	r3, r2
 8007410:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8007412:	4b1f      	ldr	r3, [pc, #124]	; (8007490 <RCCEx_PLL2_Config+0x15c>)
 8007414:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007416:	4a1e      	ldr	r2, [pc, #120]	; (8007490 <RCCEx_PLL2_Config+0x15c>)
 8007418:	f043 0310 	orr.w	r3, r3, #16
 800741c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800741e:	683b      	ldr	r3, [r7, #0]
 8007420:	2b00      	cmp	r3, #0
 8007422:	d106      	bne.n	8007432 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8007424:	4b1a      	ldr	r3, [pc, #104]	; (8007490 <RCCEx_PLL2_Config+0x15c>)
 8007426:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007428:	4a19      	ldr	r2, [pc, #100]	; (8007490 <RCCEx_PLL2_Config+0x15c>)
 800742a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800742e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007430:	e00f      	b.n	8007452 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8007432:	683b      	ldr	r3, [r7, #0]
 8007434:	2b01      	cmp	r3, #1
 8007436:	d106      	bne.n	8007446 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8007438:	4b15      	ldr	r3, [pc, #84]	; (8007490 <RCCEx_PLL2_Config+0x15c>)
 800743a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800743c:	4a14      	ldr	r2, [pc, #80]	; (8007490 <RCCEx_PLL2_Config+0x15c>)
 800743e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007442:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007444:	e005      	b.n	8007452 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8007446:	4b12      	ldr	r3, [pc, #72]	; (8007490 <RCCEx_PLL2_Config+0x15c>)
 8007448:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800744a:	4a11      	ldr	r2, [pc, #68]	; (8007490 <RCCEx_PLL2_Config+0x15c>)
 800744c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007450:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8007452:	4b0f      	ldr	r3, [pc, #60]	; (8007490 <RCCEx_PLL2_Config+0x15c>)
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	4a0e      	ldr	r2, [pc, #56]	; (8007490 <RCCEx_PLL2_Config+0x15c>)
 8007458:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800745c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800745e:	f7f9 fd97 	bl	8000f90 <HAL_GetTick>
 8007462:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007464:	e008      	b.n	8007478 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8007466:	f7f9 fd93 	bl	8000f90 <HAL_GetTick>
 800746a:	4602      	mov	r2, r0
 800746c:	68bb      	ldr	r3, [r7, #8]
 800746e:	1ad3      	subs	r3, r2, r3
 8007470:	2b02      	cmp	r3, #2
 8007472:	d901      	bls.n	8007478 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007474:	2303      	movs	r3, #3
 8007476:	e006      	b.n	8007486 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007478:	4b05      	ldr	r3, [pc, #20]	; (8007490 <RCCEx_PLL2_Config+0x15c>)
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007480:	2b00      	cmp	r3, #0
 8007482:	d0f0      	beq.n	8007466 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8007484:	7bfb      	ldrb	r3, [r7, #15]
}
 8007486:	4618      	mov	r0, r3
 8007488:	3710      	adds	r7, #16
 800748a:	46bd      	mov	sp, r7
 800748c:	bd80      	pop	{r7, pc}
 800748e:	bf00      	nop
 8007490:	58024400 	.word	0x58024400
 8007494:	ffff0007 	.word	0xffff0007

08007498 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8007498:	b580      	push	{r7, lr}
 800749a:	b084      	sub	sp, #16
 800749c:	af00      	add	r7, sp, #0
 800749e:	6078      	str	r0, [r7, #4]
 80074a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80074a2:	2300      	movs	r3, #0
 80074a4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80074a6:	4b53      	ldr	r3, [pc, #332]	; (80075f4 <RCCEx_PLL3_Config+0x15c>)
 80074a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074aa:	f003 0303 	and.w	r3, r3, #3
 80074ae:	2b03      	cmp	r3, #3
 80074b0:	d101      	bne.n	80074b6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80074b2:	2301      	movs	r3, #1
 80074b4:	e099      	b.n	80075ea <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80074b6:	4b4f      	ldr	r3, [pc, #316]	; (80075f4 <RCCEx_PLL3_Config+0x15c>)
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	4a4e      	ldr	r2, [pc, #312]	; (80075f4 <RCCEx_PLL3_Config+0x15c>)
 80074bc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80074c0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80074c2:	f7f9 fd65 	bl	8000f90 <HAL_GetTick>
 80074c6:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80074c8:	e008      	b.n	80074dc <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80074ca:	f7f9 fd61 	bl	8000f90 <HAL_GetTick>
 80074ce:	4602      	mov	r2, r0
 80074d0:	68bb      	ldr	r3, [r7, #8]
 80074d2:	1ad3      	subs	r3, r2, r3
 80074d4:	2b02      	cmp	r3, #2
 80074d6:	d901      	bls.n	80074dc <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80074d8:	2303      	movs	r3, #3
 80074da:	e086      	b.n	80075ea <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80074dc:	4b45      	ldr	r3, [pc, #276]	; (80075f4 <RCCEx_PLL3_Config+0x15c>)
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d1f0      	bne.n	80074ca <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80074e8:	4b42      	ldr	r3, [pc, #264]	; (80075f4 <RCCEx_PLL3_Config+0x15c>)
 80074ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074ec:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	051b      	lsls	r3, r3, #20
 80074f6:	493f      	ldr	r1, [pc, #252]	; (80075f4 <RCCEx_PLL3_Config+0x15c>)
 80074f8:	4313      	orrs	r3, r2
 80074fa:	628b      	str	r3, [r1, #40]	; 0x28
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	685b      	ldr	r3, [r3, #4]
 8007500:	3b01      	subs	r3, #1
 8007502:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	689b      	ldr	r3, [r3, #8]
 800750a:	3b01      	subs	r3, #1
 800750c:	025b      	lsls	r3, r3, #9
 800750e:	b29b      	uxth	r3, r3
 8007510:	431a      	orrs	r2, r3
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	68db      	ldr	r3, [r3, #12]
 8007516:	3b01      	subs	r3, #1
 8007518:	041b      	lsls	r3, r3, #16
 800751a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800751e:	431a      	orrs	r2, r3
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	691b      	ldr	r3, [r3, #16]
 8007524:	3b01      	subs	r3, #1
 8007526:	061b      	lsls	r3, r3, #24
 8007528:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800752c:	4931      	ldr	r1, [pc, #196]	; (80075f4 <RCCEx_PLL3_Config+0x15c>)
 800752e:	4313      	orrs	r3, r2
 8007530:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8007532:	4b30      	ldr	r3, [pc, #192]	; (80075f4 <RCCEx_PLL3_Config+0x15c>)
 8007534:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007536:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	695b      	ldr	r3, [r3, #20]
 800753e:	492d      	ldr	r1, [pc, #180]	; (80075f4 <RCCEx_PLL3_Config+0x15c>)
 8007540:	4313      	orrs	r3, r2
 8007542:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8007544:	4b2b      	ldr	r3, [pc, #172]	; (80075f4 <RCCEx_PLL3_Config+0x15c>)
 8007546:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007548:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	699b      	ldr	r3, [r3, #24]
 8007550:	4928      	ldr	r1, [pc, #160]	; (80075f4 <RCCEx_PLL3_Config+0x15c>)
 8007552:	4313      	orrs	r3, r2
 8007554:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8007556:	4b27      	ldr	r3, [pc, #156]	; (80075f4 <RCCEx_PLL3_Config+0x15c>)
 8007558:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800755a:	4a26      	ldr	r2, [pc, #152]	; (80075f4 <RCCEx_PLL3_Config+0x15c>)
 800755c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007560:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8007562:	4b24      	ldr	r3, [pc, #144]	; (80075f4 <RCCEx_PLL3_Config+0x15c>)
 8007564:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007566:	4b24      	ldr	r3, [pc, #144]	; (80075f8 <RCCEx_PLL3_Config+0x160>)
 8007568:	4013      	ands	r3, r2
 800756a:	687a      	ldr	r2, [r7, #4]
 800756c:	69d2      	ldr	r2, [r2, #28]
 800756e:	00d2      	lsls	r2, r2, #3
 8007570:	4920      	ldr	r1, [pc, #128]	; (80075f4 <RCCEx_PLL3_Config+0x15c>)
 8007572:	4313      	orrs	r3, r2
 8007574:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8007576:	4b1f      	ldr	r3, [pc, #124]	; (80075f4 <RCCEx_PLL3_Config+0x15c>)
 8007578:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800757a:	4a1e      	ldr	r2, [pc, #120]	; (80075f4 <RCCEx_PLL3_Config+0x15c>)
 800757c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007580:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8007582:	683b      	ldr	r3, [r7, #0]
 8007584:	2b00      	cmp	r3, #0
 8007586:	d106      	bne.n	8007596 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8007588:	4b1a      	ldr	r3, [pc, #104]	; (80075f4 <RCCEx_PLL3_Config+0x15c>)
 800758a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800758c:	4a19      	ldr	r2, [pc, #100]	; (80075f4 <RCCEx_PLL3_Config+0x15c>)
 800758e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8007592:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007594:	e00f      	b.n	80075b6 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8007596:	683b      	ldr	r3, [r7, #0]
 8007598:	2b01      	cmp	r3, #1
 800759a:	d106      	bne.n	80075aa <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800759c:	4b15      	ldr	r3, [pc, #84]	; (80075f4 <RCCEx_PLL3_Config+0x15c>)
 800759e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075a0:	4a14      	ldr	r2, [pc, #80]	; (80075f4 <RCCEx_PLL3_Config+0x15c>)
 80075a2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80075a6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80075a8:	e005      	b.n	80075b6 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80075aa:	4b12      	ldr	r3, [pc, #72]	; (80075f4 <RCCEx_PLL3_Config+0x15c>)
 80075ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075ae:	4a11      	ldr	r2, [pc, #68]	; (80075f4 <RCCEx_PLL3_Config+0x15c>)
 80075b0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80075b4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80075b6:	4b0f      	ldr	r3, [pc, #60]	; (80075f4 <RCCEx_PLL3_Config+0x15c>)
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	4a0e      	ldr	r2, [pc, #56]	; (80075f4 <RCCEx_PLL3_Config+0x15c>)
 80075bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80075c0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80075c2:	f7f9 fce5 	bl	8000f90 <HAL_GetTick>
 80075c6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80075c8:	e008      	b.n	80075dc <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80075ca:	f7f9 fce1 	bl	8000f90 <HAL_GetTick>
 80075ce:	4602      	mov	r2, r0
 80075d0:	68bb      	ldr	r3, [r7, #8]
 80075d2:	1ad3      	subs	r3, r2, r3
 80075d4:	2b02      	cmp	r3, #2
 80075d6:	d901      	bls.n	80075dc <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80075d8:	2303      	movs	r3, #3
 80075da:	e006      	b.n	80075ea <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80075dc:	4b05      	ldr	r3, [pc, #20]	; (80075f4 <RCCEx_PLL3_Config+0x15c>)
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d0f0      	beq.n	80075ca <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80075e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80075ea:	4618      	mov	r0, r3
 80075ec:	3710      	adds	r7, #16
 80075ee:	46bd      	mov	sp, r7
 80075f0:	bd80      	pop	{r7, pc}
 80075f2:	bf00      	nop
 80075f4:	58024400 	.word	0x58024400
 80075f8:	ffff0007 	.word	0xffff0007

080075fc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80075fc:	b580      	push	{r7, lr}
 80075fe:	b082      	sub	sp, #8
 8007600:	af00      	add	r7, sp, #0
 8007602:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	2b00      	cmp	r3, #0
 8007608:	d101      	bne.n	800760e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800760a:	2301      	movs	r3, #1
 800760c:	e049      	b.n	80076a2 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007614:	b2db      	uxtb	r3, r3
 8007616:	2b00      	cmp	r3, #0
 8007618:	d106      	bne.n	8007628 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	2200      	movs	r2, #0
 800761e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007622:	6878      	ldr	r0, [r7, #4]
 8007624:	f7f9 fb78 	bl	8000d18 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	2202      	movs	r2, #2
 800762c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	681a      	ldr	r2, [r3, #0]
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	3304      	adds	r3, #4
 8007638:	4619      	mov	r1, r3
 800763a:	4610      	mov	r0, r2
 800763c:	f000 f946 	bl	80078cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	2201      	movs	r2, #1
 8007644:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	2201      	movs	r2, #1
 800764c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	2201      	movs	r2, #1
 8007654:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	2201      	movs	r2, #1
 800765c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	2201      	movs	r2, #1
 8007664:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	2201      	movs	r2, #1
 800766c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	2201      	movs	r2, #1
 8007674:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	2201      	movs	r2, #1
 800767c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	2201      	movs	r2, #1
 8007684:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	2201      	movs	r2, #1
 800768c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	2201      	movs	r2, #1
 8007694:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	2201      	movs	r2, #1
 800769c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80076a0:	2300      	movs	r3, #0
}
 80076a2:	4618      	mov	r0, r3
 80076a4:	3708      	adds	r7, #8
 80076a6:	46bd      	mov	sp, r7
 80076a8:	bd80      	pop	{r7, pc}
	...

080076ac <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80076ac:	b580      	push	{r7, lr}
 80076ae:	b084      	sub	sp, #16
 80076b0:	af00      	add	r7, sp, #0
 80076b2:	60f8      	str	r0, [r7, #12]
 80076b4:	60b9      	str	r1, [r7, #8]
 80076b6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80076be:	2b01      	cmp	r3, #1
 80076c0:	d101      	bne.n	80076c6 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80076c2:	2302      	movs	r3, #2
 80076c4:	e0fd      	b.n	80078c2 <HAL_TIM_PWM_ConfigChannel+0x216>
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	2201      	movs	r2, #1
 80076ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	2b14      	cmp	r3, #20
 80076d2:	f200 80f0 	bhi.w	80078b6 <HAL_TIM_PWM_ConfigChannel+0x20a>
 80076d6:	a201      	add	r2, pc, #4	; (adr r2, 80076dc <HAL_TIM_PWM_ConfigChannel+0x30>)
 80076d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076dc:	08007731 	.word	0x08007731
 80076e0:	080078b7 	.word	0x080078b7
 80076e4:	080078b7 	.word	0x080078b7
 80076e8:	080078b7 	.word	0x080078b7
 80076ec:	08007771 	.word	0x08007771
 80076f0:	080078b7 	.word	0x080078b7
 80076f4:	080078b7 	.word	0x080078b7
 80076f8:	080078b7 	.word	0x080078b7
 80076fc:	080077b3 	.word	0x080077b3
 8007700:	080078b7 	.word	0x080078b7
 8007704:	080078b7 	.word	0x080078b7
 8007708:	080078b7 	.word	0x080078b7
 800770c:	080077f3 	.word	0x080077f3
 8007710:	080078b7 	.word	0x080078b7
 8007714:	080078b7 	.word	0x080078b7
 8007718:	080078b7 	.word	0x080078b7
 800771c:	08007835 	.word	0x08007835
 8007720:	080078b7 	.word	0x080078b7
 8007724:	080078b7 	.word	0x080078b7
 8007728:	080078b7 	.word	0x080078b7
 800772c:	08007875 	.word	0x08007875
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	68b9      	ldr	r1, [r7, #8]
 8007736:	4618      	mov	r0, r3
 8007738:	f000 f962 	bl	8007a00 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	699a      	ldr	r2, [r3, #24]
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	f042 0208 	orr.w	r2, r2, #8
 800774a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	699a      	ldr	r2, [r3, #24]
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	f022 0204 	bic.w	r2, r2, #4
 800775a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	6999      	ldr	r1, [r3, #24]
 8007762:	68bb      	ldr	r3, [r7, #8]
 8007764:	691a      	ldr	r2, [r3, #16]
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	430a      	orrs	r2, r1
 800776c:	619a      	str	r2, [r3, #24]
      break;
 800776e:	e0a3      	b.n	80078b8 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	68b9      	ldr	r1, [r7, #8]
 8007776:	4618      	mov	r0, r3
 8007778:	f000 f9d2 	bl	8007b20 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	699a      	ldr	r2, [r3, #24]
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800778a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	699a      	ldr	r2, [r3, #24]
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800779a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	6999      	ldr	r1, [r3, #24]
 80077a2:	68bb      	ldr	r3, [r7, #8]
 80077a4:	691b      	ldr	r3, [r3, #16]
 80077a6:	021a      	lsls	r2, r3, #8
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	430a      	orrs	r2, r1
 80077ae:	619a      	str	r2, [r3, #24]
      break;
 80077b0:	e082      	b.n	80078b8 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	68b9      	ldr	r1, [r7, #8]
 80077b8:	4618      	mov	r0, r3
 80077ba:	f000 fa3b 	bl	8007c34 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	69da      	ldr	r2, [r3, #28]
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	f042 0208 	orr.w	r2, r2, #8
 80077cc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	69da      	ldr	r2, [r3, #28]
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	f022 0204 	bic.w	r2, r2, #4
 80077dc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	69d9      	ldr	r1, [r3, #28]
 80077e4:	68bb      	ldr	r3, [r7, #8]
 80077e6:	691a      	ldr	r2, [r3, #16]
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	430a      	orrs	r2, r1
 80077ee:	61da      	str	r2, [r3, #28]
      break;
 80077f0:	e062      	b.n	80078b8 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	68b9      	ldr	r1, [r7, #8]
 80077f8:	4618      	mov	r0, r3
 80077fa:	f000 faa1 	bl	8007d40 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	69da      	ldr	r2, [r3, #28]
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800780c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	69da      	ldr	r2, [r3, #28]
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800781c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	69d9      	ldr	r1, [r3, #28]
 8007824:	68bb      	ldr	r3, [r7, #8]
 8007826:	691b      	ldr	r3, [r3, #16]
 8007828:	021a      	lsls	r2, r3, #8
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	430a      	orrs	r2, r1
 8007830:	61da      	str	r2, [r3, #28]
      break;
 8007832:	e041      	b.n	80078b8 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	68b9      	ldr	r1, [r7, #8]
 800783a:	4618      	mov	r0, r3
 800783c:	f000 fae8 	bl	8007e10 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	f042 0208 	orr.w	r2, r2, #8
 800784e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	f022 0204 	bic.w	r2, r2, #4
 800785e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8007866:	68bb      	ldr	r3, [r7, #8]
 8007868:	691a      	ldr	r2, [r3, #16]
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	430a      	orrs	r2, r1
 8007870:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8007872:	e021      	b.n	80078b8 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	68b9      	ldr	r1, [r7, #8]
 800787a:	4618      	mov	r0, r3
 800787c:	f000 fb2a 	bl	8007ed4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800788e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800789e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80078a6:	68bb      	ldr	r3, [r7, #8]
 80078a8:	691b      	ldr	r3, [r3, #16]
 80078aa:	021a      	lsls	r2, r3, #8
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	430a      	orrs	r2, r1
 80078b2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80078b4:	e000      	b.n	80078b8 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 80078b6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	2200      	movs	r2, #0
 80078bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80078c0:	2300      	movs	r3, #0
}
 80078c2:	4618      	mov	r0, r3
 80078c4:	3710      	adds	r7, #16
 80078c6:	46bd      	mov	sp, r7
 80078c8:	bd80      	pop	{r7, pc}
 80078ca:	bf00      	nop

080078cc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80078cc:	b480      	push	{r7}
 80078ce:	b085      	sub	sp, #20
 80078d0:	af00      	add	r7, sp, #0
 80078d2:	6078      	str	r0, [r7, #4]
 80078d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	4a40      	ldr	r2, [pc, #256]	; (80079e0 <TIM_Base_SetConfig+0x114>)
 80078e0:	4293      	cmp	r3, r2
 80078e2:	d013      	beq.n	800790c <TIM_Base_SetConfig+0x40>
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80078ea:	d00f      	beq.n	800790c <TIM_Base_SetConfig+0x40>
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	4a3d      	ldr	r2, [pc, #244]	; (80079e4 <TIM_Base_SetConfig+0x118>)
 80078f0:	4293      	cmp	r3, r2
 80078f2:	d00b      	beq.n	800790c <TIM_Base_SetConfig+0x40>
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	4a3c      	ldr	r2, [pc, #240]	; (80079e8 <TIM_Base_SetConfig+0x11c>)
 80078f8:	4293      	cmp	r3, r2
 80078fa:	d007      	beq.n	800790c <TIM_Base_SetConfig+0x40>
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	4a3b      	ldr	r2, [pc, #236]	; (80079ec <TIM_Base_SetConfig+0x120>)
 8007900:	4293      	cmp	r3, r2
 8007902:	d003      	beq.n	800790c <TIM_Base_SetConfig+0x40>
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	4a3a      	ldr	r2, [pc, #232]	; (80079f0 <TIM_Base_SetConfig+0x124>)
 8007908:	4293      	cmp	r3, r2
 800790a:	d108      	bne.n	800791e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007912:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007914:	683b      	ldr	r3, [r7, #0]
 8007916:	685b      	ldr	r3, [r3, #4]
 8007918:	68fa      	ldr	r2, [r7, #12]
 800791a:	4313      	orrs	r3, r2
 800791c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	4a2f      	ldr	r2, [pc, #188]	; (80079e0 <TIM_Base_SetConfig+0x114>)
 8007922:	4293      	cmp	r3, r2
 8007924:	d01f      	beq.n	8007966 <TIM_Base_SetConfig+0x9a>
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800792c:	d01b      	beq.n	8007966 <TIM_Base_SetConfig+0x9a>
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	4a2c      	ldr	r2, [pc, #176]	; (80079e4 <TIM_Base_SetConfig+0x118>)
 8007932:	4293      	cmp	r3, r2
 8007934:	d017      	beq.n	8007966 <TIM_Base_SetConfig+0x9a>
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	4a2b      	ldr	r2, [pc, #172]	; (80079e8 <TIM_Base_SetConfig+0x11c>)
 800793a:	4293      	cmp	r3, r2
 800793c:	d013      	beq.n	8007966 <TIM_Base_SetConfig+0x9a>
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	4a2a      	ldr	r2, [pc, #168]	; (80079ec <TIM_Base_SetConfig+0x120>)
 8007942:	4293      	cmp	r3, r2
 8007944:	d00f      	beq.n	8007966 <TIM_Base_SetConfig+0x9a>
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	4a29      	ldr	r2, [pc, #164]	; (80079f0 <TIM_Base_SetConfig+0x124>)
 800794a:	4293      	cmp	r3, r2
 800794c:	d00b      	beq.n	8007966 <TIM_Base_SetConfig+0x9a>
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	4a28      	ldr	r2, [pc, #160]	; (80079f4 <TIM_Base_SetConfig+0x128>)
 8007952:	4293      	cmp	r3, r2
 8007954:	d007      	beq.n	8007966 <TIM_Base_SetConfig+0x9a>
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	4a27      	ldr	r2, [pc, #156]	; (80079f8 <TIM_Base_SetConfig+0x12c>)
 800795a:	4293      	cmp	r3, r2
 800795c:	d003      	beq.n	8007966 <TIM_Base_SetConfig+0x9a>
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	4a26      	ldr	r2, [pc, #152]	; (80079fc <TIM_Base_SetConfig+0x130>)
 8007962:	4293      	cmp	r3, r2
 8007964:	d108      	bne.n	8007978 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800796c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800796e:	683b      	ldr	r3, [r7, #0]
 8007970:	68db      	ldr	r3, [r3, #12]
 8007972:	68fa      	ldr	r2, [r7, #12]
 8007974:	4313      	orrs	r3, r2
 8007976:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800797e:	683b      	ldr	r3, [r7, #0]
 8007980:	695b      	ldr	r3, [r3, #20]
 8007982:	4313      	orrs	r3, r2
 8007984:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	68fa      	ldr	r2, [r7, #12]
 800798a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800798c:	683b      	ldr	r3, [r7, #0]
 800798e:	689a      	ldr	r2, [r3, #8]
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007994:	683b      	ldr	r3, [r7, #0]
 8007996:	681a      	ldr	r2, [r3, #0]
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	4a10      	ldr	r2, [pc, #64]	; (80079e0 <TIM_Base_SetConfig+0x114>)
 80079a0:	4293      	cmp	r3, r2
 80079a2:	d00f      	beq.n	80079c4 <TIM_Base_SetConfig+0xf8>
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	4a12      	ldr	r2, [pc, #72]	; (80079f0 <TIM_Base_SetConfig+0x124>)
 80079a8:	4293      	cmp	r3, r2
 80079aa:	d00b      	beq.n	80079c4 <TIM_Base_SetConfig+0xf8>
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	4a11      	ldr	r2, [pc, #68]	; (80079f4 <TIM_Base_SetConfig+0x128>)
 80079b0:	4293      	cmp	r3, r2
 80079b2:	d007      	beq.n	80079c4 <TIM_Base_SetConfig+0xf8>
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	4a10      	ldr	r2, [pc, #64]	; (80079f8 <TIM_Base_SetConfig+0x12c>)
 80079b8:	4293      	cmp	r3, r2
 80079ba:	d003      	beq.n	80079c4 <TIM_Base_SetConfig+0xf8>
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	4a0f      	ldr	r2, [pc, #60]	; (80079fc <TIM_Base_SetConfig+0x130>)
 80079c0:	4293      	cmp	r3, r2
 80079c2:	d103      	bne.n	80079cc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80079c4:	683b      	ldr	r3, [r7, #0]
 80079c6:	691a      	ldr	r2, [r3, #16]
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	2201      	movs	r2, #1
 80079d0:	615a      	str	r2, [r3, #20]
}
 80079d2:	bf00      	nop
 80079d4:	3714      	adds	r7, #20
 80079d6:	46bd      	mov	sp, r7
 80079d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079dc:	4770      	bx	lr
 80079de:	bf00      	nop
 80079e0:	40010000 	.word	0x40010000
 80079e4:	40000400 	.word	0x40000400
 80079e8:	40000800 	.word	0x40000800
 80079ec:	40000c00 	.word	0x40000c00
 80079f0:	40010400 	.word	0x40010400
 80079f4:	40014000 	.word	0x40014000
 80079f8:	40014400 	.word	0x40014400
 80079fc:	40014800 	.word	0x40014800

08007a00 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007a00:	b480      	push	{r7}
 8007a02:	b087      	sub	sp, #28
 8007a04:	af00      	add	r7, sp, #0
 8007a06:	6078      	str	r0, [r7, #4]
 8007a08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	6a1b      	ldr	r3, [r3, #32]
 8007a0e:	f023 0201 	bic.w	r2, r3, #1
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	6a1b      	ldr	r3, [r3, #32]
 8007a1a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	685b      	ldr	r3, [r3, #4]
 8007a20:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	699b      	ldr	r3, [r3, #24]
 8007a26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007a28:	68fa      	ldr	r2, [r7, #12]
 8007a2a:	4b37      	ldr	r3, [pc, #220]	; (8007b08 <TIM_OC1_SetConfig+0x108>)
 8007a2c:	4013      	ands	r3, r2
 8007a2e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	f023 0303 	bic.w	r3, r3, #3
 8007a36:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007a38:	683b      	ldr	r3, [r7, #0]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	68fa      	ldr	r2, [r7, #12]
 8007a3e:	4313      	orrs	r3, r2
 8007a40:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007a42:	697b      	ldr	r3, [r7, #20]
 8007a44:	f023 0302 	bic.w	r3, r3, #2
 8007a48:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007a4a:	683b      	ldr	r3, [r7, #0]
 8007a4c:	689b      	ldr	r3, [r3, #8]
 8007a4e:	697a      	ldr	r2, [r7, #20]
 8007a50:	4313      	orrs	r3, r2
 8007a52:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	4a2d      	ldr	r2, [pc, #180]	; (8007b0c <TIM_OC1_SetConfig+0x10c>)
 8007a58:	4293      	cmp	r3, r2
 8007a5a:	d00f      	beq.n	8007a7c <TIM_OC1_SetConfig+0x7c>
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	4a2c      	ldr	r2, [pc, #176]	; (8007b10 <TIM_OC1_SetConfig+0x110>)
 8007a60:	4293      	cmp	r3, r2
 8007a62:	d00b      	beq.n	8007a7c <TIM_OC1_SetConfig+0x7c>
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	4a2b      	ldr	r2, [pc, #172]	; (8007b14 <TIM_OC1_SetConfig+0x114>)
 8007a68:	4293      	cmp	r3, r2
 8007a6a:	d007      	beq.n	8007a7c <TIM_OC1_SetConfig+0x7c>
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	4a2a      	ldr	r2, [pc, #168]	; (8007b18 <TIM_OC1_SetConfig+0x118>)
 8007a70:	4293      	cmp	r3, r2
 8007a72:	d003      	beq.n	8007a7c <TIM_OC1_SetConfig+0x7c>
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	4a29      	ldr	r2, [pc, #164]	; (8007b1c <TIM_OC1_SetConfig+0x11c>)
 8007a78:	4293      	cmp	r3, r2
 8007a7a:	d10c      	bne.n	8007a96 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007a7c:	697b      	ldr	r3, [r7, #20]
 8007a7e:	f023 0308 	bic.w	r3, r3, #8
 8007a82:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007a84:	683b      	ldr	r3, [r7, #0]
 8007a86:	68db      	ldr	r3, [r3, #12]
 8007a88:	697a      	ldr	r2, [r7, #20]
 8007a8a:	4313      	orrs	r3, r2
 8007a8c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007a8e:	697b      	ldr	r3, [r7, #20]
 8007a90:	f023 0304 	bic.w	r3, r3, #4
 8007a94:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	4a1c      	ldr	r2, [pc, #112]	; (8007b0c <TIM_OC1_SetConfig+0x10c>)
 8007a9a:	4293      	cmp	r3, r2
 8007a9c:	d00f      	beq.n	8007abe <TIM_OC1_SetConfig+0xbe>
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	4a1b      	ldr	r2, [pc, #108]	; (8007b10 <TIM_OC1_SetConfig+0x110>)
 8007aa2:	4293      	cmp	r3, r2
 8007aa4:	d00b      	beq.n	8007abe <TIM_OC1_SetConfig+0xbe>
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	4a1a      	ldr	r2, [pc, #104]	; (8007b14 <TIM_OC1_SetConfig+0x114>)
 8007aaa:	4293      	cmp	r3, r2
 8007aac:	d007      	beq.n	8007abe <TIM_OC1_SetConfig+0xbe>
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	4a19      	ldr	r2, [pc, #100]	; (8007b18 <TIM_OC1_SetConfig+0x118>)
 8007ab2:	4293      	cmp	r3, r2
 8007ab4:	d003      	beq.n	8007abe <TIM_OC1_SetConfig+0xbe>
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	4a18      	ldr	r2, [pc, #96]	; (8007b1c <TIM_OC1_SetConfig+0x11c>)
 8007aba:	4293      	cmp	r3, r2
 8007abc:	d111      	bne.n	8007ae2 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007abe:	693b      	ldr	r3, [r7, #16]
 8007ac0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007ac4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007ac6:	693b      	ldr	r3, [r7, #16]
 8007ac8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007acc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007ace:	683b      	ldr	r3, [r7, #0]
 8007ad0:	695b      	ldr	r3, [r3, #20]
 8007ad2:	693a      	ldr	r2, [r7, #16]
 8007ad4:	4313      	orrs	r3, r2
 8007ad6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007ad8:	683b      	ldr	r3, [r7, #0]
 8007ada:	699b      	ldr	r3, [r3, #24]
 8007adc:	693a      	ldr	r2, [r7, #16]
 8007ade:	4313      	orrs	r3, r2
 8007ae0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	693a      	ldr	r2, [r7, #16]
 8007ae6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	68fa      	ldr	r2, [r7, #12]
 8007aec:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007aee:	683b      	ldr	r3, [r7, #0]
 8007af0:	685a      	ldr	r2, [r3, #4]
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	697a      	ldr	r2, [r7, #20]
 8007afa:	621a      	str	r2, [r3, #32]
}
 8007afc:	bf00      	nop
 8007afe:	371c      	adds	r7, #28
 8007b00:	46bd      	mov	sp, r7
 8007b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b06:	4770      	bx	lr
 8007b08:	fffeff8f 	.word	0xfffeff8f
 8007b0c:	40010000 	.word	0x40010000
 8007b10:	40010400 	.word	0x40010400
 8007b14:	40014000 	.word	0x40014000
 8007b18:	40014400 	.word	0x40014400
 8007b1c:	40014800 	.word	0x40014800

08007b20 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007b20:	b480      	push	{r7}
 8007b22:	b087      	sub	sp, #28
 8007b24:	af00      	add	r7, sp, #0
 8007b26:	6078      	str	r0, [r7, #4]
 8007b28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	6a1b      	ldr	r3, [r3, #32]
 8007b2e:	f023 0210 	bic.w	r2, r3, #16
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	6a1b      	ldr	r3, [r3, #32]
 8007b3a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	685b      	ldr	r3, [r3, #4]
 8007b40:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	699b      	ldr	r3, [r3, #24]
 8007b46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007b48:	68fa      	ldr	r2, [r7, #12]
 8007b4a:	4b34      	ldr	r3, [pc, #208]	; (8007c1c <TIM_OC2_SetConfig+0xfc>)
 8007b4c:	4013      	ands	r3, r2
 8007b4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007b56:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007b58:	683b      	ldr	r3, [r7, #0]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	021b      	lsls	r3, r3, #8
 8007b5e:	68fa      	ldr	r2, [r7, #12]
 8007b60:	4313      	orrs	r3, r2
 8007b62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007b64:	697b      	ldr	r3, [r7, #20]
 8007b66:	f023 0320 	bic.w	r3, r3, #32
 8007b6a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007b6c:	683b      	ldr	r3, [r7, #0]
 8007b6e:	689b      	ldr	r3, [r3, #8]
 8007b70:	011b      	lsls	r3, r3, #4
 8007b72:	697a      	ldr	r2, [r7, #20]
 8007b74:	4313      	orrs	r3, r2
 8007b76:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	4a29      	ldr	r2, [pc, #164]	; (8007c20 <TIM_OC2_SetConfig+0x100>)
 8007b7c:	4293      	cmp	r3, r2
 8007b7e:	d003      	beq.n	8007b88 <TIM_OC2_SetConfig+0x68>
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	4a28      	ldr	r2, [pc, #160]	; (8007c24 <TIM_OC2_SetConfig+0x104>)
 8007b84:	4293      	cmp	r3, r2
 8007b86:	d10d      	bne.n	8007ba4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007b88:	697b      	ldr	r3, [r7, #20]
 8007b8a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007b8e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007b90:	683b      	ldr	r3, [r7, #0]
 8007b92:	68db      	ldr	r3, [r3, #12]
 8007b94:	011b      	lsls	r3, r3, #4
 8007b96:	697a      	ldr	r2, [r7, #20]
 8007b98:	4313      	orrs	r3, r2
 8007b9a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007b9c:	697b      	ldr	r3, [r7, #20]
 8007b9e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007ba2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	4a1e      	ldr	r2, [pc, #120]	; (8007c20 <TIM_OC2_SetConfig+0x100>)
 8007ba8:	4293      	cmp	r3, r2
 8007baa:	d00f      	beq.n	8007bcc <TIM_OC2_SetConfig+0xac>
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	4a1d      	ldr	r2, [pc, #116]	; (8007c24 <TIM_OC2_SetConfig+0x104>)
 8007bb0:	4293      	cmp	r3, r2
 8007bb2:	d00b      	beq.n	8007bcc <TIM_OC2_SetConfig+0xac>
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	4a1c      	ldr	r2, [pc, #112]	; (8007c28 <TIM_OC2_SetConfig+0x108>)
 8007bb8:	4293      	cmp	r3, r2
 8007bba:	d007      	beq.n	8007bcc <TIM_OC2_SetConfig+0xac>
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	4a1b      	ldr	r2, [pc, #108]	; (8007c2c <TIM_OC2_SetConfig+0x10c>)
 8007bc0:	4293      	cmp	r3, r2
 8007bc2:	d003      	beq.n	8007bcc <TIM_OC2_SetConfig+0xac>
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	4a1a      	ldr	r2, [pc, #104]	; (8007c30 <TIM_OC2_SetConfig+0x110>)
 8007bc8:	4293      	cmp	r3, r2
 8007bca:	d113      	bne.n	8007bf4 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007bcc:	693b      	ldr	r3, [r7, #16]
 8007bce:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007bd2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007bd4:	693b      	ldr	r3, [r7, #16]
 8007bd6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007bda:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007bdc:	683b      	ldr	r3, [r7, #0]
 8007bde:	695b      	ldr	r3, [r3, #20]
 8007be0:	009b      	lsls	r3, r3, #2
 8007be2:	693a      	ldr	r2, [r7, #16]
 8007be4:	4313      	orrs	r3, r2
 8007be6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007be8:	683b      	ldr	r3, [r7, #0]
 8007bea:	699b      	ldr	r3, [r3, #24]
 8007bec:	009b      	lsls	r3, r3, #2
 8007bee:	693a      	ldr	r2, [r7, #16]
 8007bf0:	4313      	orrs	r3, r2
 8007bf2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	693a      	ldr	r2, [r7, #16]
 8007bf8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	68fa      	ldr	r2, [r7, #12]
 8007bfe:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007c00:	683b      	ldr	r3, [r7, #0]
 8007c02:	685a      	ldr	r2, [r3, #4]
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	697a      	ldr	r2, [r7, #20]
 8007c0c:	621a      	str	r2, [r3, #32]
}
 8007c0e:	bf00      	nop
 8007c10:	371c      	adds	r7, #28
 8007c12:	46bd      	mov	sp, r7
 8007c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c18:	4770      	bx	lr
 8007c1a:	bf00      	nop
 8007c1c:	feff8fff 	.word	0xfeff8fff
 8007c20:	40010000 	.word	0x40010000
 8007c24:	40010400 	.word	0x40010400
 8007c28:	40014000 	.word	0x40014000
 8007c2c:	40014400 	.word	0x40014400
 8007c30:	40014800 	.word	0x40014800

08007c34 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007c34:	b480      	push	{r7}
 8007c36:	b087      	sub	sp, #28
 8007c38:	af00      	add	r7, sp, #0
 8007c3a:	6078      	str	r0, [r7, #4]
 8007c3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	6a1b      	ldr	r3, [r3, #32]
 8007c42:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	6a1b      	ldr	r3, [r3, #32]
 8007c4e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	685b      	ldr	r3, [r3, #4]
 8007c54:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	69db      	ldr	r3, [r3, #28]
 8007c5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c62:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	f023 0303 	bic.w	r3, r3, #3
 8007c6a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007c6c:	683b      	ldr	r3, [r7, #0]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	68fa      	ldr	r2, [r7, #12]
 8007c72:	4313      	orrs	r3, r2
 8007c74:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007c76:	697b      	ldr	r3, [r7, #20]
 8007c78:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007c7c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007c7e:	683b      	ldr	r3, [r7, #0]
 8007c80:	689b      	ldr	r3, [r3, #8]
 8007c82:	021b      	lsls	r3, r3, #8
 8007c84:	697a      	ldr	r2, [r7, #20]
 8007c86:	4313      	orrs	r3, r2
 8007c88:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	4a27      	ldr	r2, [pc, #156]	; (8007d2c <TIM_OC3_SetConfig+0xf8>)
 8007c8e:	4293      	cmp	r3, r2
 8007c90:	d003      	beq.n	8007c9a <TIM_OC3_SetConfig+0x66>
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	4a26      	ldr	r2, [pc, #152]	; (8007d30 <TIM_OC3_SetConfig+0xfc>)
 8007c96:	4293      	cmp	r3, r2
 8007c98:	d10d      	bne.n	8007cb6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007c9a:	697b      	ldr	r3, [r7, #20]
 8007c9c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007ca0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007ca2:	683b      	ldr	r3, [r7, #0]
 8007ca4:	68db      	ldr	r3, [r3, #12]
 8007ca6:	021b      	lsls	r3, r3, #8
 8007ca8:	697a      	ldr	r2, [r7, #20]
 8007caa:	4313      	orrs	r3, r2
 8007cac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007cae:	697b      	ldr	r3, [r7, #20]
 8007cb0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007cb4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	4a1c      	ldr	r2, [pc, #112]	; (8007d2c <TIM_OC3_SetConfig+0xf8>)
 8007cba:	4293      	cmp	r3, r2
 8007cbc:	d00f      	beq.n	8007cde <TIM_OC3_SetConfig+0xaa>
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	4a1b      	ldr	r2, [pc, #108]	; (8007d30 <TIM_OC3_SetConfig+0xfc>)
 8007cc2:	4293      	cmp	r3, r2
 8007cc4:	d00b      	beq.n	8007cde <TIM_OC3_SetConfig+0xaa>
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	4a1a      	ldr	r2, [pc, #104]	; (8007d34 <TIM_OC3_SetConfig+0x100>)
 8007cca:	4293      	cmp	r3, r2
 8007ccc:	d007      	beq.n	8007cde <TIM_OC3_SetConfig+0xaa>
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	4a19      	ldr	r2, [pc, #100]	; (8007d38 <TIM_OC3_SetConfig+0x104>)
 8007cd2:	4293      	cmp	r3, r2
 8007cd4:	d003      	beq.n	8007cde <TIM_OC3_SetConfig+0xaa>
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	4a18      	ldr	r2, [pc, #96]	; (8007d3c <TIM_OC3_SetConfig+0x108>)
 8007cda:	4293      	cmp	r3, r2
 8007cdc:	d113      	bne.n	8007d06 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007cde:	693b      	ldr	r3, [r7, #16]
 8007ce0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007ce4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007ce6:	693b      	ldr	r3, [r7, #16]
 8007ce8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007cec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007cee:	683b      	ldr	r3, [r7, #0]
 8007cf0:	695b      	ldr	r3, [r3, #20]
 8007cf2:	011b      	lsls	r3, r3, #4
 8007cf4:	693a      	ldr	r2, [r7, #16]
 8007cf6:	4313      	orrs	r3, r2
 8007cf8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007cfa:	683b      	ldr	r3, [r7, #0]
 8007cfc:	699b      	ldr	r3, [r3, #24]
 8007cfe:	011b      	lsls	r3, r3, #4
 8007d00:	693a      	ldr	r2, [r7, #16]
 8007d02:	4313      	orrs	r3, r2
 8007d04:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	693a      	ldr	r2, [r7, #16]
 8007d0a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	68fa      	ldr	r2, [r7, #12]
 8007d10:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007d12:	683b      	ldr	r3, [r7, #0]
 8007d14:	685a      	ldr	r2, [r3, #4]
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	697a      	ldr	r2, [r7, #20]
 8007d1e:	621a      	str	r2, [r3, #32]
}
 8007d20:	bf00      	nop
 8007d22:	371c      	adds	r7, #28
 8007d24:	46bd      	mov	sp, r7
 8007d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d2a:	4770      	bx	lr
 8007d2c:	40010000 	.word	0x40010000
 8007d30:	40010400 	.word	0x40010400
 8007d34:	40014000 	.word	0x40014000
 8007d38:	40014400 	.word	0x40014400
 8007d3c:	40014800 	.word	0x40014800

08007d40 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007d40:	b480      	push	{r7}
 8007d42:	b087      	sub	sp, #28
 8007d44:	af00      	add	r7, sp, #0
 8007d46:	6078      	str	r0, [r7, #4]
 8007d48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	6a1b      	ldr	r3, [r3, #32]
 8007d4e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	6a1b      	ldr	r3, [r3, #32]
 8007d5a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	685b      	ldr	r3, [r3, #4]
 8007d60:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	69db      	ldr	r3, [r3, #28]
 8007d66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007d6e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007d76:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007d78:	683b      	ldr	r3, [r7, #0]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	021b      	lsls	r3, r3, #8
 8007d7e:	68fa      	ldr	r2, [r7, #12]
 8007d80:	4313      	orrs	r3, r2
 8007d82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007d84:	693b      	ldr	r3, [r7, #16]
 8007d86:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007d8a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007d8c:	683b      	ldr	r3, [r7, #0]
 8007d8e:	689b      	ldr	r3, [r3, #8]
 8007d90:	031b      	lsls	r3, r3, #12
 8007d92:	693a      	ldr	r2, [r7, #16]
 8007d94:	4313      	orrs	r3, r2
 8007d96:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	4a18      	ldr	r2, [pc, #96]	; (8007dfc <TIM_OC4_SetConfig+0xbc>)
 8007d9c:	4293      	cmp	r3, r2
 8007d9e:	d00f      	beq.n	8007dc0 <TIM_OC4_SetConfig+0x80>
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	4a17      	ldr	r2, [pc, #92]	; (8007e00 <TIM_OC4_SetConfig+0xc0>)
 8007da4:	4293      	cmp	r3, r2
 8007da6:	d00b      	beq.n	8007dc0 <TIM_OC4_SetConfig+0x80>
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	4a16      	ldr	r2, [pc, #88]	; (8007e04 <TIM_OC4_SetConfig+0xc4>)
 8007dac:	4293      	cmp	r3, r2
 8007dae:	d007      	beq.n	8007dc0 <TIM_OC4_SetConfig+0x80>
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	4a15      	ldr	r2, [pc, #84]	; (8007e08 <TIM_OC4_SetConfig+0xc8>)
 8007db4:	4293      	cmp	r3, r2
 8007db6:	d003      	beq.n	8007dc0 <TIM_OC4_SetConfig+0x80>
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	4a14      	ldr	r2, [pc, #80]	; (8007e0c <TIM_OC4_SetConfig+0xcc>)
 8007dbc:	4293      	cmp	r3, r2
 8007dbe:	d109      	bne.n	8007dd4 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007dc0:	697b      	ldr	r3, [r7, #20]
 8007dc2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007dc6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007dc8:	683b      	ldr	r3, [r7, #0]
 8007dca:	695b      	ldr	r3, [r3, #20]
 8007dcc:	019b      	lsls	r3, r3, #6
 8007dce:	697a      	ldr	r2, [r7, #20]
 8007dd0:	4313      	orrs	r3, r2
 8007dd2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	697a      	ldr	r2, [r7, #20]
 8007dd8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	68fa      	ldr	r2, [r7, #12]
 8007dde:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007de0:	683b      	ldr	r3, [r7, #0]
 8007de2:	685a      	ldr	r2, [r3, #4]
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	693a      	ldr	r2, [r7, #16]
 8007dec:	621a      	str	r2, [r3, #32]
}
 8007dee:	bf00      	nop
 8007df0:	371c      	adds	r7, #28
 8007df2:	46bd      	mov	sp, r7
 8007df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007df8:	4770      	bx	lr
 8007dfa:	bf00      	nop
 8007dfc:	40010000 	.word	0x40010000
 8007e00:	40010400 	.word	0x40010400
 8007e04:	40014000 	.word	0x40014000
 8007e08:	40014400 	.word	0x40014400
 8007e0c:	40014800 	.word	0x40014800

08007e10 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8007e10:	b480      	push	{r7}
 8007e12:	b087      	sub	sp, #28
 8007e14:	af00      	add	r7, sp, #0
 8007e16:	6078      	str	r0, [r7, #4]
 8007e18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	6a1b      	ldr	r3, [r3, #32]
 8007e1e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	6a1b      	ldr	r3, [r3, #32]
 8007e2a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	685b      	ldr	r3, [r3, #4]
 8007e30:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e3e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007e40:	683b      	ldr	r3, [r7, #0]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	68fa      	ldr	r2, [r7, #12]
 8007e46:	4313      	orrs	r3, r2
 8007e48:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007e4a:	693b      	ldr	r3, [r7, #16]
 8007e4c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8007e50:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007e52:	683b      	ldr	r3, [r7, #0]
 8007e54:	689b      	ldr	r3, [r3, #8]
 8007e56:	041b      	lsls	r3, r3, #16
 8007e58:	693a      	ldr	r2, [r7, #16]
 8007e5a:	4313      	orrs	r3, r2
 8007e5c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	4a17      	ldr	r2, [pc, #92]	; (8007ec0 <TIM_OC5_SetConfig+0xb0>)
 8007e62:	4293      	cmp	r3, r2
 8007e64:	d00f      	beq.n	8007e86 <TIM_OC5_SetConfig+0x76>
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	4a16      	ldr	r2, [pc, #88]	; (8007ec4 <TIM_OC5_SetConfig+0xb4>)
 8007e6a:	4293      	cmp	r3, r2
 8007e6c:	d00b      	beq.n	8007e86 <TIM_OC5_SetConfig+0x76>
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	4a15      	ldr	r2, [pc, #84]	; (8007ec8 <TIM_OC5_SetConfig+0xb8>)
 8007e72:	4293      	cmp	r3, r2
 8007e74:	d007      	beq.n	8007e86 <TIM_OC5_SetConfig+0x76>
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	4a14      	ldr	r2, [pc, #80]	; (8007ecc <TIM_OC5_SetConfig+0xbc>)
 8007e7a:	4293      	cmp	r3, r2
 8007e7c:	d003      	beq.n	8007e86 <TIM_OC5_SetConfig+0x76>
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	4a13      	ldr	r2, [pc, #76]	; (8007ed0 <TIM_OC5_SetConfig+0xc0>)
 8007e82:	4293      	cmp	r3, r2
 8007e84:	d109      	bne.n	8007e9a <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007e86:	697b      	ldr	r3, [r7, #20]
 8007e88:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007e8c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007e8e:	683b      	ldr	r3, [r7, #0]
 8007e90:	695b      	ldr	r3, [r3, #20]
 8007e92:	021b      	lsls	r3, r3, #8
 8007e94:	697a      	ldr	r2, [r7, #20]
 8007e96:	4313      	orrs	r3, r2
 8007e98:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	697a      	ldr	r2, [r7, #20]
 8007e9e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	68fa      	ldr	r2, [r7, #12]
 8007ea4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007ea6:	683b      	ldr	r3, [r7, #0]
 8007ea8:	685a      	ldr	r2, [r3, #4]
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	693a      	ldr	r2, [r7, #16]
 8007eb2:	621a      	str	r2, [r3, #32]
}
 8007eb4:	bf00      	nop
 8007eb6:	371c      	adds	r7, #28
 8007eb8:	46bd      	mov	sp, r7
 8007eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ebe:	4770      	bx	lr
 8007ec0:	40010000 	.word	0x40010000
 8007ec4:	40010400 	.word	0x40010400
 8007ec8:	40014000 	.word	0x40014000
 8007ecc:	40014400 	.word	0x40014400
 8007ed0:	40014800 	.word	0x40014800

08007ed4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8007ed4:	b480      	push	{r7}
 8007ed6:	b087      	sub	sp, #28
 8007ed8:	af00      	add	r7, sp, #0
 8007eda:	6078      	str	r0, [r7, #4]
 8007edc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	6a1b      	ldr	r3, [r3, #32]
 8007ee2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	6a1b      	ldr	r3, [r3, #32]
 8007eee:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	685b      	ldr	r3, [r3, #4]
 8007ef4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007efa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007f02:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007f04:	683b      	ldr	r3, [r7, #0]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	021b      	lsls	r3, r3, #8
 8007f0a:	68fa      	ldr	r2, [r7, #12]
 8007f0c:	4313      	orrs	r3, r2
 8007f0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007f10:	693b      	ldr	r3, [r7, #16]
 8007f12:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007f16:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007f18:	683b      	ldr	r3, [r7, #0]
 8007f1a:	689b      	ldr	r3, [r3, #8]
 8007f1c:	051b      	lsls	r3, r3, #20
 8007f1e:	693a      	ldr	r2, [r7, #16]
 8007f20:	4313      	orrs	r3, r2
 8007f22:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	4a18      	ldr	r2, [pc, #96]	; (8007f88 <TIM_OC6_SetConfig+0xb4>)
 8007f28:	4293      	cmp	r3, r2
 8007f2a:	d00f      	beq.n	8007f4c <TIM_OC6_SetConfig+0x78>
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	4a17      	ldr	r2, [pc, #92]	; (8007f8c <TIM_OC6_SetConfig+0xb8>)
 8007f30:	4293      	cmp	r3, r2
 8007f32:	d00b      	beq.n	8007f4c <TIM_OC6_SetConfig+0x78>
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	4a16      	ldr	r2, [pc, #88]	; (8007f90 <TIM_OC6_SetConfig+0xbc>)
 8007f38:	4293      	cmp	r3, r2
 8007f3a:	d007      	beq.n	8007f4c <TIM_OC6_SetConfig+0x78>
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	4a15      	ldr	r2, [pc, #84]	; (8007f94 <TIM_OC6_SetConfig+0xc0>)
 8007f40:	4293      	cmp	r3, r2
 8007f42:	d003      	beq.n	8007f4c <TIM_OC6_SetConfig+0x78>
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	4a14      	ldr	r2, [pc, #80]	; (8007f98 <TIM_OC6_SetConfig+0xc4>)
 8007f48:	4293      	cmp	r3, r2
 8007f4a:	d109      	bne.n	8007f60 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007f4c:	697b      	ldr	r3, [r7, #20]
 8007f4e:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8007f52:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007f54:	683b      	ldr	r3, [r7, #0]
 8007f56:	695b      	ldr	r3, [r3, #20]
 8007f58:	029b      	lsls	r3, r3, #10
 8007f5a:	697a      	ldr	r2, [r7, #20]
 8007f5c:	4313      	orrs	r3, r2
 8007f5e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	697a      	ldr	r2, [r7, #20]
 8007f64:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	68fa      	ldr	r2, [r7, #12]
 8007f6a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007f6c:	683b      	ldr	r3, [r7, #0]
 8007f6e:	685a      	ldr	r2, [r3, #4]
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	693a      	ldr	r2, [r7, #16]
 8007f78:	621a      	str	r2, [r3, #32]
}
 8007f7a:	bf00      	nop
 8007f7c:	371c      	adds	r7, #28
 8007f7e:	46bd      	mov	sp, r7
 8007f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f84:	4770      	bx	lr
 8007f86:	bf00      	nop
 8007f88:	40010000 	.word	0x40010000
 8007f8c:	40010400 	.word	0x40010400
 8007f90:	40014000 	.word	0x40014000
 8007f94:	40014400 	.word	0x40014400
 8007f98:	40014800 	.word	0x40014800

08007f9c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007f9c:	b480      	push	{r7}
 8007f9e:	b085      	sub	sp, #20
 8007fa0:	af00      	add	r7, sp, #0
 8007fa2:	6078      	str	r0, [r7, #4]
 8007fa4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007fac:	2b01      	cmp	r3, #1
 8007fae:	d101      	bne.n	8007fb4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007fb0:	2302      	movs	r3, #2
 8007fb2:	e068      	b.n	8008086 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	2201      	movs	r2, #1
 8007fb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	2202      	movs	r2, #2
 8007fc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	685b      	ldr	r3, [r3, #4]
 8007fca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	689b      	ldr	r3, [r3, #8]
 8007fd2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	4a2e      	ldr	r2, [pc, #184]	; (8008094 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8007fda:	4293      	cmp	r3, r2
 8007fdc:	d004      	beq.n	8007fe8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	4a2d      	ldr	r2, [pc, #180]	; (8008098 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8007fe4:	4293      	cmp	r3, r2
 8007fe6:	d108      	bne.n	8007ffa <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007fee:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007ff0:	683b      	ldr	r3, [r7, #0]
 8007ff2:	685b      	ldr	r3, [r3, #4]
 8007ff4:	68fa      	ldr	r2, [r7, #12]
 8007ff6:	4313      	orrs	r3, r2
 8007ff8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008000:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008002:	683b      	ldr	r3, [r7, #0]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	68fa      	ldr	r2, [r7, #12]
 8008008:	4313      	orrs	r3, r2
 800800a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	68fa      	ldr	r2, [r7, #12]
 8008012:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	4a1e      	ldr	r2, [pc, #120]	; (8008094 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800801a:	4293      	cmp	r3, r2
 800801c:	d01d      	beq.n	800805a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008026:	d018      	beq.n	800805a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	4a1b      	ldr	r2, [pc, #108]	; (800809c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800802e:	4293      	cmp	r3, r2
 8008030:	d013      	beq.n	800805a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	4a1a      	ldr	r2, [pc, #104]	; (80080a0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008038:	4293      	cmp	r3, r2
 800803a:	d00e      	beq.n	800805a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	4a18      	ldr	r2, [pc, #96]	; (80080a4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8008042:	4293      	cmp	r3, r2
 8008044:	d009      	beq.n	800805a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	4a13      	ldr	r2, [pc, #76]	; (8008098 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800804c:	4293      	cmp	r3, r2
 800804e:	d004      	beq.n	800805a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	4a14      	ldr	r2, [pc, #80]	; (80080a8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8008056:	4293      	cmp	r3, r2
 8008058:	d10c      	bne.n	8008074 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800805a:	68bb      	ldr	r3, [r7, #8]
 800805c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008060:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008062:	683b      	ldr	r3, [r7, #0]
 8008064:	689b      	ldr	r3, [r3, #8]
 8008066:	68ba      	ldr	r2, [r7, #8]
 8008068:	4313      	orrs	r3, r2
 800806a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	68ba      	ldr	r2, [r7, #8]
 8008072:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	2201      	movs	r2, #1
 8008078:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	2200      	movs	r2, #0
 8008080:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008084:	2300      	movs	r3, #0
}
 8008086:	4618      	mov	r0, r3
 8008088:	3714      	adds	r7, #20
 800808a:	46bd      	mov	sp, r7
 800808c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008090:	4770      	bx	lr
 8008092:	bf00      	nop
 8008094:	40010000 	.word	0x40010000
 8008098:	40010400 	.word	0x40010400
 800809c:	40000400 	.word	0x40000400
 80080a0:	40000800 	.word	0x40000800
 80080a4:	40000c00 	.word	0x40000c00
 80080a8:	40001800 	.word	0x40001800

080080ac <__libc_init_array>:
 80080ac:	b570      	push	{r4, r5, r6, lr}
 80080ae:	4d0d      	ldr	r5, [pc, #52]	; (80080e4 <__libc_init_array+0x38>)
 80080b0:	4c0d      	ldr	r4, [pc, #52]	; (80080e8 <__libc_init_array+0x3c>)
 80080b2:	1b64      	subs	r4, r4, r5
 80080b4:	10a4      	asrs	r4, r4, #2
 80080b6:	2600      	movs	r6, #0
 80080b8:	42a6      	cmp	r6, r4
 80080ba:	d109      	bne.n	80080d0 <__libc_init_array+0x24>
 80080bc:	4d0b      	ldr	r5, [pc, #44]	; (80080ec <__libc_init_array+0x40>)
 80080be:	4c0c      	ldr	r4, [pc, #48]	; (80080f0 <__libc_init_array+0x44>)
 80080c0:	f000 f82e 	bl	8008120 <_init>
 80080c4:	1b64      	subs	r4, r4, r5
 80080c6:	10a4      	asrs	r4, r4, #2
 80080c8:	2600      	movs	r6, #0
 80080ca:	42a6      	cmp	r6, r4
 80080cc:	d105      	bne.n	80080da <__libc_init_array+0x2e>
 80080ce:	bd70      	pop	{r4, r5, r6, pc}
 80080d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80080d4:	4798      	blx	r3
 80080d6:	3601      	adds	r6, #1
 80080d8:	e7ee      	b.n	80080b8 <__libc_init_array+0xc>
 80080da:	f855 3b04 	ldr.w	r3, [r5], #4
 80080de:	4798      	blx	r3
 80080e0:	3601      	adds	r6, #1
 80080e2:	e7f2      	b.n	80080ca <__libc_init_array+0x1e>
 80080e4:	080081a4 	.word	0x080081a4
 80080e8:	080081a4 	.word	0x080081a4
 80080ec:	080081a4 	.word	0x080081a4
 80080f0:	080081a8 	.word	0x080081a8

080080f4 <memcpy>:
 80080f4:	440a      	add	r2, r1
 80080f6:	4291      	cmp	r1, r2
 80080f8:	f100 33ff 	add.w	r3, r0, #4294967295
 80080fc:	d100      	bne.n	8008100 <memcpy+0xc>
 80080fe:	4770      	bx	lr
 8008100:	b510      	push	{r4, lr}
 8008102:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008106:	f803 4f01 	strb.w	r4, [r3, #1]!
 800810a:	4291      	cmp	r1, r2
 800810c:	d1f9      	bne.n	8008102 <memcpy+0xe>
 800810e:	bd10      	pop	{r4, pc}

08008110 <memset>:
 8008110:	4402      	add	r2, r0
 8008112:	4603      	mov	r3, r0
 8008114:	4293      	cmp	r3, r2
 8008116:	d100      	bne.n	800811a <memset+0xa>
 8008118:	4770      	bx	lr
 800811a:	f803 1b01 	strb.w	r1, [r3], #1
 800811e:	e7f9      	b.n	8008114 <memset+0x4>

08008120 <_init>:
 8008120:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008122:	bf00      	nop
 8008124:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008126:	bc08      	pop	{r3}
 8008128:	469e      	mov	lr, r3
 800812a:	4770      	bx	lr

0800812c <_fini>:
 800812c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800812e:	bf00      	nop
 8008130:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008132:	bc08      	pop	{r3}
 8008134:	469e      	mov	lr, r3
 8008136:	4770      	bx	lr
